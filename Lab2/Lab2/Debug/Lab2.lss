
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cda  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bb2  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000544  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013b  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000024df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
   6:	00 00       	nop
   8:	4f c0       	rjmp	.+158    	; 0xa8 <__bad_interrupt>
   a:	00 00       	nop
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
   e:	00 00       	nop
  10:	4b c0       	rjmp	.+150    	; 0xa8 <__bad_interrupt>
  12:	00 00       	nop
  14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
  16:	00 00       	nop
  18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
  22:	00 00       	nop
  24:	41 c0       	rjmp	.+130    	; 0xa8 <__bad_interrupt>
  26:	00 00       	nop
  28:	3f c0       	rjmp	.+126    	; 0xa8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3d c0       	rjmp	.+122    	; 0xa8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3b c0       	rjmp	.+118    	; 0xa8 <__bad_interrupt>
  32:	00 00       	nop
  34:	39 c0       	rjmp	.+114    	; 0xa8 <__bad_interrupt>
  36:	00 00       	nop
  38:	37 c0       	rjmp	.+110    	; 0xa8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	35 c0       	rjmp	.+106    	; 0xa8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	33 c0       	rjmp	.+102    	; 0xa8 <__bad_interrupt>
  42:	00 00       	nop
  44:	31 c0       	rjmp	.+98     	; 0xa8 <__bad_interrupt>
  46:	00 00       	nop
  48:	2f c0       	rjmp	.+94     	; 0xa8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2d c0       	rjmp	.+90     	; 0xa8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2b c0       	rjmp	.+86     	; 0xa8 <__bad_interrupt>
  52:	00 00       	nop
  54:	29 c0       	rjmp	.+82     	; 0xa8 <__bad_interrupt>
  56:	00 00       	nop
  58:	27 c0       	rjmp	.+78     	; 0xa8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	25 c0       	rjmp	.+74     	; 0xa8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	23 c0       	rjmp	.+70     	; 0xa8 <__bad_interrupt>
  62:	00 00       	nop
  64:	21 c0       	rjmp	.+66     	; 0xa8 <__bad_interrupt>
  66:	00 00       	nop
  68:	1f c0       	rjmp	.+62     	; 0xa8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1d c0       	rjmp	.+58     	; 0xa8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1b c0       	rjmp	.+54     	; 0xa8 <__bad_interrupt>
  72:	00 00       	nop
  74:	19 c0       	rjmp	.+50     	; 0xa8 <__bad_interrupt>
  76:	00 00       	nop
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	15 c0       	rjmp	.+42     	; 0xa8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	13 c0       	rjmp	.+38     	; 0xa8 <__bad_interrupt>
  82:	00 00       	nop
  84:	11 c0       	rjmp	.+34     	; 0xa8 <__bad_interrupt>
  86:	00 00       	nop
  88:	0f c0       	rjmp	.+30     	; 0xa8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	0b c0       	rjmp	.+22     	; 0xa8 <__bad_interrupt>
  92:	00 00       	nop
  94:	09 c0       	rjmp	.+18     	; 0xa8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	5e d0       	rcall	.+188    	; 0x162 <main>
  a6:	6a c0       	rjmp	.+212    	; 0x17c <_exit>

000000a8 <__bad_interrupt>:
  a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <mTimer>:
#include <avr/io.h>// the header of i/o port
#include <util/delay_basic.h> // header for delay library
#include <avr/interrupt.h> //header for interrupt function library

void mTimer(int count)
{
  aa:	ac 01       	movw	r20, r24
	int i=0;
	TCCR1B |= _BV(WGM12);	// Set WGM bits to 0100, see pg 142
  ac:	e1 e8       	ldi	r30, 0x81	; 129
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	98 60       	ori	r25, 0x08	; 8
  b4:	90 83       	st	Z, r25
	OCR1A = 0x03E8;			// Set output compare register for 1000 cycles  = 1ms
  b6:	88 ee       	ldi	r24, 0xE8	; 232
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0x0000;			// Set initial value of Timer Counter to 0x000
  c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= 0b00000010;   // Output compare interrupt enable --remove??
  ca:	ef e6       	ldi	r30, 0x6F	; 111
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	92 60       	ori	r25, 0x02	; 2
  d2:	90 83       	st	Z, r25
	TIFR1 |= _BV(OCF1A);	// Clear timer interrupt flag and begin timer
  d4:	b1 9a       	sbi	0x16, 1	; 22
#include <util/delay_basic.h> // header for delay library
#include <avr/interrupt.h> //header for interrupt function library

void mTimer(int count)
{
	int i=0;
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000;			// Set initial value of Timer Counter to 0x000
	TIMSK1 |= 0b00000010;   // Output compare interrupt enable --remove??
	TIFR1 |= _BV(OCF1A);	// Clear timer interrupt flag and begin timer
	
	/* Poll the timer to determine when the timer has reached 0x03E8 */
	while(i<count)
  da:	05 c0       	rjmp	.+10     	; 0xe6 <mTimer+0x3c>
	{
		if((TIFR1 & 0x02) == 0x02)
  dc:	b1 9b       	sbis	0x16, 1	; 22
  de:	fe cf       	rjmp	.-4      	; 0xdc <mTimer+0x32>
		{
			// clear interrupt flag by writing a 1 to the bit
			TIFR1 |= _BV(OCF1A);
  e0:	b1 9a       	sbi	0x16, 1	; 22
			i++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000;			// Set initial value of Timer Counter to 0x000
	TIMSK1 |= 0b00000010;   // Output compare interrupt enable --remove??
	TIFR1 |= _BV(OCF1A);	// Clear timer interrupt flag and begin timer
	
	/* Poll the timer to determine when the timer has reached 0x03E8 */
	while(i<count)
  e6:	24 17       	cp	r18, r20
  e8:	35 07       	cpc	r19, r21
  ea:	1c f4       	brge	.+6      	; 0xf2 <mTimer+0x48>
	{
		if((TIFR1 & 0x02) == 0x02)
  ec:	b1 9b       	sbis	0x16, 1	; 22
  ee:	f6 cf       	rjmp	.-20     	; 0xdc <mTimer+0x32>
  f0:	f7 cf       	rjmp	.-18     	; 0xe0 <mTimer+0x36>
  f2:	08 95       	ret

000000f4 <pattern>:
Then, the value is shifted and incremented or decremented so the pattern travels 
from L to R, disappears off the right side, and travels back towards the left.

*/
void pattern(volatile uint8_t* d) 
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	8c 01       	movw	r16, r24
	*d = 0b00000001; // set output port to one, Px1 = 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	f8 01       	movw	r30, r16
 102:	80 83       	st	Z, r24
	int k;
		for(k=0;k<20;k++)
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	d0 e0       	ldi	r29, 0x00	; 0
		{						
			mTimer(200);						// delay 200ms using MCU timer
 108:	88 ec       	ldi	r24, 0xC8	; 200
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	ce df       	rcall	.-100    	; 0xaa <mTimer>
			else if(k<11)	*d = (*d-128)<<1;	// continue shifting, eliminating the rightmost bit to prevent overflow
			else if(k<14)	*d = (*d>>1)+128;   // shift back L, add 128 = Px7, so the rightmost LED lights again
			else if(k<18)	*d = (*d>>1);		// continue shifting, LEDs travel R > L
			else if(k<20)	*d = (*d-1)>>1;		// eliminate leftmost bit, shift back L until only Px1 remains lit
			*/
			if(k<3)			*d = (*d<<1)+1;		// shift and add 1 to turn on an additional pin, so the number of lit LEDs increases to 4
 10e:	c3 30       	cpi	r28, 0x03	; 3
 110:	d1 05       	cpc	r29, r1
 112:	34 f4       	brge	.+12     	; 0x120 <pattern+0x2c>
 114:	f8 01       	movw	r30, r16
 116:	80 81       	ld	r24, Z
 118:	88 0f       	add	r24, r24
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 83       	st	Z, r24
 11e:	18 c0       	rjmp	.+48     	; 0x150 <pattern+0x5c>
			else if(k<10)	*d = (*d<<1);		// shift the values so the 4 LEDs travel from L > R
 120:	ca 30       	cpi	r28, 0x0A	; 10
 122:	d1 05       	cpc	r29, r1
 124:	2c f4       	brge	.+10     	; 0x130 <pattern+0x3c>
 126:	f8 01       	movw	r30, r16
 128:	80 81       	ld	r24, Z
 12a:	88 0f       	add	r24, r24
 12c:	80 83       	st	Z, r24
 12e:	10 c0       	rjmp	.+32     	; 0x150 <pattern+0x5c>
			else if(k<13)	*d = (*d>>1)+128;   // shift back L, add 128 = Px7, so the rightmost LED lights again
 130:	cd 30       	cpi	r28, 0x0D	; 13
 132:	d1 05       	cpc	r29, r1
 134:	34 f4       	brge	.+12     	; 0x142 <pattern+0x4e>
 136:	f8 01       	movw	r30, r16
 138:	80 81       	ld	r24, Z
 13a:	86 95       	lsr	r24
 13c:	80 58       	subi	r24, 0x80	; 128
 13e:	80 83       	st	Z, r24
 140:	07 c0       	rjmp	.+14     	; 0x150 <pattern+0x5c>
			else if(k<20)	*d = (*d>>1);		// eliminate leftmost bit, shift back L until only Px1 remains lit
 142:	c4 31       	cpi	r28, 0x14	; 20
 144:	d1 05       	cpc	r29, r1
 146:	24 f4       	brge	.+8      	; 0x150 <pattern+0x5c>
 148:	f8 01       	movw	r30, r16
 14a:	80 81       	ld	r24, Z
 14c:	86 95       	lsr	r24
 14e:	80 83       	st	Z, r24
*/
void pattern(volatile uint8_t* d) 
{
	*d = 0b00000001; // set output port to one, Px1 = 1
	int k;
		for(k=0;k<20;k++)
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	c4 31       	cpi	r28, 0x14	; 20
 154:	d1 05       	cpc	r29, r1
 156:	c1 f6       	brne	.-80     	; 0x108 <pattern+0x14>
			else if(k<10)	*d = (*d<<1);		// shift the values so the 4 LEDs travel from L > R
			else if(k<13)	*d = (*d>>1)+128;   // shift back L, add 128 = Px7, so the rightmost LED lights again
			else if(k<20)	*d = (*d>>1);		// eliminate leftmost bit, shift back L until only Px1 remains lit
			
		}
}/*pattern*/
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <main>:
/*################## MAIN ROUTINE ##################*/
int main(int argc, char *argv[]){
	/* Timer Instructions */
	/* Set timer 1 to run at CPU clock, disable all function and use as pure timer */
	
	TCCR1B |=  _BV(CS10); // _BV sets the bit to logic 1, CS10 selects clock with no prescaling, f=1 MHz
 162:	e1 e8       	ldi	r30, 0x81	; 129
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
	DDRC = 0xff;		  //Sets all pins on Port C to output */
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x01;		  // Set bit 0 to high; light leftmost LED
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	88 b9       	out	0x08, r24	; 8
	while (1)
	{
		pattern(&PORTC); // run the Knightrider pattern continuously
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	bd df       	rcall	.-134    	; 0xf4 <pattern>
 17a:	fc cf       	rjmp	.-8      	; 0x174 <main+0x12>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
