
LinkedQueue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000520  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  000005ba  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007d  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000480  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000196  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000336  00000000  00000000  00000c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000180  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000248  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e2       	ldi	r30, 0x20	; 32
  ac:	f5 e0       	ldi	r31, 0x05	; 5
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 30       	cpi	r26, 0x06	; 6
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a6 e0       	ldi	r26, 0x06	; 6
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	aa 30       	cpi	r26, 0x0A	; 10
  cc:	b1 07       	cpc	r27, r17
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  d4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:
/**************************************************************************************
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
  dc:	fc 01       	movw	r30, r24
  de:	db 01       	movw	r26, r22
	*h = NULL;		/* Point the head to NOTHING (NULL) */
  e0:	11 82       	std	Z+1, r1	; 0x01
  e2:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
  e4:	1d 92       	st	X+, r1
  e6:	1c 92       	st	X, r1
	return;
}/*setup*/
  e8:	08 95       	ret

000000ea <enqueue>:
*  DESC: Accepts as input a new link by reference, and assigns the head and tail		
*  of the queue accordingly				
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	9c 01       	movw	r18, r24
  f0:	db 01       	movw	r26, r22
  f2:	fa 01       	movw	r30, r20

	if (*t != NULL){
  f4:	cd 91       	ld	r28, X+
  f6:	dc 91       	ld	r29, X
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	80 81       	ld	r24, Z
  fc:	91 81       	ldd	r25, Z+1	; 0x01
  fe:	20 97       	sbiw	r28, 0x00	; 0
 100:	19 f0       	breq	.+6      	; 0x108 <enqueue+0x1e>
		/* Not an empty queue */
		(*t)->next = *nL;
 102:	9b 83       	std	Y+3, r25	; 0x03
 104:	8a 83       	std	Y+2, r24	; 0x02
 106:	03 c0       	rjmp	.+6      	; 0x10e <enqueue+0x24>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 108:	e9 01       	movw	r28, r18
 10a:	99 83       	std	Y+1, r25	; 0x01
 10c:	88 83       	st	Y, r24
		*t = *nL;
 10e:	80 81       	ld	r24, Z
 110:	91 81       	ldd	r25, Z+1	; 0x01
 112:	8d 93       	st	X+, r24
 114:	9c 93       	st	X, r25
	}/* else */
	return;
}/*enqueue*/
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **deQueuedLink){
 11c:	dc 01       	movw	r26, r24
 11e:	fb 01       	movw	r30, r22
	/* ENTER YOUR CODE HERE */
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 120:	8d 91       	ld	r24, X+
 122:	9c 91       	ld	r25, X
 124:	11 97       	sbiw	r26, 0x01	; 1
 126:	91 83       	std	Z+1, r25	; 0x01
 128:	80 83       	st	Z, r24
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 12a:	ed 91       	ld	r30, X+
 12c:	fc 91       	ld	r31, X
 12e:	11 97       	sbiw	r26, 0x01	; 1
 130:	30 97       	sbiw	r30, 0x00	; 0
 132:	21 f0       	breq	.+8      	; 0x13c <dequeue+0x20>
		*h = (*h)->next;
 134:	82 81       	ldd	r24, Z+2	; 0x02
 136:	93 81       	ldd	r25, Z+3	; 0x03
 138:	8d 93       	st	X+, r24
 13a:	9c 93       	st	X, r25
 13c:	08 95       	ret

0000013e <firstValue>:
* DESC: Peeks at the first element in the list
* INPUT: The head pointer
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
 13e:	fc 01       	movw	r30, r24
	return((*h)->e);
 140:	01 90       	ld	r0, Z+
 142:	f0 81       	ld	r31, Z
 144:	e0 2d       	mov	r30, r0
}/*firstValue*/
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	08 95       	ret

0000014c <isEmpty>:
* DESC: Checks to see whether the queue is empty or not
* INPUT: The head pointer
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
 14c:	fc 01       	movw	r30, r24
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	89 2b       	or	r24, r25
 156:	09 f4       	brne	.+2      	; 0x15a <isEmpty+0xe>
 158:	21 e0       	ldi	r18, 0x01	; 1
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
 15a:	82 2f       	mov	r24, r18
 15c:	08 95       	ret

0000015e <size>:
* DESC: Obtains the number of links in the queue
* INPUT: The head and tail pointer
* RETURNS: An integer with the number of links in the queue
*/
/* returns the size of the queue*/
int size(link **h, link **t){
 15e:	fc 01       	movw	r30, r24
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 160:	01 90       	ld	r0, Z+
 162:	f0 81       	ld	r31, Z
 164:	e0 2d       	mov	r30, r0
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	05 c0       	rjmp	.+10     	; 0x176 <size+0x18>

	while(temp != NULL){
		numElements++;
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
		temp = temp->next;
 170:	02 80       	ldd	r0, Z+2	; 0x02
 172:	f3 81       	ldd	r31, Z+3	; 0x03
 174:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 176:	30 97       	sbiw	r30, 0x00	; 0
 178:	c9 f7       	brne	.-14     	; 0x16c <size+0xe>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
 17a:	c9 01       	movw	r24, r18
 17c:	08 95       	ret

0000017e <clearQueue>:
/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
/* This clears the queue */
void clearQueue(link **h, link **t){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ec 01       	movw	r28, r24
 188:	8b 01       	movw	r16, r22
 18a:	07 c0       	rjmp	.+14     	; 0x19a <clearQueue+0x1c>

	link *temp;

	while (*h != NULL){
		temp = *h;
		*h=(*h)->next;
 18c:	82 81       	ldd	r24, Z+2	; 0x02
 18e:	93 81       	ldd	r25, Z+3	; 0x03
 190:	99 83       	std	Y+1, r25	; 0x01
 192:	88 83       	st	Y, r24
		free(temp);
 194:	cf 01       	movw	r24, r30
 196:	0e 94 36 02 	call	0x46c	; 0x46c <free>
/* This clears the queue */
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
 19a:	e8 81       	ld	r30, Y
 19c:	f9 81       	ldd	r31, Y+1	; 0x01
 19e:	30 97       	sbiw	r30, 0x00	; 0
 1a0:	a9 f7       	brne	.-22     	; 0x18c <clearQueue+0xe>
		*h=(*h)->next;
		free(temp);
	}/*while*/
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		
 1a2:	f8 01       	movw	r30, r16
 1a4:	11 82       	std	Z+1, r1	; 0x01
 1a6:	10 82       	st	Z, r1

	return;
}/*clearQueue*/
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	8c 01       	movw	r16, r24
	//link *l;
	*newLink = malloc(sizeof(link));
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 8c 01 	call	0x318	; 0x318 <malloc>
 1c0:	fc 01       	movw	r30, r24
 1c2:	d8 01       	movw	r26, r16
 1c4:	8d 93       	st	X+, r24
 1c6:	9c 93       	st	X, r25
	(*newLink)->next = NULL;
 1c8:	13 82       	std	Z+3, r1	; 0x03
 1ca:	12 82       	std	Z+2, r1	; 0x02
	return;
}/*initLink*/
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <main>:
							/* Make sure you read it!!! */
/* global variables */
/* Avoid using these */

/* main routine */
int main(){	
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x6>
 1d8:	00 d0       	rcall	.+0      	; 0x1da <main+0x8>
 1da:	00 d0       	rcall	.+0      	; 0x1dc <main+0xa>
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	link *tail;			/* The ptr to the tail of the queue */
	link *newLink;		/* A ptr to a link aggregate data type (struct) */
	link *rtnLink;		/* same as the above */
	element eTest;		/* A variable to hold the aggregate data type known as element */

	DDRB = 0xFF; 		/* Used for debugging purposes only */
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 b9       	out	0x04, r24	; 4
				

	rtnLink = NULL;
	newLink = NULL;
 1e4:	1e 82       	std	Y+6, r1	; 0x06
 1e6:	1d 82       	std	Y+5, r1	; 0x05
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 1e8:	1a 82       	std	Y+2, r1	; 0x02
 1ea:	19 82       	std	Y+1, r1	; 0x01
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 1ec:	1c 82       	std	Y+4, r1	; 0x04
 1ee:	1b 82       	std	Y+3, r1	; 0x03
		need the MCU attached to the computer to test this, and can do most of the work using the 
		debugger in the AVR studio while observing the I/O View in the top right corner. Click the tab
		or PORTB to see how the output chages while 'stepping' through the routines.
	*/
	/* Initialize a new link here */
	initLink(&newLink);
 1f0:	ce 01       	movw	r24, r28
 1f2:	05 96       	adiw	r24, 0x05	; 5
 1f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <initLink>
	newLink->e.itemCode = 3;
 1f8:	ed 81       	ldd	r30, Y+5	; 0x05
 1fa:	fe 81       	ldd	r31, Y+6	; 0x06
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	80 83       	st	Z, r24
	newLink->e.stage = 4;
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	81 83       	std	Z+1, r24	; 0x01
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 204:	ab 81       	ldd	r26, Y+3	; 0x03
 206:	bc 81       	ldd	r27, Y+4	; 0x04
 208:	10 97       	sbiw	r26, 0x00	; 0
 20a:	29 f0       	breq	.+10     	; 0x216 <main+0x44>
		/* Not an empty queue */
		(*t)->next = *nL;
 20c:	13 96       	adiw	r26, 0x03	; 3
 20e:	fc 93       	st	X, r31
 210:	ee 93       	st	-X, r30
 212:	12 97       	sbiw	r26, 0x02	; 2
 214:	02 c0       	rjmp	.+4      	; 0x21a <main+0x48>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 216:	fa 83       	std	Y+2, r31	; 0x02
 218:	e9 83       	std	Y+1, r30	; 0x01
		*t = *nL;
 21a:	fc 83       	std	Y+4, r31	; 0x04
 21c:	eb 83       	std	Y+3, r30	; 0x03
	/* Initialize a new link here */
	initLink(&newLink);
	newLink->e.itemCode = 3;
	newLink->e.stage = 4;
	enqueue(&head, &tail, &newLink);
	PORTB = head->e.itemCode;
 21e:	e9 81       	ldd	r30, Y+1	; 0x01
 220:	fa 81       	ldd	r31, Y+2	; 0x02
 222:	80 81       	ld	r24, Z
 224:	85 b9       	out	0x05, r24	; 5
	PORTB = tail->e.stage;
 226:	eb 81       	ldd	r30, Y+3	; 0x03
 228:	fc 81       	ldd	r31, Y+4	; 0x04
 22a:	81 81       	ldd	r24, Z+1	; 0x01
 22c:	85 b9       	out	0x05, r24	; 5

	initLink(&newLink);
 22e:	ce 01       	movw	r24, r28
 230:	05 96       	adiw	r24, 0x05	; 5
 232:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <initLink>
	newLink->e.itemCode = 5;
 236:	ed 81       	ldd	r30, Y+5	; 0x05
 238:	fe 81       	ldd	r31, Y+6	; 0x06
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	80 83       	st	Z, r24
	newLink->e.stage = 6;
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	81 83       	std	Z+1, r24	; 0x01
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 242:	ab 81       	ldd	r26, Y+3	; 0x03
 244:	bc 81       	ldd	r27, Y+4	; 0x04
 246:	10 97       	sbiw	r26, 0x00	; 0
 248:	29 f0       	breq	.+10     	; 0x254 <main+0x82>
		/* Not an empty queue */
		(*t)->next = *nL;
 24a:	13 96       	adiw	r26, 0x03	; 3
 24c:	fc 93       	st	X, r31
 24e:	ee 93       	st	-X, r30
 250:	12 97       	sbiw	r26, 0x02	; 2
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x86>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 254:	fa 83       	std	Y+2, r31	; 0x02
 256:	e9 83       	std	Y+1, r30	; 0x01
		*t = *nL;
 258:	fc 83       	std	Y+4, r31	; 0x04
 25a:	eb 83       	std	Y+3, r30	; 0x03

	initLink(&newLink);
	newLink->e.itemCode = 5;
	newLink->e.stage = 6;
	enqueue(&head, &tail, &newLink);
	PORTB = head->e.itemCode;
 25c:	e9 81       	ldd	r30, Y+1	; 0x01
 25e:	fa 81       	ldd	r31, Y+2	; 0x02
 260:	80 81       	ld	r24, Z
 262:	85 b9       	out	0x05, r24	; 5
	PORTB = tail->e.stage;
 264:	eb 81       	ldd	r30, Y+3	; 0x03
 266:	fc 81       	ldd	r31, Y+4	; 0x04
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	85 b9       	out	0x05, r24	; 5

	initLink(&newLink);
 26c:	ce 01       	movw	r24, r28
 26e:	05 96       	adiw	r24, 0x05	; 5
 270:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <initLink>
	newLink->e.itemCode = 7;
 274:	ed 81       	ldd	r30, Y+5	; 0x05
 276:	fe 81       	ldd	r31, Y+6	; 0x06
 278:	87 e0       	ldi	r24, 0x07	; 7
 27a:	80 83       	st	Z, r24
	newLink->e.stage = 8;
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	81 83       	std	Z+1, r24	; 0x01
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 280:	ab 81       	ldd	r26, Y+3	; 0x03
 282:	bc 81       	ldd	r27, Y+4	; 0x04
 284:	10 97       	sbiw	r26, 0x00	; 0
 286:	29 f0       	breq	.+10     	; 0x292 <main+0xc0>
		/* Not an empty queue */
		(*t)->next = *nL;
 288:	13 96       	adiw	r26, 0x03	; 3
 28a:	fc 93       	st	X, r31
 28c:	ee 93       	st	-X, r30
 28e:	12 97       	sbiw	r26, 0x02	; 2
 290:	02 c0       	rjmp	.+4      	; 0x296 <main+0xc4>
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 292:	fa 83       	std	Y+2, r31	; 0x02
 294:	e9 83       	std	Y+1, r30	; 0x01
		*t = *nL;
 296:	fc 83       	std	Y+4, r31	; 0x04
 298:	eb 83       	std	Y+3, r30	; 0x03

	initLink(&newLink);
	newLink->e.itemCode = 7;
	newLink->e.stage = 8;
	enqueue(&head, &tail, &newLink);
	PORTB = head->e.itemCode;
 29a:	a9 81       	ldd	r26, Y+1	; 0x01
 29c:	ba 81       	ldd	r27, Y+2	; 0x02
 29e:	8c 91       	ld	r24, X
 2a0:	85 b9       	out	0x05, r24	; 5
	PORTB = tail->e.stage;
 2a2:	eb 81       	ldd	r30, Y+3	; 0x03
 2a4:	fc 81       	ldd	r31, Y+4	; 0x04
 2a6:	91 81       	ldd	r25, Z+1	; 0x01
 2a8:	95 b9       	out	0x05, r25	; 5

	PORTB = 0x00;
 2aa:	15 b8       	out	0x05, r1	; 5

	/* Tests to see if firstValue works */
	eTest = firstValue(&head);
	PORTB = eTest.itemCode;
 2ac:	85 b9       	out	0x05, r24	; 5
	PORTB = 0x00;
 2ae:	15 b8       	out	0x05, r1	; 5
 2b0:	fd 01       	movw	r30, r26
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <main+0xee>
	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
		numElements++;
 2b8:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 2ba:	02 80       	ldd	r0, Z+2	; 0x02
 2bc:	f3 81       	ldd	r31, Z+3	; 0x03
 2be:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 2c0:	30 97       	sbiw	r30, 0x00	; 0
 2c2:	d1 f7       	brne	.-12     	; 0x2b8 <main+0xe6>
	eTest = firstValue(&head);
	PORTB = eTest.itemCode;
	PORTB = 0x00;

	/* Tests if Size works */
	PORTB = size(&head, &tail);
 2c4:	85 b9       	out	0x05, r24	; 5
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	ab 2b       	or	r26, r27
 2ca:	09 f4       	brne	.+2      	; 0x2ce <main+0xfc>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
	//PORTB = rtnLink->e.itemCode;
	//dequeue(&head, &rtnLink); /* remove the item at the head of the list */
	//PORTB = rtnLink->e.itemCode;
	
	/* Tests is empty */
	PORTB = isEmpty(&head);
 2ce:	85 b9       	out	0x05, r24	; 5

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	be 01       	movw	r22, r28
 2d6:	6d 5f       	subi	r22, 0xFD	; 253
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	0e 94 bf 00 	call	0x17e	; 0x17e <clearQueue>
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
 2de:	29 81       	ldd	r18, Y+1	; 0x01
 2e0:	3a 81       	ldd	r19, Y+2	; 0x02
 2e2:	f9 01       	movw	r30, r18
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <main+0x120>

	while(temp != NULL){
		numElements++;
 2ea:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 2ec:	02 80       	ldd	r0, Z+2	; 0x02
 2ee:	f3 81       	ldd	r31, Z+3	; 0x03
 2f0:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
 2f2:	30 97       	sbiw	r30, 0x00	; 0
 2f4:	d1 f7       	brne	.-12     	; 0x2ea <main+0x118>
	/* Tests is empty */
	PORTB = isEmpty(&head);

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
	PORTB = size(&head, &tail);
 2f6:	85 b9       	out	0x05, r24	; 5
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	23 2b       	or	r18, r19
 2fc:	09 f4       	brne	.+2      	; 0x300 <main+0x12e>
 2fe:	81 e0       	ldi	r24, 0x01	; 1

	/* Tests to see if clearQueue works*/
	clearQueue(&head, &tail);
	PORTB = size(&head, &tail);

	PORTB = isEmpty(&head);
 300:	85 b9       	out	0x05, r24	; 5


	return(0);
}/* main */
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	26 96       	adiw	r28, 0x06	; 6
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
 312:	cf 91       	pop	r28
 314:	df 91       	pop	r29
 316:	08 95       	ret

00000318 <malloc>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	bc 01       	movw	r22, r24
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	91 05       	cpc	r25, r1
 322:	10 f4       	brcc	.+4      	; 0x328 <malloc+0x10>
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	a0 91 08 01 	lds	r26, 0x0108
 32c:	b0 91 09 01 	lds	r27, 0x0109
 330:	ed 01       	movw	r28, r26
 332:	e0 e0       	ldi	r30, 0x00	; 0
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	21 c0       	rjmp	.+66     	; 0x37e <malloc+0x66>
 33c:	88 81       	ld	r24, Y
 33e:	99 81       	ldd	r25, Y+1	; 0x01
 340:	86 17       	cp	r24, r22
 342:	97 07       	cpc	r25, r23
 344:	69 f4       	brne	.+26     	; 0x360 <malloc+0x48>
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	9b 81       	ldd	r25, Y+3	; 0x03
 34a:	30 97       	sbiw	r30, 0x00	; 0
 34c:	19 f0       	breq	.+6      	; 0x354 <malloc+0x3c>
 34e:	93 83       	std	Z+3, r25	; 0x03
 350:	82 83       	std	Z+2, r24	; 0x02
 352:	04 c0       	rjmp	.+8      	; 0x35c <malloc+0x44>
 354:	90 93 09 01 	sts	0x0109, r25
 358:	80 93 08 01 	sts	0x0108, r24
 35c:	fe 01       	movw	r30, r28
 35e:	34 c0       	rjmp	.+104    	; 0x3c8 <malloc+0xb0>
 360:	68 17       	cp	r22, r24
 362:	79 07       	cpc	r23, r25
 364:	38 f4       	brcc	.+14     	; 0x374 <malloc+0x5c>
 366:	41 15       	cp	r20, r1
 368:	51 05       	cpc	r21, r1
 36a:	19 f0       	breq	.+6      	; 0x372 <malloc+0x5a>
 36c:	84 17       	cp	r24, r20
 36e:	95 07       	cpc	r25, r21
 370:	08 f4       	brcc	.+2      	; 0x374 <malloc+0x5c>
 372:	ac 01       	movw	r20, r24
 374:	fe 01       	movw	r30, r28
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	9b 81       	ldd	r25, Y+3	; 0x03
 37a:	9c 01       	movw	r18, r24
 37c:	e9 01       	movw	r28, r18
 37e:	20 97       	sbiw	r28, 0x00	; 0
 380:	e9 f6       	brne	.-70     	; 0x33c <malloc+0x24>
 382:	41 15       	cp	r20, r1
 384:	51 05       	cpc	r21, r1
 386:	a9 f1       	breq	.+106    	; 0x3f2 <malloc+0xda>
 388:	ca 01       	movw	r24, r20
 38a:	86 1b       	sub	r24, r22
 38c:	97 0b       	sbc	r25, r23
 38e:	04 97       	sbiw	r24, 0x04	; 4
 390:	08 f4       	brcc	.+2      	; 0x394 <malloc+0x7c>
 392:	ba 01       	movw	r22, r20
 394:	e0 e0       	ldi	r30, 0x00	; 0
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	2a c0       	rjmp	.+84     	; 0x3ee <malloc+0xd6>
 39a:	8d 91       	ld	r24, X+
 39c:	9c 91       	ld	r25, X
 39e:	11 97       	sbiw	r26, 0x01	; 1
 3a0:	84 17       	cp	r24, r20
 3a2:	95 07       	cpc	r25, r21
 3a4:	f9 f4       	brne	.+62     	; 0x3e4 <malloc+0xcc>
 3a6:	64 17       	cp	r22, r20
 3a8:	75 07       	cpc	r23, r21
 3aa:	81 f4       	brne	.+32     	; 0x3cc <malloc+0xb4>
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	8d 91       	ld	r24, X+
 3b0:	9c 91       	ld	r25, X
 3b2:	13 97       	sbiw	r26, 0x03	; 3
 3b4:	30 97       	sbiw	r30, 0x00	; 0
 3b6:	19 f0       	breq	.+6      	; 0x3be <malloc+0xa6>
 3b8:	93 83       	std	Z+3, r25	; 0x03
 3ba:	82 83       	std	Z+2, r24	; 0x02
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <malloc+0xae>
 3be:	90 93 09 01 	sts	0x0109, r25
 3c2:	80 93 08 01 	sts	0x0108, r24
 3c6:	fd 01       	movw	r30, r26
 3c8:	32 96       	adiw	r30, 0x02	; 2
 3ca:	4c c0       	rjmp	.+152    	; 0x464 <malloc+0x14c>
 3cc:	ca 01       	movw	r24, r20
 3ce:	86 1b       	sub	r24, r22
 3d0:	97 0b       	sbc	r25, r23
 3d2:	fd 01       	movw	r30, r26
 3d4:	e8 0f       	add	r30, r24
 3d6:	f9 1f       	adc	r31, r25
 3d8:	61 93       	st	Z+, r22
 3da:	71 93       	st	Z+, r23
 3dc:	02 97       	sbiw	r24, 0x02	; 2
 3de:	8d 93       	st	X+, r24
 3e0:	9c 93       	st	X, r25
 3e2:	40 c0       	rjmp	.+128    	; 0x464 <malloc+0x14c>
 3e4:	fd 01       	movw	r30, r26
 3e6:	82 81       	ldd	r24, Z+2	; 0x02
 3e8:	93 81       	ldd	r25, Z+3	; 0x03
 3ea:	9c 01       	movw	r18, r24
 3ec:	d9 01       	movw	r26, r18
 3ee:	10 97       	sbiw	r26, 0x00	; 0
 3f0:	a1 f6       	brne	.-88     	; 0x39a <malloc+0x82>
 3f2:	80 91 06 01 	lds	r24, 0x0106
 3f6:	90 91 07 01 	lds	r25, 0x0107
 3fa:	89 2b       	or	r24, r25
 3fc:	41 f4       	brne	.+16     	; 0x40e <malloc+0xf6>
 3fe:	80 91 02 01 	lds	r24, 0x0102
 402:	90 91 03 01 	lds	r25, 0x0103
 406:	90 93 07 01 	sts	0x0107, r25
 40a:	80 93 06 01 	sts	0x0106, r24
 40e:	40 91 04 01 	lds	r20, 0x0104
 412:	50 91 05 01 	lds	r21, 0x0105
 416:	41 15       	cp	r20, r1
 418:	51 05       	cpc	r21, r1
 41a:	41 f4       	brne	.+16     	; 0x42c <malloc+0x114>
 41c:	4d b7       	in	r20, 0x3d	; 61
 41e:	5e b7       	in	r21, 0x3e	; 62
 420:	80 91 00 01 	lds	r24, 0x0100
 424:	90 91 01 01 	lds	r25, 0x0101
 428:	48 1b       	sub	r20, r24
 42a:	59 0b       	sbc	r21, r25
 42c:	20 91 06 01 	lds	r18, 0x0106
 430:	30 91 07 01 	lds	r19, 0x0107
 434:	ca 01       	movw	r24, r20
 436:	82 1b       	sub	r24, r18
 438:	93 0b       	sbc	r25, r19
 43a:	86 17       	cp	r24, r22
 43c:	97 07       	cpc	r25, r23
 43e:	80 f0       	brcs	.+32     	; 0x460 <malloc+0x148>
 440:	ab 01       	movw	r20, r22
 442:	4e 5f       	subi	r20, 0xFE	; 254
 444:	5f 4f       	sbci	r21, 0xFF	; 255
 446:	84 17       	cp	r24, r20
 448:	95 07       	cpc	r25, r21
 44a:	50 f0       	brcs	.+20     	; 0x460 <malloc+0x148>
 44c:	42 0f       	add	r20, r18
 44e:	53 1f       	adc	r21, r19
 450:	50 93 07 01 	sts	0x0107, r21
 454:	40 93 06 01 	sts	0x0106, r20
 458:	f9 01       	movw	r30, r18
 45a:	61 93       	st	Z+, r22
 45c:	71 93       	st	Z+, r23
 45e:	02 c0       	rjmp	.+4      	; 0x464 <malloc+0x14c>
 460:	e0 e0       	ldi	r30, 0x00	; 0
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	cf 01       	movw	r24, r30
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <free>:
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	09 f4       	brne	.+2      	; 0x476 <free+0xa>
 474:	50 c0       	rjmp	.+160    	; 0x516 <free+0xaa>
 476:	ec 01       	movw	r28, r24
 478:	22 97       	sbiw	r28, 0x02	; 2
 47a:	1b 82       	std	Y+3, r1	; 0x03
 47c:	1a 82       	std	Y+2, r1	; 0x02
 47e:	a0 91 08 01 	lds	r26, 0x0108
 482:	b0 91 09 01 	lds	r27, 0x0109
 486:	10 97       	sbiw	r26, 0x00	; 0
 488:	09 f1       	breq	.+66     	; 0x4cc <free+0x60>
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	ac 17       	cp	r26, r28
 490:	bd 07       	cpc	r27, r29
 492:	08 f1       	brcs	.+66     	; 0x4d6 <free+0x6a>
 494:	bb 83       	std	Y+3, r27	; 0x03
 496:	aa 83       	std	Y+2, r26	; 0x02
 498:	fe 01       	movw	r30, r28
 49a:	21 91       	ld	r18, Z+
 49c:	31 91       	ld	r19, Z+
 49e:	e2 0f       	add	r30, r18
 4a0:	f3 1f       	adc	r31, r19
 4a2:	ae 17       	cp	r26, r30
 4a4:	bf 07       	cpc	r27, r31
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <free+0x5a>
 4a8:	8d 91       	ld	r24, X+
 4aa:	9c 91       	ld	r25, X
 4ac:	11 97       	sbiw	r26, 0x01	; 1
 4ae:	28 0f       	add	r18, r24
 4b0:	39 1f       	adc	r19, r25
 4b2:	2e 5f       	subi	r18, 0xFE	; 254
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	39 83       	std	Y+1, r19	; 0x01
 4b8:	28 83       	st	Y, r18
 4ba:	12 96       	adiw	r26, 0x02	; 2
 4bc:	8d 91       	ld	r24, X+
 4be:	9c 91       	ld	r25, X
 4c0:	13 97       	sbiw	r26, 0x03	; 3
 4c2:	9b 83       	std	Y+3, r25	; 0x03
 4c4:	8a 83       	std	Y+2, r24	; 0x02
 4c6:	41 15       	cp	r20, r1
 4c8:	51 05       	cpc	r21, r1
 4ca:	71 f4       	brne	.+28     	; 0x4e8 <free+0x7c>
 4cc:	d0 93 09 01 	sts	0x0109, r29
 4d0:	c0 93 08 01 	sts	0x0108, r28
 4d4:	20 c0       	rjmp	.+64     	; 0x516 <free+0xaa>
 4d6:	12 96       	adiw	r26, 0x02	; 2
 4d8:	8d 91       	ld	r24, X+
 4da:	9c 91       	ld	r25, X
 4dc:	13 97       	sbiw	r26, 0x03	; 3
 4de:	ad 01       	movw	r20, r26
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <free+0x7c>
 4e4:	dc 01       	movw	r26, r24
 4e6:	d3 cf       	rjmp	.-90     	; 0x48e <free+0x22>
 4e8:	fa 01       	movw	r30, r20
 4ea:	d3 83       	std	Z+3, r29	; 0x03
 4ec:	c2 83       	std	Z+2, r28	; 0x02
 4ee:	21 91       	ld	r18, Z+
 4f0:	31 91       	ld	r19, Z+
 4f2:	e2 0f       	add	r30, r18
 4f4:	f3 1f       	adc	r31, r19
 4f6:	ce 17       	cp	r28, r30
 4f8:	df 07       	cpc	r29, r31
 4fa:	69 f4       	brne	.+26     	; 0x516 <free+0xaa>
 4fc:	88 81       	ld	r24, Y
 4fe:	99 81       	ldd	r25, Y+1	; 0x01
 500:	28 0f       	add	r18, r24
 502:	39 1f       	adc	r19, r25
 504:	2e 5f       	subi	r18, 0xFE	; 254
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	fa 01       	movw	r30, r20
 50a:	31 83       	std	Z+1, r19	; 0x01
 50c:	20 83       	st	Z, r18
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	9b 81       	ldd	r25, Y+3	; 0x03
 512:	93 83       	std	Z+3, r25	; 0x03
 514:	82 83       	std	Z+2, r24	; 0x02
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
