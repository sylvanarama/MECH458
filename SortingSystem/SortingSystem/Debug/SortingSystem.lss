
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000978  00000a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800116  00800116  00000a22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001adf  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9c  00000000  00000000  000026db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc8  00000000  00000000  00003577  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000976  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfc  00000000  00000000  00004fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__vector_1>
   6:	00 00       	nop
   8:	c2 c0       	rjmp	.+388    	; 0x18e <__vector_2>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__vector_3>
   e:	00 00       	nop
  10:	e6 c0       	rjmp	.+460    	; 0x1de <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	c3 c0       	rjmp	.+390    	; 0x1fc <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 e7       	ldi	r30, 0x78	; 120
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 31       	cpi	r26, 0x16	; 22
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a6 e1       	ldi	r26, 0x16	; 22
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a2 36       	cpi	r26, 0x62	; 98
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	e5 d2       	rcall	.+1482   	; 0x69a <main>
  d0:	51 c4       	rjmp	.+2210   	; 0x974 <_exit>

000000d2 <__bad_interrupt>:
  d2:	de c0       	rjmp	.+444    	; 0x290 <__vector_default>

000000d4 <initItem>:
/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
item* initItem(){
	item* newItem = malloc(sizeof(item));
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2c d3       	rcall	.+1624   	; 0x732 <malloc>
  da:	fc 01       	movw	r30, r24
	newItem->next = NULL;
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
	newItem->metal = 0;
  e0:	10 82       	st	Z, r1
	newItem->reflective = 0;
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
	newItem->type = 0;
  e6:	13 82       	std	Z+3, r1	; 0x03
	newItem->stage = 0;
  e8:	14 82       	std	Z+4, r1	; 0x04
	newItem->number = 0;
  ea:	15 82       	std	Z+5, r1	; 0x05
	return newItem;
}//initLink
  ec:	08 95       	ret

000000ee <initQueue>:

queue* initQueue(){
	queue* q = malloc(sizeof(queue));
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	1f d3       	rcall	.+1598   	; 0x732 <malloc>
	q->head = NULL;	
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
	q->tail = NULL;	
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
	return q;
}//initQueue
  fe:	08 95       	ret

00000100 <enqueue>:

/****************************************************************************************
*  DESC: Accepts as input a new link by reference, and assigns the head and tail		
*  of the queue accordingly (Will put an item at the tail of the queue)		
*/
void enqueue(queue* q, item* newItem){
 100:	fc 01       	movw	r30, r24
	if (q->tail != NULL){
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
		/* Not an empty queue */
		q->tail->next = newItem;
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
		q->tail = newItem;
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		q->head = newItem;
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
		q->tail = newItem;
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:

/**************************************************************************************
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* RETURNS: Pointer to the dequeued link
*/
item* dequeue(queue* q){
 122:	dc 01       	movw	r26, r24
	item* deQueuedItem = q->head;	// Will set to NULL if Head points to NULL
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
	/* Ensure it is not an empty queue */
	if (q->head != NULL){
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	39 f0       	breq	.+14     	; 0x13c <dequeue+0x1a>
		q->head = q->head->next;
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
	}/*if*/
	if(q->head == NULL) q->tail = NULL; // if that was the last element in the queue, set tail to NULL as well
 138:	89 2b       	or	r24, r25
 13a:	21 f4       	brne	.+8      	; 0x144 <dequeue+0x22>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
	return deQueuedItem;
}/*dequeue*/
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <__vector_21>:
		mTimer(7000);
		
		//update_motor_speed(MOTOR_SPEED);
		init_motor();
	}
}//ADC_calibrate
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_17>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_1>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <OS1_flag>
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_2>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <FER_flag>
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_3>:
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <OS2_flag>
 1be:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 1c2:	88 23       	and	r24, r24
 1c4:	19 f0       	breq	.+6      	; 0x1cc <__vector_3+0x20>
 1c6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <reflective_present>
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <__vector_3+0x26>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <reflective_present>
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_4>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <OS3_flag>
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_29>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 21a:	88 23       	and	r24, r24
 21c:	61 f1       	breq	.+88     	; 0x276 <__vector_29+0x7a>
 21e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 228:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 22c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_result>
 230:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_result+0x1>
 234:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 238:	98 2f       	mov	r25, r24
 23a:	88 27       	eor	r24, r24
 23c:	82 2b       	or	r24, r18
 23e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 242:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 246:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ADC_result>
 24a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ADC_result+0x1>
 24e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ADC_lowest_val>
 252:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <ADC_lowest_val+0x1>
 256:	28 17       	cp	r18, r24
 258:	39 07       	cpc	r19, r25
 25a:	40 f4       	brcc	.+16     	; 0x26c <__vector_29+0x70>
 25c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_result>
 260:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_result+0x1>
 264:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 268:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
 26c:	ea e7       	ldi	r30, 0x7A	; 122
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_default>:
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <init_interrupts>:
 2a4:	8a e9       	ldi	r24, 0x9A	; 154
 2a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2aa:	8d b3       	in	r24, 0x1d	; 29
 2ac:	8f 60       	ori	r24, 0x0F	; 15
 2ae:	8d bb       	out	0x1d, r24	; 29
 2b0:	08 95       	ret

000002b2 <init_timer0_pwm>:
 2b2:	84 b5       	in	r24, 0x24	; 36
 2b4:	83 68       	ori	r24, 0x83	; 131
 2b6:	84 bd       	out	0x24, r24	; 36
 2b8:	85 b5       	in	r24, 0x25	; 37
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	85 bd       	out	0x25, r24	; 37
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	87 bd       	out	0x27, r24	; 39
 2c2:	08 95       	ret

000002c4 <init_motor>:
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	85 b9       	out	0x05, r24	; 5
 2c8:	80 e7       	ldi	r24, 0x70	; 112
 2ca:	87 bd       	out	0x27, r24	; 39
 2cc:	08 95       	ret

000002ce <init_ADC>:
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 2d6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 2da:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 2de:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
 2e2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <reflective_present>
 2e6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <item_ready>
 2ea:	ec e7       	ldi	r30, 0x7C	; 124
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	80 83       	st	Z, r24
 2f4:	ea e7       	ldi	r30, 0x7A	; 122
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	80 83       	st	Z, r24
 2fe:	80 81       	ld	r24, Z
 300:	81 60       	ori	r24, 0x01	; 1
 302:	80 83       	st	Z, r24
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
 30a:	80 81       	ld	r24, Z
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 83       	st	Z, r24
 310:	08 95       	ret

00000312 <init_stepper>:
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	81 b9       	out	0x01, r24	; 1
 316:	85 e3       	ldi	r24, 0x35	; 53
 318:	82 b9       	out	0x02, r24	; 2
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <motor_position+0x1>
 322:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <motor_position>
 326:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <stepper_on+0x1>
 32a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <stepper_on>
 32e:	08 95       	ret

00000330 <mTimer>:
 330:	ac 01       	movw	r20, r24
 332:	e1 e8       	ldi	r30, 0x81	; 129
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	90 81       	ld	r25, Z
 338:	91 60       	ori	r25, 0x01	; 1
 33a:	90 83       	st	Z, r25
 33c:	90 81       	ld	r25, Z
 33e:	98 60       	ori	r25, 0x08	; 8
 340:	90 83       	st	Z, r25
 342:	88 ee       	ldi	r24, 0xE8	; 232
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 34a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 34e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 352:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 356:	b1 9a       	sbi	0x16, 1	; 22
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	05 c0       	rjmp	.+10     	; 0x368 <mTimer+0x38>
 35e:	b1 9b       	sbis	0x16, 1	; 22
 360:	fe cf       	rjmp	.-4      	; 0x35e <mTimer+0x2e>
 362:	b1 9a       	sbi	0x16, 1	; 22
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	24 17       	cp	r18, r20
 36a:	35 07       	cpc	r19, r21
 36c:	1c f4       	brge	.+6      	; 0x374 <mTimer+0x44>
 36e:	b1 9b       	sbis	0x16, 1	; 22
 370:	f6 cf       	rjmp	.-20     	; 0x35e <mTimer+0x2e>
 372:	f7 cf       	rjmp	.-18     	; 0x362 <mTimer+0x32>
 374:	08 95       	ret

00000376 <stepper_rotate>:
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	18 16       	cp	r1, r24
 388:	19 06       	cpc	r1, r25
 38a:	0c f0       	brlt	.+2      	; 0x38e <stepper_rotate+0x18>
 38c:	61 c0       	rjmp	.+194    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 38e:	6b 01       	movw	r12, r22
 390:	8c 01       	movw	r16, r24
 392:	c0 e0       	ldi	r28, 0x00	; 0
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	0f 2e       	mov	r0, r31
 398:	fa e0       	ldi	r31, 0x0A	; 10
 39a:	ef 2e       	mov	r14, r31
 39c:	f1 2c       	mov	r15, r1
 39e:	f0 2d       	mov	r31, r0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	c8 16       	cp	r12, r24
 3a4:	d1 04       	cpc	r13, r1
 3a6:	d1 f4       	brne	.+52     	; 0x3dc <stepper_rotate+0x66>
 3a8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 3ac:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 3b0:	e6 5f       	subi	r30, 0xF6	; 246
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3bc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	83 70       	andi	r24, 0x03	; 3
 3c4:	90 78       	andi	r25, 0x80	; 128
 3c6:	99 23       	and	r25, r25
 3c8:	24 f4       	brge	.+8      	; 0x3d2 <stepper_rotate+0x5c>
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	8c 6f       	ori	r24, 0xFC	; 252
 3ce:	9f 6f       	ori	r25, 0xFF	; 255
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 3d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 3da:	1d c0       	rjmp	.+58     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	c8 16       	cp	r12, r24
 3e0:	d8 06       	cpc	r13, r24
 3e2:	c9 f4       	brne	.+50     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 3e8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 3ec:	ea 5f       	subi	r30, 0xFA	; 250
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	80 81       	ld	r24, Z
 3f2:	82 b9       	out	0x02, r24	; 2
 3f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3f8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	83 70       	andi	r24, 0x03	; 3
 400:	90 78       	andi	r25, 0x80	; 128
 402:	99 23       	and	r25, r25
 404:	24 f4       	brge	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	8c 6f       	ori	r24, 0xFC	; 252
 40a:	9f 6f       	ori	r25, 0xFF	; 255
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 412:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 416:	c7 01       	movw	r24, r14
 418:	8b df       	rcall	.-234    	; 0x330 <mTimer>
 41a:	c4 30       	cpi	r28, 0x04	; 4
 41c:	d1 05       	cpc	r29, r1
 41e:	3c f4       	brge	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	e8 16       	cp	r14, r24
 424:	f1 04       	cpc	r15, r1
 426:	1c f0       	brlt	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	e8 1a       	sub	r14, r24
 42c:	f1 08       	sbc	r15, r1
 42e:	c8 01       	movw	r24, r16
 430:	8c 1b       	sub	r24, r28
 432:	9d 0b       	sbc	r25, r29
 434:	05 97       	sbiw	r24, 0x05	; 5
 436:	3c f4       	brge	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 438:	8b e0       	ldi	r24, 0x0B	; 11
 43a:	e8 16       	cp	r14, r24
 43c:	f1 04       	cpc	r15, r1
 43e:	1c f4       	brge	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	e8 1a       	sub	r14, r24
 444:	f8 0a       	sbc	r15, r24
 446:	21 96       	adiw	r28, 0x01	; 1
 448:	0c 17       	cp	r16, r28
 44a:	1d 07       	cpc	r17, r29
 44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	a8 cf       	rjmp	.-176    	; 0x3a0 <stepper_rotate+0x2a>
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	08 95       	ret

00000462 <stepper_position>:
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	15 b8       	out	0x05, r1	; 5
 468:	c8 2f       	mov	r28, r24
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <motor_position>
 470:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <motor_position+0x1>
 474:	9e 01       	movw	r18, r28
 476:	28 1b       	sub	r18, r24
 478:	39 0b       	sbc	r19, r25
 47a:	21 30       	cpi	r18, 0x01	; 1
 47c:	31 05       	cpc	r19, r1
 47e:	21 f0       	breq	.+8      	; 0x488 <stepper_position+0x26>
 480:	2d 3f       	cpi	r18, 0xFD	; 253
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	38 07       	cpc	r19, r24
 486:	31 f4       	brne	.+12     	; 0x494 <stepper_position+0x32>
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	82 e3       	ldi	r24, 0x32	; 50
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	72 df       	rcall	.-284    	; 0x376 <stepper_rotate>
 492:	18 c0       	rjmp	.+48     	; 0x4c4 <stepper_position+0x62>
 494:	2f 3f       	cpi	r18, 0xFF	; 255
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	38 07       	cpc	r19, r24
 49a:	19 f0       	breq	.+6      	; 0x4a2 <stepper_position+0x40>
 49c:	23 30       	cpi	r18, 0x03	; 3
 49e:	31 05       	cpc	r19, r1
 4a0:	31 f4       	brne	.+12     	; 0x4ae <stepper_position+0x4c>
 4a2:	6f ef       	ldi	r22, 0xFF	; 255
 4a4:	7f ef       	ldi	r23, 0xFF	; 255
 4a6:	82 e3       	ldi	r24, 0x32	; 50
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	65 df       	rcall	.-310    	; 0x376 <stepper_rotate>
 4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <stepper_position+0x62>
 4ae:	22 30       	cpi	r18, 0x02	; 2
 4b0:	31 05       	cpc	r19, r1
 4b2:	19 f0       	breq	.+6      	; 0x4ba <stepper_position+0x58>
 4b4:	2e 3f       	cpi	r18, 0xFE	; 254
 4b6:	3f 4f       	sbci	r19, 0xFF	; 255
 4b8:	29 f4       	brne	.+10     	; 0x4c4 <stepper_position+0x62>
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	84 e6       	ldi	r24, 0x64	; 100
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	59 df       	rcall	.-334    	; 0x376 <stepper_rotate>
 4c4:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <motor_position+0x1>
 4c8:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <motor_position>
 4cc:	fb de       	rcall	.-522    	; 0x2c4 <init_motor>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <entry_sensor>:

void entry_sensor()
{
	PORTC = 0x10;
 4d4:	80 e1       	ldi	r24, 0x10	; 16
 4d6:	88 b9       	out	0x08, r24	; 8
	OS1_flag = 0;
 4d8:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <OS1_flag>
	// To keep track of how many items have been added
	item_number++;
 4dc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <item_number>
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <item_number>
	//Add a new item to the queue
	item* newItem = initItem();
	newItem->number = item_number;
 4e6:	f6 dd       	rcall	.-1044   	; 0xd4 <initItem>
 4e8:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <item_number>
 4ec:	fc 01       	movw	r30, r24
	newItem->stage = 1;
 4ee:	25 83       	std	Z+5, r18	; 0x05
 4f0:	21 e0       	ldi	r18, 0x01	; 1
	enqueue(entryList, newItem);
 4f2:	24 83       	std	Z+4, r18	; 0x04
 4f4:	bc 01       	movw	r22, r24
 4f6:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <entryList>
 4fa:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <entryList+0x1>
 4fe:	00 ce       	rjmp	.-1024   	; 0x100 <enqueue>
 500:	08 95       	ret

00000502 <metal_sensor>:
	//PORTC = entryList->tail->number;
}

void metal_sensor(){
	//If this interrupt fires, then the object is metal
	FER_flag = 0;
 502:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <FER_flag>
	entryList->tail->metal = 1;
 506:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <entryList>
 50a:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <entryList+0x1>
 50e:	02 80       	ldd	r0, Z+2	; 0x02
 510:	f3 81       	ldd	r31, Z+3	; 0x03
 512:	e0 2d       	mov	r30, r0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	80 83       	st	Z, r24
	PORTC |= 0x20;
 518:	45 9a       	sbi	0x08, 5	; 8
 51a:	08 95       	ret

0000051c <reflective_sensor>:
}

void reflective_sensor(){
	OS2_flag = 0;
 51c:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <OS2_flag>
	PORTC |= 0x40;
 520:	46 9a       	sbi	0x08, 6	; 8
	//object entering reflective sensor zone, start ADC conversion
	if(reflective_present)
 522:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 526:	88 23       	and	r24, r24
 528:	31 f0       	breq	.+12     	; 0x536 <reflective_sensor+0x1a>
	{
		ADCSRA |= _BV(ADSC);
 52a:	ea e7       	ldi	r30, 0x7A	; 122
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	80 64       	ori	r24, 0x40	; 64
 532:	80 83       	st	Z, r24
 534:	08 95       	ret
	}
	// object exiting the reflective sensor zone, item ready to be classified
	else
	{
		if(STATE == OPERATIONAL)
 536:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <STATE>
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	d1 f4       	brne	.+52     	; 0x572 <reflective_sensor+0x56>
		{
			item* reflective_sensor_item = dequeue(entryList);
 53e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <entryList>
 542:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <entryList+0x1>
 546:	ed dd       	rcall	.-1062   	; 0x122 <dequeue>
				mTimer(2000);
				PORTC = entryList->head->number;
				mTimer(2000);
			}
			*/
			reflective_sensor_item->reflective = ADC_lowest_val;
 548:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <ADC_lowest_val>
 54c:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <ADC_lowest_val+0x1>
 550:	fc 01       	movw	r30, r24
 552:	32 83       	std	Z+2, r19	; 0x02
 554:	21 83       	std	Z+1, r18	; 0x01
			reflective_sensor_item->stage = 2;	
 556:	22 e0       	ldi	r18, 0x02	; 2
 558:	24 83       	std	Z+4, r18	; 0x04
			enqueue(reflectiveList, reflective_sensor_item);
 55a:	bc 01       	movw	r22, r24
 55c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <reflectiveList>
 560:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <reflectiveList+0x1>
 564:	cd dd       	rcall	.-1126   	; 0x100 <enqueue>
			ADC_lowest_val = 0x3FF;
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	93 e0       	ldi	r25, 0x03	; 3
 56a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 56e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
		}
		item_ready = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <item_ready>
 578:	08 95       	ret

0000057a <classify_item>:
	}
}

void classify_item(){
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
	item_ready = 0;
 57e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <item_ready>
	item* item_to_classify = dequeue(reflectiveList);
 582:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <reflectiveList>
 586:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <reflectiveList+0x1>
 58a:	cb dd       	rcall	.-1130   	; 0x122 <dequeue>
 58c:	ec 01       	movw	r28, r24
	uint16_t r = item_to_classify->reflective;
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	9a 81       	ldd	r25, Y+2	; 0x02
	uint8_t m = item_to_classify->metal;
 592:	28 81       	ld	r18, Y
	uint16_t diff_white;
	uint16_t diff_black;
	uint16_t diff_steel;
	uint16_t diff_aluminum;

	if(m == 0)
 594:	21 11       	cpse	r18, r1
 596:	2c c0       	rjmp	.+88     	; 0x5f0 <classify_item+0x76>
	{
		diff_white = abs(calibration_vals[WHITE] - r);
 598:	ee e0       	ldi	r30, 0x0E	; 14
 59a:	f1 e0       	ldi	r31, 0x01	; 1
 59c:	40 81       	ld	r20, Z
 59e:	51 81       	ldd	r21, Z+1	; 0x01
		diff_black = abs(calibration_vals[BLACK] - r);
 5a0:	24 81       	ldd	r18, Z+4	; 0x04
 5a2:	35 81       	ldd	r19, Z+5	; 0x05
		if(diff_white < diff_black) 
 5a4:	48 1b       	sub	r20, r24
 5a6:	59 0b       	sbc	r21, r25
 5a8:	ba 01       	movw	r22, r20
 5aa:	22 f4       	brpl	.+8      	; 0x5b4 <classify_item+0x3a>
 5ac:	66 27       	eor	r22, r22
 5ae:	77 27       	eor	r23, r23
 5b0:	64 1b       	sub	r22, r20
 5b2:	75 0b       	sbc	r23, r21
 5b4:	a9 01       	movw	r20, r18
 5b6:	48 1b       	sub	r20, r24
 5b8:	59 0b       	sbc	r21, r25
 5ba:	9a 01       	movw	r18, r20
 5bc:	22 f4       	brpl	.+8      	; 0x5c6 <classify_item+0x4c>
 5be:	22 27       	eor	r18, r18
 5c0:	33 27       	eor	r19, r19
 5c2:	24 1b       	sub	r18, r20
 5c4:	35 0b       	sbc	r19, r21
 5c6:	62 17       	cp	r22, r18
 5c8:	73 07       	cpc	r23, r19
 5ca:	48 f4       	brcc	.+18     	; 0x5de <classify_item+0x64>
		{
			type = WHITE;
			sorted_items_array[WHITE]++;
 5cc:	e8 e1       	ldi	r30, 0x18	; 24
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	80 81       	ld	r24, Z
 5d2:	91 81       	ldd	r25, Z+1	; 0x01
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	91 83       	std	Z+1, r25	; 0x01
 5d8:	80 83       	st	Z, r24
	{
		diff_white = abs(calibration_vals[WHITE] - r);
		diff_black = abs(calibration_vals[BLACK] - r);
		if(diff_white < diff_black) 
		{
			type = WHITE;
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	38 c0       	rjmp	.+112    	; 0x64e <classify_item+0xd4>
			sorted_items_array[WHITE]++;
		}
		else 
		{
			type = BLACK;
			sorted_items_array[BLACK]++;
 5de:	e8 e1       	ldi	r30, 0x18	; 24
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
 5e2:	84 81       	ldd	r24, Z+4	; 0x04
 5e4:	95 81       	ldd	r25, Z+5	; 0x05
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	95 83       	std	Z+5, r25	; 0x05
 5ea:	84 83       	std	Z+4, r24	; 0x04
			type = WHITE;
			sorted_items_array[WHITE]++;
		}
		else 
		{
			type = BLACK;
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	2f c0       	rjmp	.+94     	; 0x64e <classify_item+0xd4>
			sorted_items_array[BLACK]++;
		}
	}
	
	if(m == 1)
 5f0:	21 30       	cpi	r18, 0x01	; 1
 5f2:	61 f5       	brne	.+88     	; 0x64c <classify_item+0xd2>
	{
		diff_aluminum = abs(calibration_vals[ALUMINUM] - r);
 5f4:	ee e0       	ldi	r30, 0x0E	; 14
 5f6:	f1 e0       	ldi	r31, 0x01	; 1
 5f8:	46 81       	ldd	r20, Z+6	; 0x06
 5fa:	57 81       	ldd	r21, Z+7	; 0x07
		diff_steel = abs(calibration_vals[STEEL] - r);
 5fc:	22 81       	ldd	r18, Z+2	; 0x02
 5fe:	33 81       	ldd	r19, Z+3	; 0x03
		if(diff_aluminum < diff_steel) 
 600:	48 1b       	sub	r20, r24
 602:	59 0b       	sbc	r21, r25
 604:	ba 01       	movw	r22, r20
 606:	22 f4       	brpl	.+8      	; 0x610 <classify_item+0x96>
 608:	66 27       	eor	r22, r22
 60a:	77 27       	eor	r23, r23
 60c:	64 1b       	sub	r22, r20
 60e:	75 0b       	sbc	r23, r21
 610:	a9 01       	movw	r20, r18
 612:	48 1b       	sub	r20, r24
 614:	59 0b       	sbc	r21, r25
 616:	9a 01       	movw	r18, r20
 618:	22 f4       	brpl	.+8      	; 0x622 <classify_item+0xa8>
 61a:	22 27       	eor	r18, r18
 61c:	33 27       	eor	r19, r19
 61e:	24 1b       	sub	r18, r20
 620:	35 0b       	sbc	r19, r21
 622:	62 17       	cp	r22, r18
 624:	73 07       	cpc	r23, r19
 626:	48 f4       	brcc	.+18     	; 0x63a <classify_item+0xc0>
		{
			type = ALUMINUM;
			sorted_items_array[ALUMINUM]++;
 628:	e8 e1       	ldi	r30, 0x18	; 24
 62a:	f1 e0       	ldi	r31, 0x01	; 1
 62c:	86 81       	ldd	r24, Z+6	; 0x06
 62e:	97 81       	ldd	r25, Z+7	; 0x07
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	97 83       	std	Z+7, r25	; 0x07
 634:	86 83       	std	Z+6, r24	; 0x06
	{
		diff_aluminum = abs(calibration_vals[ALUMINUM] - r);
		diff_steel = abs(calibration_vals[STEEL] - r);
		if(diff_aluminum < diff_steel) 
		{
			type = ALUMINUM;
 636:	83 e0       	ldi	r24, 0x03	; 3
 638:	0a c0       	rjmp	.+20     	; 0x64e <classify_item+0xd4>
			sorted_items_array[ALUMINUM]++;
		}
		else 
		{
			type = STEEL;
			sorted_items_array[STEEL]++;
 63a:	e8 e1       	ldi	r30, 0x18	; 24
 63c:	f1 e0       	ldi	r31, 0x01	; 1
 63e:	82 81       	ldd	r24, Z+2	; 0x02
 640:	93 81       	ldd	r25, Z+3	; 0x03
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	93 83       	std	Z+3, r25	; 0x03
 646:	82 83       	std	Z+2, r24	; 0x02
			type = ALUMINUM;
			sorted_items_array[ALUMINUM]++;
		}
		else 
		{
			type = STEEL;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	01 c0       	rjmp	.+2      	; 0x64e <classify_item+0xd4>
void classify_item(){
	item_ready = 0;
	item* item_to_classify = dequeue(reflectiveList);
	uint16_t r = item_to_classify->reflective;
	uint8_t m = item_to_classify->metal;
	uint8_t type = 0;
 64c:	80 e0       	ldi	r24, 0x00	; 0
		{
			type = STEEL;
			sorted_items_array[STEEL]++;
		}
	}
	item_to_classify->type = type;
 64e:	8b 83       	std	Y+3, r24	; 0x03
	item_to_classify->stage = 3;
 650:	83 e0       	ldi	r24, 0x03	; 3
 652:	8c 83       	std	Y+4, r24	; 0x04
	
	sorted_items_array[TOTAL]++;
 654:	e8 e1       	ldi	r30, 0x18	; 24
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	80 85       	ldd	r24, Z+8	; 0x08
 65a:	91 85       	ldd	r25, Z+9	; 0x09
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	91 87       	std	Z+9, r25	; 0x09
 660:	80 87       	std	Z+8, r24	; 0x08
	enqueue(classifiedList, item_to_classify);
 662:	be 01       	movw	r22, r28
 664:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <classifiedList>
 668:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <classifiedList+0x1>
 66c:	49 dd       	rcall	.-1390   	; 0x100 <enqueue>
	
	//TESTING
	PORTC |= item_to_classify->type;
 66e:	98 b1       	in	r25, 0x08	; 8
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	89 2b       	or	r24, r25
 674:	88 b9       	out	0x08, r24	; 8
	
}//classify_item
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <exit_sensor>:

void exit_sensor(){
	OS3_flag = 0;
 67c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <OS3_flag>
	// Show sensor triggered
	PORTC |= 0x80;
 680:	47 9a       	sbi	0x08, 7	; 8
	// Move item to sorted queue
	enqueue(sortedList, dequeue(classifiedList));
 682:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <classifiedList>
 686:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <classifiedList+0x1>
 68a:	4b dd       	rcall	.-1386   	; 0x122 <dequeue>
 68c:	bc 01       	movw	r22, r24
 68e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sortedList>
 692:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sortedList+0x1>
 696:	34 cd       	rjmp	.-1432   	; 0x100 <enqueue>
 698:	08 95       	ret

0000069a <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 69a:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 69c:	8f e8       	ldi	r24, 0x8F	; 143
 69e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 6a4:	80 ef       	ldi	r24, 0xF0	; 240
 6a6:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 6a8:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 6aa:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 6ac:	18 b8       	out	0x08, r1	; 8
	
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
 6ae:	f8 94       	cli
 6b0:	0e de       	rcall	.-996    	; 0x2ce <init_ADC>
 6b2:	ff dd       	rcall	.-1026   	; 0x2b2 <init_timer0_pwm>
 6b4:	07 de       	rcall	.-1010   	; 0x2c4 <init_motor>
 6b6:	f6 dd       	rcall	.-1044   	; 0x2a4 <init_interrupts>
 6b8:	2c de       	rcall	.-936    	; 0x312 <init_stepper>
 6ba:	78 94       	sei
 6bc:	18 dd       	rcall	.-1488   	; 0xee <initQueue>
 6be:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <entryList+0x1>
 6c2:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <entryList>
 6c6:	13 dd       	rcall	.-1498   	; 0xee <initQueue>
 6c8:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <reflectiveList+0x1>
 6cc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <reflectiveList>
 6d0:	0e dd       	rcall	.-1508   	; 0xee <initQueue>
 6d2:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <classifiedList+0x1>
 6d6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <classifiedList>
 6da:	09 dd       	rcall	.-1518   	; 0xee <initQueue>
 6dc:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sortedList+0x1>
 6e0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sortedList>
 6e4:	82 e0       	ldi	r24, 0x02	; 2
 6e6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <STATE>
 6ea:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <item_waiting>
 6ee:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <item_number>
 6f2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <OS1_flag>
 6f6:	81 11       	cpse	r24, r1
 6f8:	ed de       	rcall	.-550    	; 0x4d4 <entry_sensor>
 6fa:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <FER_flag>
 6fe:	81 11       	cpse	r24, r1
 700:	00 df       	rcall	.-512    	; 0x502 <metal_sensor>
 702:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <OS2_flag>
 706:	81 11       	cpse	r24, r1
 708:	09 df       	rcall	.-494    	; 0x51c <reflective_sensor>
 70a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <item_ready>
 70e:	81 11       	cpse	r24, r1
 710:	34 df       	rcall	.-408    	; 0x57a <classify_item>
 712:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <OS3_flag>
 716:	88 23       	and	r24, r24
 718:	61 f3       	breq	.-40     	; 0x6f2 <main+0x58>
 71a:	b0 df       	rcall	.-160    	; 0x67c <exit_sensor>
 71c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <sortedList>
 720:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <sortedList+0x1>
 724:	02 80       	ldd	r0, Z+2	; 0x02
 726:	f3 81       	ldd	r31, Z+3	; 0x03
 728:	e0 2d       	mov	r30, r0
 72a:	83 81       	ldd	r24, Z+3	; 0x03
 72c:	8f 5f       	subi	r24, 0xFF	; 255
 72e:	99 de       	rcall	.-718    	; 0x462 <stepper_position>
 730:	e0 cf       	rjmp	.-64     	; 0x6f2 <main+0x58>

00000732 <malloc>:
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	82 30       	cpi	r24, 0x02	; 2
 73c:	91 05       	cpc	r25, r1
 73e:	10 f4       	brcc	.+4      	; 0x744 <malloc+0x12>
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__flp>
 748:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <__flp+0x1>
 74c:	20 e0       	ldi	r18, 0x00	; 0
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	a0 e0       	ldi	r26, 0x00	; 0
 752:	b0 e0       	ldi	r27, 0x00	; 0
 754:	30 97       	sbiw	r30, 0x00	; 0
 756:	19 f1       	breq	.+70     	; 0x79e <malloc+0x6c>
 758:	40 81       	ld	r20, Z
 75a:	51 81       	ldd	r21, Z+1	; 0x01
 75c:	02 81       	ldd	r16, Z+2	; 0x02
 75e:	13 81       	ldd	r17, Z+3	; 0x03
 760:	48 17       	cp	r20, r24
 762:	59 07       	cpc	r21, r25
 764:	c8 f0       	brcs	.+50     	; 0x798 <malloc+0x66>
 766:	84 17       	cp	r24, r20
 768:	95 07       	cpc	r25, r21
 76a:	69 f4       	brne	.+26     	; 0x786 <malloc+0x54>
 76c:	10 97       	sbiw	r26, 0x00	; 0
 76e:	31 f0       	breq	.+12     	; 0x77c <malloc+0x4a>
 770:	12 96       	adiw	r26, 0x02	; 2
 772:	0c 93       	st	X, r16
 774:	12 97       	sbiw	r26, 0x02	; 2
 776:	13 96       	adiw	r26, 0x03	; 3
 778:	1c 93       	st	X, r17
 77a:	27 c0       	rjmp	.+78     	; 0x7ca <malloc+0x98>
 77c:	00 93 60 01 	sts	0x0160, r16	; 0x800160 <__flp>
 780:	10 93 61 01 	sts	0x0161, r17	; 0x800161 <__flp+0x1>
 784:	22 c0       	rjmp	.+68     	; 0x7ca <malloc+0x98>
 786:	21 15       	cp	r18, r1
 788:	31 05       	cpc	r19, r1
 78a:	19 f0       	breq	.+6      	; 0x792 <malloc+0x60>
 78c:	42 17       	cp	r20, r18
 78e:	53 07       	cpc	r21, r19
 790:	18 f4       	brcc	.+6      	; 0x798 <malloc+0x66>
 792:	9a 01       	movw	r18, r20
 794:	bd 01       	movw	r22, r26
 796:	ef 01       	movw	r28, r30
 798:	df 01       	movw	r26, r30
 79a:	f8 01       	movw	r30, r16
 79c:	db cf       	rjmp	.-74     	; 0x754 <malloc+0x22>
 79e:	21 15       	cp	r18, r1
 7a0:	31 05       	cpc	r19, r1
 7a2:	f9 f0       	breq	.+62     	; 0x7e2 <malloc+0xb0>
 7a4:	28 1b       	sub	r18, r24
 7a6:	39 0b       	sbc	r19, r25
 7a8:	24 30       	cpi	r18, 0x04	; 4
 7aa:	31 05       	cpc	r19, r1
 7ac:	80 f4       	brcc	.+32     	; 0x7ce <malloc+0x9c>
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	9b 81       	ldd	r25, Y+3	; 0x03
 7b2:	61 15       	cp	r22, r1
 7b4:	71 05       	cpc	r23, r1
 7b6:	21 f0       	breq	.+8      	; 0x7c0 <malloc+0x8e>
 7b8:	fb 01       	movw	r30, r22
 7ba:	93 83       	std	Z+3, r25	; 0x03
 7bc:	82 83       	std	Z+2, r24	; 0x02
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <malloc+0x96>
 7c0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__flp+0x1>
 7c4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__flp>
 7c8:	fe 01       	movw	r30, r28
 7ca:	32 96       	adiw	r30, 0x02	; 2
 7cc:	44 c0       	rjmp	.+136    	; 0x856 <malloc+0x124>
 7ce:	fe 01       	movw	r30, r28
 7d0:	e2 0f       	add	r30, r18
 7d2:	f3 1f       	adc	r31, r19
 7d4:	81 93       	st	Z+, r24
 7d6:	91 93       	st	Z+, r25
 7d8:	22 50       	subi	r18, 0x02	; 2
 7da:	31 09       	sbc	r19, r1
 7dc:	39 83       	std	Y+1, r19	; 0x01
 7de:	28 83       	st	Y, r18
 7e0:	3a c0       	rjmp	.+116    	; 0x856 <malloc+0x124>
 7e2:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 7e6:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 7ea:	23 2b       	or	r18, r19
 7ec:	41 f4       	brne	.+16     	; 0x7fe <malloc+0xcc>
 7ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7f6:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <__brkval+0x1>
 7fa:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__brkval>
 7fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 802:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 806:	21 15       	cp	r18, r1
 808:	31 05       	cpc	r19, r1
 80a:	41 f4       	brne	.+16     	; 0x81c <malloc+0xea>
 80c:	2d b7       	in	r18, 0x3d	; 61
 80e:	3e b7       	in	r19, 0x3e	; 62
 810:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 814:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 818:	24 1b       	sub	r18, r20
 81a:	35 0b       	sbc	r19, r21
 81c:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <__brkval>
 820:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <__brkval+0x1>
 824:	e2 17       	cp	r30, r18
 826:	f3 07       	cpc	r31, r19
 828:	a0 f4       	brcc	.+40     	; 0x852 <malloc+0x120>
 82a:	2e 1b       	sub	r18, r30
 82c:	3f 0b       	sbc	r19, r31
 82e:	28 17       	cp	r18, r24
 830:	39 07       	cpc	r19, r25
 832:	78 f0       	brcs	.+30     	; 0x852 <malloc+0x120>
 834:	ac 01       	movw	r20, r24
 836:	4e 5f       	subi	r20, 0xFE	; 254
 838:	5f 4f       	sbci	r21, 0xFF	; 255
 83a:	24 17       	cp	r18, r20
 83c:	35 07       	cpc	r19, r21
 83e:	48 f0       	brcs	.+18     	; 0x852 <malloc+0x120>
 840:	4e 0f       	add	r20, r30
 842:	5f 1f       	adc	r21, r31
 844:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <__brkval+0x1>
 848:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <__brkval>
 84c:	81 93       	st	Z+, r24
 84e:	91 93       	st	Z+, r25
 850:	02 c0       	rjmp	.+4      	; 0x856 <malloc+0x124>
 852:	e0 e0       	ldi	r30, 0x00	; 0
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	cf 01       	movw	r24, r30
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	08 95       	ret

00000862 <free>:
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	09 f4       	brne	.+2      	; 0x86c <free+0xa>
 86a:	81 c0       	rjmp	.+258    	; 0x96e <free+0x10c>
 86c:	fc 01       	movw	r30, r24
 86e:	32 97       	sbiw	r30, 0x02	; 2
 870:	13 82       	std	Z+3, r1	; 0x03
 872:	12 82       	std	Z+2, r1	; 0x02
 874:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <__flp>
 878:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <__flp+0x1>
 87c:	10 97       	sbiw	r26, 0x00	; 0
 87e:	81 f4       	brne	.+32     	; 0x8a0 <free+0x3e>
 880:	20 81       	ld	r18, Z
 882:	31 81       	ldd	r19, Z+1	; 0x01
 884:	82 0f       	add	r24, r18
 886:	93 1f       	adc	r25, r19
 888:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 88c:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 890:	28 17       	cp	r18, r24
 892:	39 07       	cpc	r19, r25
 894:	51 f5       	brne	.+84     	; 0x8ea <free+0x88>
 896:	f0 93 5f 01 	sts	0x015F, r31	; 0x80015f <__brkval+0x1>
 89a:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <__brkval>
 89e:	67 c0       	rjmp	.+206    	; 0x96e <free+0x10c>
 8a0:	ed 01       	movw	r28, r26
 8a2:	20 e0       	ldi	r18, 0x00	; 0
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	ce 17       	cp	r28, r30
 8a8:	df 07       	cpc	r29, r31
 8aa:	40 f4       	brcc	.+16     	; 0x8bc <free+0x5a>
 8ac:	4a 81       	ldd	r20, Y+2	; 0x02
 8ae:	5b 81       	ldd	r21, Y+3	; 0x03
 8b0:	9e 01       	movw	r18, r28
 8b2:	41 15       	cp	r20, r1
 8b4:	51 05       	cpc	r21, r1
 8b6:	f1 f0       	breq	.+60     	; 0x8f4 <free+0x92>
 8b8:	ea 01       	movw	r28, r20
 8ba:	f5 cf       	rjmp	.-22     	; 0x8a6 <free+0x44>
 8bc:	d3 83       	std	Z+3, r29	; 0x03
 8be:	c2 83       	std	Z+2, r28	; 0x02
 8c0:	40 81       	ld	r20, Z
 8c2:	51 81       	ldd	r21, Z+1	; 0x01
 8c4:	84 0f       	add	r24, r20
 8c6:	95 1f       	adc	r25, r21
 8c8:	c8 17       	cp	r28, r24
 8ca:	d9 07       	cpc	r29, r25
 8cc:	59 f4       	brne	.+22     	; 0x8e4 <free+0x82>
 8ce:	88 81       	ld	r24, Y
 8d0:	99 81       	ldd	r25, Y+1	; 0x01
 8d2:	84 0f       	add	r24, r20
 8d4:	95 1f       	adc	r25, r21
 8d6:	02 96       	adiw	r24, 0x02	; 2
 8d8:	91 83       	std	Z+1, r25	; 0x01
 8da:	80 83       	st	Z, r24
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	9b 81       	ldd	r25, Y+3	; 0x03
 8e0:	93 83       	std	Z+3, r25	; 0x03
 8e2:	82 83       	std	Z+2, r24	; 0x02
 8e4:	21 15       	cp	r18, r1
 8e6:	31 05       	cpc	r19, r1
 8e8:	29 f4       	brne	.+10     	; 0x8f4 <free+0x92>
 8ea:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <__flp+0x1>
 8ee:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <__flp>
 8f2:	3d c0       	rjmp	.+122    	; 0x96e <free+0x10c>
 8f4:	e9 01       	movw	r28, r18
 8f6:	fb 83       	std	Y+3, r31	; 0x03
 8f8:	ea 83       	std	Y+2, r30	; 0x02
 8fa:	49 91       	ld	r20, Y+
 8fc:	59 91       	ld	r21, Y+
 8fe:	c4 0f       	add	r28, r20
 900:	d5 1f       	adc	r29, r21
 902:	ec 17       	cp	r30, r28
 904:	fd 07       	cpc	r31, r29
 906:	61 f4       	brne	.+24     	; 0x920 <free+0xbe>
 908:	80 81       	ld	r24, Z
 90a:	91 81       	ldd	r25, Z+1	; 0x01
 90c:	84 0f       	add	r24, r20
 90e:	95 1f       	adc	r25, r21
 910:	02 96       	adiw	r24, 0x02	; 2
 912:	e9 01       	movw	r28, r18
 914:	99 83       	std	Y+1, r25	; 0x01
 916:	88 83       	st	Y, r24
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	9b 83       	std	Y+3, r25	; 0x03
 91e:	8a 83       	std	Y+2, r24	; 0x02
 920:	e0 e0       	ldi	r30, 0x00	; 0
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	12 96       	adiw	r26, 0x02	; 2
 926:	8d 91       	ld	r24, X+
 928:	9c 91       	ld	r25, X
 92a:	13 97       	sbiw	r26, 0x03	; 3
 92c:	00 97       	sbiw	r24, 0x00	; 0
 92e:	19 f0       	breq	.+6      	; 0x936 <free+0xd4>
 930:	fd 01       	movw	r30, r26
 932:	dc 01       	movw	r26, r24
 934:	f7 cf       	rjmp	.-18     	; 0x924 <free+0xc2>
 936:	8d 91       	ld	r24, X+
 938:	9c 91       	ld	r25, X
 93a:	11 97       	sbiw	r26, 0x01	; 1
 93c:	9d 01       	movw	r18, r26
 93e:	2e 5f       	subi	r18, 0xFE	; 254
 940:	3f 4f       	sbci	r19, 0xFF	; 255
 942:	82 0f       	add	r24, r18
 944:	93 1f       	adc	r25, r19
 946:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 94a:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 94e:	28 17       	cp	r18, r24
 950:	39 07       	cpc	r19, r25
 952:	69 f4       	brne	.+26     	; 0x96e <free+0x10c>
 954:	30 97       	sbiw	r30, 0x00	; 0
 956:	29 f4       	brne	.+10     	; 0x962 <free+0x100>
 958:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__flp+0x1>
 95c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__flp>
 960:	02 c0       	rjmp	.+4      	; 0x966 <free+0x104>
 962:	13 82       	std	Z+3, r1	; 0x03
 964:	12 82       	std	Z+2, r1	; 0x02
 966:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <__brkval+0x1>
 96a:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <__brkval>
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
