
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800118  00800118  00000dac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e02  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0b  00000000  00000000  00002dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f4d  00000000  00000000  00003cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00004c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab2  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e53  00000000  00000000  00005b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000069cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	f2 c0       	rjmp	.+484    	; 0x1ea <__vector_1>
   6:	00 00       	nop
   8:	ff c0       	rjmp	.+510    	; 0x208 <__vector_2>
   a:	00 00       	nop
   c:	58 c3       	rjmp	.+1712   	; 0x6be <__vector_3>
   e:	00 00       	nop
  10:	0a c1       	rjmp	.+532    	; 0x226 <__vector_4>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__vector_5>
  16:	00 00       	nop
  18:	37 c1       	rjmp	.+622    	; 0x288 <__vector_6>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	aa c0       	rjmp	.+340    	; 0x1aa <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c1       	rjmp	.+566    	; 0x2ac <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9e c0       	rjmp	.+316    	; 0x1be <__vector_32>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e0       	ldi	r30, 0x00	; 0
  ac:	fd e0       	ldi	r31, 0x0D	; 13
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 31       	cpi	r26, 0x18	; 24
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e1       	ldi	r26, 0x18	; 24
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a3 36       	cpi	r26, 0x63	; 99
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	dd d3       	rcall	.+1978   	; 0x88a <main>
  d0:	15 c6       	rjmp	.+3114   	; 0xcfc <_exit>

000000d2 <__bad_interrupt>:
  d2:	2f c1       	rjmp	.+606    	; 0x332 <__vector_default>

000000d4 <initItem>:
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	f0 d4       	rcall	.+2528   	; 0xaba <malloc>
  da:	fc 01       	movw	r30, r24
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
  e0:	10 82       	st	Z, r1
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
  e6:	13 82       	std	Z+3, r1	; 0x03
  e8:	14 82       	std	Z+4, r1	; 0x04
  ea:	15 82       	std	Z+5, r1	; 0x05
  ec:	08 95       	ret

000000ee <initQueue>:
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	e3 d4       	rcall	.+2502   	; 0xaba <malloc>
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
  fe:	08 95       	ret

00000100 <enqueue>:
 100:	fc 01       	movw	r30, r24
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:
 122:	dc 01       	movw	r26, r24
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	39 f0       	breq	.+14     	; 0x13c <dequeue+0x1a>
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
 138:	89 2b       	or	r24, r25
 13a:	21 f4       	brne	.+8      	; 0x144 <dequeue+0x22>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <clearQueue>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	99 81       	ldd	r25, Y+1	; 0x01
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	51 f0       	breq	.+20     	; 0x16a <clearQueue+0x22>
 156:	fc 01       	movw	r30, r24
 158:	26 81       	ldd	r18, Z+6	; 0x06
 15a:	37 81       	ldd	r19, Z+7	; 0x07
 15c:	39 83       	std	Y+1, r19	; 0x01
 15e:	28 83       	st	Y, r18
 160:	44 d5       	rcall	.+2696   	; 0xbea <free>
 162:	88 81       	ld	r24, Y
 164:	99 81       	ldd	r25, Y+1	; 0x01
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	b1 f7       	brne	.-20     	; 0x156 <clearQueue+0xe>
 16a:	1b 82       	std	Y+3, r1	; 0x03
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <isEmpty>:
 174:	fc 01       	movw	r30, r24
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	20 81       	ld	r18, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	23 2b       	or	r18, r19
 180:	11 f0       	breq	.+4      	; 0x186 <isEmpty+0x12>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <size>:
 188:	dc 01       	movw	r26, r24
 18a:	ed 91       	ld	r30, X+
 18c:	fc 91       	ld	r31, X
 18e:	30 97       	sbiw	r30, 0x00	; 0
 190:	49 f0       	breq	.+18     	; 0x1a4 <size+0x1c>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	06 80       	ldd	r0, Z+6	; 0x06
 19a:	f7 81       	ldd	r31, Z+7	; 0x07
 19c:	e0 2d       	mov	r30, r0
 19e:	30 97       	sbiw	r30, 0x00	; 0
 1a0:	d1 f7       	brne	.-12     	; 0x196 <size+0xe>
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret

000001aa <__vector_21>:
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_32>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <timer3_flag>
 1d0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <processing_for_ramp_down>
 1d4:	88 23       	and	r24, r24
 1d6:	19 f0       	breq	.+6      	; 0x1de <__vector_32+0x20>
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_1>:
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <OS1_flag>
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_2>:
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <FER_flag>
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_4>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <OS3_flag>
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_5>:
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
 250:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	49 f4       	brne	.+18     	; 0x26a <__vector_5+0x26>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <STATE_TRANSITION>
 25e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <display_index>
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
 268:	09 c0       	rjmp	.+18     	; 0x27c <__vector_5+0x38>
 26a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	29 f4       	brne	.+10     	; 0x27c <__vector_5+0x38>
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <STATE_TRANSITION>
 278:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_6>:
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	8f 93       	push	r24
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <STATE_TRANSITION>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <processing_for_ramp_down>
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_29>:
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	0b b6       	in	r0, 0x3b	; 59
 2b8:	0f 92       	push	r0
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <reflective_present>
 2ca:	88 23       	and	r24, r24
 2cc:	29 f1       	breq	.+74     	; 0x318 <__vector_29+0x6c>
 2ce:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	98 2f       	mov	r25, r24
 2da:	88 27       	eor	r24, r24
 2dc:	82 0f       	add	r24, r18
 2de:	91 1d       	adc	r25, r1
 2e0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <ADC_result+0x1>
 2e4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ADC_result>
 2e8:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <ADC_result>
 2ec:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <ADC_result+0x1>
 2f0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <ADC_lowest_val>
 2f4:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <ADC_lowest_val+0x1>
 2f8:	28 17       	cp	r18, r24
 2fa:	39 07       	cpc	r19, r25
 2fc:	40 f4       	brcc	.+16     	; 0x30e <__vector_29+0x62>
 2fe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <ADC_result>
 302:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <ADC_result+0x1>
 306:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <ADC_lowest_val+0x1>
 30a:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <ADC_lowest_val>
 30e:	ea e7       	ldi	r30, 0x7A	; 122
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	80 64       	ori	r24, 0x40	; 64
 316:	80 83       	st	Z, r24
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0b be       	out	0x3b, r0	; 59
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_default>:
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <init_interrupts>:
 346:	8a e9       	ldi	r24, 0x9A	; 154
 348:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 352:	8d b3       	in	r24, 0x1d	; 29
 354:	8f 63       	ori	r24, 0x3F	; 63
 356:	8d bb       	out	0x1d, r24	; 29
 358:	08 95       	ret

0000035a <init_timer0_pwm>:
 35a:	84 b5       	in	r24, 0x24	; 36
 35c:	83 68       	ori	r24, 0x83	; 131
 35e:	84 bd       	out	0x24, r24	; 36
 360:	85 b5       	in	r24, 0x25	; 37
 362:	82 60       	ori	r24, 0x02	; 2
 364:	85 bd       	out	0x25, r24	; 37
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	87 bd       	out	0x27, r24	; 39
 36a:	08 95       	ret

0000036c <init_timer3>:
 36c:	e1 e9       	ldi	r30, 0x91	; 145
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	8b 60       	ori	r24, 0x0B	; 11
 374:	80 83       	st	Z, r24
 376:	e1 e7       	ldi	r30, 0x71	; 113
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	80 83       	st	Z, r24
 380:	c1 9a       	sbi	0x18, 1	; 24
 382:	80 81       	ld	r24, Z
 384:	8d 7f       	andi	r24, 0xFD	; 253
 386:	80 83       	st	Z, r24
 388:	08 95       	ret

0000038a <start_timer3>:
 38a:	9c 01       	movw	r18, r24
 38c:	e1 e7       	ldi	r30, 0x71	; 113
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	90 81       	ld	r25, Z
 392:	92 60       	ori	r25, 0x02	; 2
 394:	90 83       	st	Z, r25
 396:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 39a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 39e:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3a2:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 3a6:	08 95       	ret

000003a8 <init_motor>:
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	85 b9       	out	0x05, r24	; 5
 3ac:	80 e6       	ldi	r24, 0x60	; 96
 3ae:	87 bd       	out	0x27, r24	; 39
 3b0:	08 95       	ret

000003b2 <init_ADC>:
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <ADC_result+0x1>
 3ba:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <ADC_result>
 3be:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <ADC_lowest_val+0x1>
 3c2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <ADC_lowest_val>
 3c6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <reflective_present>
 3ca:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <item_ready>
 3ce:	ec e7       	ldi	r30, 0x7C	; 124
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	80 83       	st	Z, r24
 3d8:	ea e7       	ldi	r30, 0x7A	; 122
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
 3e2:	80 81       	ld	r24, Z
 3e4:	81 60       	ori	r24, 0x01	; 1
 3e6:	80 83       	st	Z, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	80 83       	st	Z, r24
 3ee:	80 81       	ld	r24, Z
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	80 83       	st	Z, r24
 3f4:	08 95       	ret

000003f6 <init_stepper>:
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	81 b9       	out	0x01, r24	; 1
 3fa:	85 e3       	ldi	r24, 0x35	; 53
 3fc:	82 b9       	out	0x02, r24	; 2
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <motor_position+0x1>
 406:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <motor_position>
 40a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <stepper_on+0x1>
 40e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <stepper_on>
 412:	08 95       	ret

00000414 <mTimer>:
 414:	ac 01       	movw	r20, r24
 416:	e1 e8       	ldi	r30, 0x81	; 129
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	90 81       	ld	r25, Z
 41c:	91 60       	ori	r25, 0x01	; 1
 41e:	90 83       	st	Z, r25
 420:	90 81       	ld	r25, Z
 422:	98 60       	ori	r25, 0x08	; 8
 424:	90 83       	st	Z, r25
 426:	88 ee       	ldi	r24, 0xE8	; 232
 428:	93 e0       	ldi	r25, 0x03	; 3
 42a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 42e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 432:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 436:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 43a:	b1 9a       	sbi	0x16, 1	; 22
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	05 c0       	rjmp	.+10     	; 0x44c <mTimer+0x38>
 442:	b1 9b       	sbis	0x16, 1	; 22
 444:	fe cf       	rjmp	.-4      	; 0x442 <mTimer+0x2e>
 446:	b1 9a       	sbi	0x16, 1	; 22
 448:	2f 5f       	subi	r18, 0xFF	; 255
 44a:	3f 4f       	sbci	r19, 0xFF	; 255
 44c:	24 17       	cp	r18, r20
 44e:	35 07       	cpc	r19, r21
 450:	1c f4       	brge	.+6      	; 0x458 <mTimer+0x44>
 452:	b1 9b       	sbis	0x16, 1	; 22
 454:	f6 cf       	rjmp	.-20     	; 0x442 <mTimer+0x2e>
 456:	f7 cf       	rjmp	.-18     	; 0x446 <mTimer+0x32>
 458:	08 95       	ret

0000045a <stepper_rotate>:
 45a:	6f 92       	push	r6
 45c:	7f 92       	push	r7
 45e:	8f 92       	push	r8
 460:	9f 92       	push	r9
 462:	af 92       	push	r10
 464:	bf 92       	push	r11
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	99 23       	and	r25, r25
 478:	0c f4       	brge	.+2      	; 0x47c <stepper_rotate+0x22>
 47a:	8c c0       	rjmp	.+280    	; 0x594 <stepper_rotate+0x13a>
 47c:	7b 01       	movw	r14, r22
 47e:	8c 01       	movw	r16, r24
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	d0 e0       	ldi	r29, 0x00	; 0
 484:	68 94       	set
 486:	cc 24       	eor	r12, r12
 488:	c4 f8       	bld	r12, 4
 48a:	d1 2c       	mov	r13, r1
 48c:	0f 2e       	mov	r0, r31
 48e:	fd e2       	ldi	r31, 0x2D	; 45
 490:	6f 2e       	mov	r6, r31
 492:	f0 2d       	mov	r31, r0
 494:	0f 2e       	mov	r0, r31
 496:	f6 e3       	ldi	r31, 0x36	; 54
 498:	7f 2e       	mov	r7, r31
 49a:	f0 2d       	mov	r31, r0
 49c:	0f 2e       	mov	r0, r31
 49e:	fe e2       	ldi	r31, 0x2E	; 46
 4a0:	8f 2e       	mov	r8, r31
 4a2:	f0 2d       	mov	r31, r0
 4a4:	0f 2e       	mov	r0, r31
 4a6:	f5 e3       	ldi	r31, 0x35	; 53
 4a8:	9f 2e       	mov	r9, r31
 4aa:	f0 2d       	mov	r31, r0
 4ac:	0f 2e       	mov	r0, r31
 4ae:	f3 e0       	ldi	r31, 0x03	; 3
 4b0:	af 2e       	mov	r10, r31
 4b2:	b1 2c       	mov	r11, r1
 4b4:	f0 2d       	mov	r31, r0
 4b6:	24 e0       	ldi	r18, 0x04	; 4
 4b8:	e2 16       	cp	r14, r18
 4ba:	f1 04       	cpc	r15, r1
 4bc:	91 f4       	brne	.+36     	; 0x4e2 <stepper_rotate+0x88>
 4be:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 4c2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	83 70       	andi	r24, 0x03	; 3
 4ca:	90 78       	andi	r25, 0x80	; 128
 4cc:	99 23       	and	r25, r25
 4ce:	24 f4       	brge	.+8      	; 0x4d8 <stepper_rotate+0x7e>
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	8c 6f       	ori	r24, 0xFC	; 252
 4d4:	9f 6f       	ori	r25, 0xFF	; 255
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 4dc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 4e0:	15 c0       	rjmp	.+42     	; 0x50c <stepper_rotate+0xb2>
 4e2:	88 e0       	ldi	r24, 0x08	; 8
 4e4:	e8 16       	cp	r14, r24
 4e6:	f1 04       	cpc	r15, r1
 4e8:	89 f4       	brne	.+34     	; 0x50c <stepper_rotate+0xb2>
 4ea:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 4ee:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	83 70       	andi	r24, 0x03	; 3
 4f6:	90 78       	andi	r25, 0x80	; 128
 4f8:	99 23       	and	r25, r25
 4fa:	24 f4       	brge	.+8      	; 0x504 <stepper_rotate+0xaa>
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	8c 6f       	ori	r24, 0xFC	; 252
 500:	9f 6f       	ori	r25, 0xFF	; 255
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 508:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 50c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 510:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 514:	8f 3f       	cpi	r24, 0xFF	; 255
 516:	2f ef       	ldi	r18, 0xFF	; 255
 518:	92 07       	cpc	r25, r18
 51a:	29 f4       	brne	.+10     	; 0x526 <stepper_rotate+0xcc>
 51c:	b0 92 19 01 	sts	0x0119, r11	; 0x800119 <__data_end+0x1>
 520:	a0 92 18 01 	sts	0x0118, r10	; 0x800118 <__data_end>
 524:	19 c0       	rjmp	.+50     	; 0x558 <stepper_rotate+0xfe>
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	91 05       	cpc	r25, r1
 52a:	71 f0       	breq	.+28     	; 0x548 <stepper_rotate+0xee>
 52c:	1c f4       	brge	.+6      	; 0x534 <stepper_rotate+0xda>
 52e:	89 2b       	or	r24, r25
 530:	39 f0       	breq	.+14     	; 0x540 <stepper_rotate+0xe6>
 532:	15 c0       	rjmp	.+42     	; 0x55e <stepper_rotate+0x104>
 534:	82 30       	cpi	r24, 0x02	; 2
 536:	91 05       	cpc	r25, r1
 538:	59 f0       	breq	.+22     	; 0x550 <stepper_rotate+0xf6>
 53a:	03 97       	sbiw	r24, 0x03	; 3
 53c:	81 f4       	brne	.+32     	; 0x55e <stepper_rotate+0x104>
 53e:	0c c0       	rjmp	.+24     	; 0x558 <stepper_rotate+0xfe>
 540:	92 b8       	out	0x02, r9	; 2
 542:	c6 01       	movw	r24, r12
 544:	67 df       	rcall	.-306    	; 0x414 <mTimer>
 546:	0b c0       	rjmp	.+22     	; 0x55e <stepper_rotate+0x104>
 548:	72 b8       	out	0x02, r7	; 2
 54a:	c6 01       	movw	r24, r12
 54c:	63 df       	rcall	.-314    	; 0x414 <mTimer>
 54e:	07 c0       	rjmp	.+14     	; 0x55e <stepper_rotate+0x104>
 550:	82 b8       	out	0x02, r8	; 2
 552:	c6 01       	movw	r24, r12
 554:	5f df       	rcall	.-322    	; 0x414 <mTimer>
 556:	03 c0       	rjmp	.+6      	; 0x55e <stepper_rotate+0x104>
 558:	62 b8       	out	0x02, r6	; 2
 55a:	c6 01       	movw	r24, r12
 55c:	5b df       	rcall	.-330    	; 0x414 <mTimer>
 55e:	ca 30       	cpi	r28, 0x0A	; 10
 560:	d1 05       	cpc	r29, r1
 562:	3c f4       	brge	.+14     	; 0x572 <stepper_rotate+0x118>
 564:	87 e0       	ldi	r24, 0x07	; 7
 566:	c8 16       	cp	r12, r24
 568:	d1 04       	cpc	r13, r1
 56a:	1c f0       	brlt	.+6      	; 0x572 <stepper_rotate+0x118>
 56c:	21 e0       	ldi	r18, 0x01	; 1
 56e:	c2 1a       	sub	r12, r18
 570:	d1 08       	sbc	r13, r1
 572:	c8 01       	movw	r24, r16
 574:	8c 1b       	sub	r24, r28
 576:	9d 0b       	sbc	r25, r29
 578:	0b 97       	sbiw	r24, 0x0b	; 11
 57a:	3c f4       	brge	.+14     	; 0x58a <stepper_rotate+0x130>
 57c:	80 e1       	ldi	r24, 0x10	; 16
 57e:	c8 16       	cp	r12, r24
 580:	d1 04       	cpc	r13, r1
 582:	1c f4       	brge	.+6      	; 0x58a <stepper_rotate+0x130>
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	c2 1a       	sub	r12, r18
 588:	d2 0a       	sbc	r13, r18
 58a:	21 96       	adiw	r28, 0x01	; 1
 58c:	0c 17       	cp	r16, r28
 58e:	1d 07       	cpc	r17, r29
 590:	0c f0       	brlt	.+2      	; 0x594 <stepper_rotate+0x13a>
 592:	91 cf       	rjmp	.-222    	; 0x4b6 <stepper_rotate+0x5c>
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	df 90       	pop	r13
 5a2:	cf 90       	pop	r12
 5a4:	bf 90       	pop	r11
 5a6:	af 90       	pop	r10
 5a8:	9f 90       	pop	r9
 5aa:	8f 90       	pop	r8
 5ac:	7f 90       	pop	r7
 5ae:	6f 90       	pop	r6
 5b0:	08 95       	ret

000005b2 <stepper_position>:
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	c8 2f       	mov	r28, r24
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <motor_position>
 5be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <motor_position+0x1>
 5c2:	9e 01       	movw	r18, r28
 5c4:	28 1b       	sub	r18, r24
 5c6:	39 0b       	sbc	r19, r25
 5c8:	21 30       	cpi	r18, 0x01	; 1
 5ca:	31 05       	cpc	r19, r1
 5cc:	21 f0       	breq	.+8      	; 0x5d6 <stepper_position+0x24>
 5ce:	2d 3f       	cpi	r18, 0xFD	; 253
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	38 07       	cpc	r19, r24
 5d4:	31 f4       	brne	.+12     	; 0x5e2 <stepper_position+0x30>
 5d6:	64 e0       	ldi	r22, 0x04	; 4
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	82 e3       	ldi	r24, 0x32	; 50
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	3d df       	rcall	.-390    	; 0x45a <stepper_rotate>
 5e0:	18 c0       	rjmp	.+48     	; 0x612 <stepper_position+0x60>
 5e2:	2f 3f       	cpi	r18, 0xFF	; 255
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	38 07       	cpc	r19, r24
 5e8:	19 f0       	breq	.+6      	; 0x5f0 <stepper_position+0x3e>
 5ea:	23 30       	cpi	r18, 0x03	; 3
 5ec:	31 05       	cpc	r19, r1
 5ee:	31 f4       	brne	.+12     	; 0x5fc <stepper_position+0x4a>
 5f0:	68 e0       	ldi	r22, 0x08	; 8
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	82 e3       	ldi	r24, 0x32	; 50
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	30 df       	rcall	.-416    	; 0x45a <stepper_rotate>
 5fa:	0b c0       	rjmp	.+22     	; 0x612 <stepper_position+0x60>
 5fc:	22 30       	cpi	r18, 0x02	; 2
 5fe:	31 05       	cpc	r19, r1
 600:	19 f0       	breq	.+6      	; 0x608 <stepper_position+0x56>
 602:	2e 3f       	cpi	r18, 0xFE	; 254
 604:	3f 4f       	sbci	r19, 0xFF	; 255
 606:	29 f4       	brne	.+10     	; 0x612 <stepper_position+0x60>
 608:	64 e0       	ldi	r22, 0x04	; 4
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	84 e6       	ldi	r24, 0x64	; 100
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	24 df       	rcall	.-440    	; 0x45a <stepper_rotate>
 612:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <motor_position+0x1>
 616:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <motor_position>
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret

00000620 <entry_sensor>:
 620:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <OS1_flag>
 624:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <item_number>
 628:	8f 5f       	subi	r24, 0xFF	; 255
 62a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <item_number>
 62e:	52 dd       	rcall	.-1372   	; 0xd4 <initItem>
 630:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <item_number>
 634:	fc 01       	movw	r30, r24
 636:	25 83       	std	Z+5, r18	; 0x05
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	24 83       	std	Z+4, r18	; 0x04
 63c:	bc 01       	movw	r22, r24
 63e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <entryList>
 642:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <entryList+0x1>
 646:	5c cd       	rjmp	.-1352   	; 0x100 <enqueue>
 648:	08 95       	ret

0000064a <metal_sensor>:
 64a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <FER_flag>
 64e:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <entryList>
 652:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <entryList+0x1>
 656:	02 80       	ldd	r0, Z+2	; 0x02
 658:	f3 81       	ldd	r31, Z+3	; 0x03
 65a:	e0 2d       	mov	r30, r0
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 83       	st	Z, r24
 660:	08 95       	ret

00000662 <reflective_sensor>:
 662:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <OS2_flag>
 666:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <reflective_present>
 66a:	88 23       	and	r24, r24
 66c:	31 f0       	breq	.+12     	; 0x67a <reflective_sensor+0x18>
 66e:	ea e7       	ldi	r30, 0x7A	; 122
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	80 64       	ori	r24, 0x40	; 64
 676:	80 83       	st	Z, r24
 678:	08 95       	ret
 67a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 67e:	82 30       	cpi	r24, 0x02	; 2
 680:	d1 f4       	brne	.+52     	; 0x6b6 <reflective_sensor+0x54>
 682:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <entryList>
 686:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <entryList+0x1>
 68a:	4b dd       	rcall	.-1386   	; 0x122 <dequeue>
 68c:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <ADC_lowest_val>
 690:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <ADC_lowest_val+0x1>
 694:	fc 01       	movw	r30, r24
 696:	32 83       	std	Z+2, r19	; 0x02
 698:	21 83       	std	Z+1, r18	; 0x01
 69a:	22 e0       	ldi	r18, 0x02	; 2
 69c:	24 83       	std	Z+4, r18	; 0x04
 69e:	bc 01       	movw	r22, r24
 6a0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <reflectiveList>
 6a4:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <reflectiveList+0x1>
 6a8:	2b dd       	rcall	.-1450   	; 0x100 <enqueue>
 6aa:	8f ef       	ldi	r24, 0xFF	; 255
 6ac:	93 e0       	ldi	r25, 0x03	; 3
 6ae:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <ADC_lowest_val+0x1>
 6b2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <ADC_lowest_val>
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <item_ready>
 6bc:	08 95       	ret

000006be <__vector_3>:
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	0b b6       	in	r0, 0x3b	; 59
 6ca:	0f 92       	push	r0
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <OS2_flag>
 6ea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <reflective_present>
 6ee:	88 23       	and	r24, r24
 6f0:	19 f0       	breq	.+6      	; 0x6f8 <__vector_3+0x3a>
 6f2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <reflective_present>
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <__vector_3+0x40>
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <reflective_present>
 6fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	09 f4       	brne	.+2      	; 0x708 <__vector_3+0x4a>
 706:	ad df       	rcall	.-166    	; 0x662 <reflective_sensor>
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0b be       	out	0x3b, r0	; 59
 724:	0f 90       	pop	r0
 726:	0f be       	out	0x3f, r0	; 63
 728:	0f 90       	pop	r0
 72a:	1f 90       	pop	r1
 72c:	18 95       	reti

0000072e <classify_item>:
 72e:	cf 93       	push	r28
 730:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <item_ready>
 734:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <reflectiveList>
 738:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <reflectiveList+0x1>
 73c:	f2 dc       	rcall	.-1564   	; 0x122 <dequeue>
 73e:	fc 01       	movw	r30, r24
 740:	81 81       	ldd	r24, Z+1	; 0x01
 742:	92 81       	ldd	r25, Z+2	; 0x02
 744:	20 81       	ld	r18, Z
 746:	21 11       	cpse	r18, r1
 748:	34 c0       	rjmp	.+104    	; 0x7b2 <classify_item+0x84>
 74a:	a0 e1       	ldi	r26, 0x10	; 16
 74c:	b1 e0       	ldi	r27, 0x01	; 1
 74e:	4d 91       	ld	r20, X+
 750:	5c 91       	ld	r21, X
 752:	11 97       	sbiw	r26, 0x01	; 1
 754:	14 96       	adiw	r26, 0x04	; 4
 756:	2d 91       	ld	r18, X+
 758:	3c 91       	ld	r19, X
 75a:	15 97       	sbiw	r26, 0x05	; 5
 75c:	48 1b       	sub	r20, r24
 75e:	59 0b       	sbc	r21, r25
 760:	ba 01       	movw	r22, r20
 762:	22 f4       	brpl	.+8      	; 0x76c <classify_item+0x3e>
 764:	66 27       	eor	r22, r22
 766:	77 27       	eor	r23, r23
 768:	64 1b       	sub	r22, r20
 76a:	75 0b       	sbc	r23, r21
 76c:	a9 01       	movw	r20, r18
 76e:	48 1b       	sub	r20, r24
 770:	59 0b       	sbc	r21, r25
 772:	9a 01       	movw	r18, r20
 774:	22 f4       	brpl	.+8      	; 0x77e <classify_item+0x50>
 776:	22 27       	eor	r18, r18
 778:	33 27       	eor	r19, r19
 77a:	24 1b       	sub	r18, r20
 77c:	35 0b       	sbc	r19, r21
 77e:	62 17       	cp	r22, r18
 780:	73 07       	cpc	r23, r19
 782:	50 f4       	brcc	.+20     	; 0x798 <classify_item+0x6a>
 784:	ac e1       	ldi	r26, 0x1C	; 28
 786:	b1 e0       	ldi	r27, 0x01	; 1
 788:	8d 91       	ld	r24, X+
 78a:	9c 91       	ld	r25, X
 78c:	11 97       	sbiw	r26, 0x01	; 1
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	8d 93       	st	X+, r24
 792:	9c 93       	st	X, r25
 794:	c0 e0       	ldi	r28, 0x00	; 0
 796:	48 c0       	rjmp	.+144    	; 0x828 <classify_item+0xfa>
 798:	ac e1       	ldi	r26, 0x1C	; 28
 79a:	b1 e0       	ldi	r27, 0x01	; 1
 79c:	14 96       	adiw	r26, 0x04	; 4
 79e:	8d 91       	ld	r24, X+
 7a0:	9c 91       	ld	r25, X
 7a2:	15 97       	sbiw	r26, 0x05	; 5
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	15 96       	adiw	r26, 0x05	; 5
 7a8:	9c 93       	st	X, r25
 7aa:	8e 93       	st	-X, r24
 7ac:	14 97       	sbiw	r26, 0x04	; 4
 7ae:	c2 e0       	ldi	r28, 0x02	; 2
 7b0:	3b c0       	rjmp	.+118    	; 0x828 <classify_item+0xfa>
 7b2:	21 30       	cpi	r18, 0x01	; 1
 7b4:	c1 f5       	brne	.+112    	; 0x826 <classify_item+0xf8>
 7b6:	a0 e1       	ldi	r26, 0x10	; 16
 7b8:	b1 e0       	ldi	r27, 0x01	; 1
 7ba:	16 96       	adiw	r26, 0x06	; 6
 7bc:	4d 91       	ld	r20, X+
 7be:	5c 91       	ld	r21, X
 7c0:	17 97       	sbiw	r26, 0x07	; 7
 7c2:	12 96       	adiw	r26, 0x02	; 2
 7c4:	2d 91       	ld	r18, X+
 7c6:	3c 91       	ld	r19, X
 7c8:	13 97       	sbiw	r26, 0x03	; 3
 7ca:	48 1b       	sub	r20, r24
 7cc:	59 0b       	sbc	r21, r25
 7ce:	ba 01       	movw	r22, r20
 7d0:	22 f4       	brpl	.+8      	; 0x7da <classify_item+0xac>
 7d2:	66 27       	eor	r22, r22
 7d4:	77 27       	eor	r23, r23
 7d6:	64 1b       	sub	r22, r20
 7d8:	75 0b       	sbc	r23, r21
 7da:	a9 01       	movw	r20, r18
 7dc:	48 1b       	sub	r20, r24
 7de:	59 0b       	sbc	r21, r25
 7e0:	9a 01       	movw	r18, r20
 7e2:	22 f4       	brpl	.+8      	; 0x7ec <classify_item+0xbe>
 7e4:	22 27       	eor	r18, r18
 7e6:	33 27       	eor	r19, r19
 7e8:	24 1b       	sub	r18, r20
 7ea:	35 0b       	sbc	r19, r21
 7ec:	62 17       	cp	r22, r18
 7ee:	73 07       	cpc	r23, r19
 7f0:	68 f4       	brcc	.+26     	; 0x80c <classify_item+0xde>
 7f2:	ac e1       	ldi	r26, 0x1C	; 28
 7f4:	b1 e0       	ldi	r27, 0x01	; 1
 7f6:	16 96       	adiw	r26, 0x06	; 6
 7f8:	8d 91       	ld	r24, X+
 7fa:	9c 91       	ld	r25, X
 7fc:	17 97       	sbiw	r26, 0x07	; 7
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	17 96       	adiw	r26, 0x07	; 7
 802:	9c 93       	st	X, r25
 804:	8e 93       	st	-X, r24
 806:	16 97       	sbiw	r26, 0x06	; 6
 808:	c3 e0       	ldi	r28, 0x03	; 3
 80a:	0e c0       	rjmp	.+28     	; 0x828 <classify_item+0xfa>
 80c:	ac e1       	ldi	r26, 0x1C	; 28
 80e:	b1 e0       	ldi	r27, 0x01	; 1
 810:	12 96       	adiw	r26, 0x02	; 2
 812:	8d 91       	ld	r24, X+
 814:	9c 91       	ld	r25, X
 816:	13 97       	sbiw	r26, 0x03	; 3
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	13 96       	adiw	r26, 0x03	; 3
 81c:	9c 93       	st	X, r25
 81e:	8e 93       	st	-X, r24
 820:	12 97       	sbiw	r26, 0x02	; 2
 822:	c1 e0       	ldi	r28, 0x01	; 1
 824:	01 c0       	rjmp	.+2      	; 0x828 <classify_item+0xfa>
 826:	c0 e0       	ldi	r28, 0x00	; 0
 828:	c3 83       	std	Z+3, r28	; 0x03
 82a:	83 e0       	ldi	r24, 0x03	; 3
 82c:	84 83       	std	Z+4, r24	; 0x04
 82e:	ac e1       	ldi	r26, 0x1C	; 28
 830:	b1 e0       	ldi	r27, 0x01	; 1
 832:	18 96       	adiw	r26, 0x08	; 8
 834:	8d 91       	ld	r24, X+
 836:	9c 91       	ld	r25, X
 838:	19 97       	sbiw	r26, 0x09	; 9
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	19 96       	adiw	r26, 0x09	; 9
 83e:	9c 93       	st	X, r25
 840:	8e 93       	st	-X, r24
 842:	18 97       	sbiw	r26, 0x08	; 8
 844:	bf 01       	movw	r22, r30
 846:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <classifiedList>
 84a:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <classifiedList+0x1>
 84e:	58 dc       	rcall	.-1872   	; 0x100 <enqueue>
 850:	c8 b9       	out	0x08, r28	; 8
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <exit_sensor>:
 856:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <OS3_flag>
 85a:	15 b8       	out	0x05, r1	; 5
 85c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <classifiedList>
 860:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <classifiedList+0x1>
 864:	5e dc       	rcall	.-1860   	; 0x122 <dequeue>
 866:	bc 01       	movw	r22, r24
 868:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <sortedList>
 86c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sortedList+0x1>
 870:	47 dc       	rcall	.-1906   	; 0x100 <enqueue>
 872:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <sortedList>
 876:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <sortedList+0x1>
 87a:	02 80       	ldd	r0, Z+2	; 0x02
 87c:	f3 81       	ldd	r31, Z+3	; 0x03
 87e:	e0 2d       	mov	r30, r0
 880:	83 81       	ldd	r24, Z+3	; 0x03
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	96 de       	rcall	.-724    	; 0x5b2 <stepper_position>
 886:	90 cd       	rjmp	.-1248   	; 0x3a8 <init_motor>
 888:	08 95       	ret

0000088a <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 88a:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 88c:	8f e8       	ldi	r24, 0x8F	; 143
 88e:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 894:	80 ef       	ldi	r24, 0xF0	; 240
 896:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 898:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 89a:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 89c:	18 b8       	out	0x08, r1	; 8
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
	init_timer3();
	init_motor();
 89e:	f8 94       	cli
	init_interrupts();
 8a0:	88 dd       	rcall	.-1264   	; 0x3b2 <init_ADC>
 8a2:	5b dd       	rcall	.-1354   	; 0x35a <init_timer0_pwm>
	init_stepper();
 8a4:	63 dd       	rcall	.-1338   	; 0x36c <init_timer3>
		stepper_position(stepper_pos[i]);
		mTimer(1000);
		i++;
	}*/

	entryList = initQueue();
 8a6:	80 dd       	rcall	.-1280   	; 0x3a8 <init_motor>
 8a8:	4e dd       	rcall	.-1380   	; 0x346 <init_interrupts>
 8aa:	a5 dd       	rcall	.-1206   	; 0x3f6 <init_stepper>
 8ac:	78 94       	sei
 8ae:	1f dc       	rcall	.-1986   	; 0xee <initQueue>
	reflectiveList = initQueue();
 8b0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <entryList+0x1>
 8b4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <entryList>
 8b8:	1a dc       	rcall	.-1996   	; 0xee <initQueue>
	classifiedList = initQueue();
 8ba:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <reflectiveList+0x1>
 8be:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <reflectiveList>
 8c2:	15 dc       	rcall	.-2006   	; 0xee <initQueue>
 8c4:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <classifiedList+0x1>
	sortedList = initQueue();
 8c8:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <classifiedList>
 8cc:	10 dc       	rcall	.-2016   	; 0xee <initQueue>
 8ce:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <sortedList+0x1>

	STATE = OPERATIONAL;
 8d2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <sortedList>
 8d6:	82 e0       	ldi	r24, 0x02	; 2
	item_waiting = 0;
 8d8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
	item_number = 0;
 8dc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <item_waiting>
			//PORTC = 0x00;
			
			// Entered OPERATIONAL from PAUSED
			if (STATE_TRANSITION == OPERATIONAL_ENTERED) {
				// start motor
				PORTB =  CW;
 8e0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <item_number>
 8e4:	68 94       	set
				
				// Disable timer
				TIMSK3 &= 0xFD;
 8e6:	ff 24       	eor	r15, r15
 8e8:	f2 f8       	bld	r15, 2
			
			STATE_TRANSITION = NONE;
			//ramp_down_entered = 0;
			
			if (STATE == PAUSED) {
				STATE = OPERATIONAL;
 8ea:	c1 e7       	ldi	r28, 0x71	; 113
 8ec:	d0 e0       	ldi	r29, 0x00	; 0
 8ee:	68 94       	set
				// Turn off motor
				mTimer(100);
				PORTB = 0;
				
				// Start cycling through processed items
				cycle_through_display = 1;
 8f0:	ee 24       	eor	r14, r14
 8f2:	e1 f8       	bld	r14, 1
				display_index = 0;
				start_timer3(timer3_1sec);
				
				// Disable ADC
				ADCSRA &= ~_BV(ADEN);
 8f4:	dd 24       	eor	r13, r13
 8f6:	d3 94       	inc	r13
	// Main Program
	while (1)
	{
				
		// When we trigger ramp down button stay in OPERATIONAL for time of half conveyor
		if (STATE_TRANSITION == RAMP_DOWN_ENTERED) {
 8f8:	0a e7       	ldi	r16, 0x7A	; 122
 8fa:	10 e0       	ldi	r17, 0x00	; 0
 8fc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <STATE_TRANSITION>
			// testing
			//PORTC |= 0x02;
			
			STATE_TRANSITION = NONE;
 900:	83 30       	cpi	r24, 0x03	; 3
			//ramp_down_entered = 0;
			
			if (STATE == PAUSED) {
 902:	69 f4       	brne	.+26     	; 0x91e <main+0x94>
 904:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <STATE_TRANSITION>
				STATE = OPERATIONAL;
 908:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
			}
			
			start_timer3(timer3_1sec);		// Good for MOTOR_SPEED = 0x30
 90c:	83 30       	cpi	r24, 0x03	; 3
 90e:	11 f4       	brne	.+4      	; 0x914 <main+0x8a>
 910:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <STATE>
 914:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer3_1sec>
		}
		
		if (STATE == OPERATIONAL || RAMP_DOWN) {
 918:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer3_1sec+0x1>
			//PORTC = 0x00;
			
			// Entered OPERATIONAL from PAUSED
			if (STATE_TRANSITION == OPERATIONAL_ENTERED) {
 91c:	36 dd       	rcall	.-1428   	; 0x38a <start_timer3>
				// start motor
				PORTB =  CW;
				
				// Disable timer
				TIMSK3 &= 0xFD;
 91e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
			}	
			
			// Handle flags from sensors
			if(OS1_flag) 
 922:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <STATE_TRANSITION>
				entry_sensor();
 926:	82 30       	cpi	r24, 0x02	; 2
			if(FER_flag) 
 928:	21 f4       	brne	.+8      	; 0x932 <main+0xa8>
 92a:	f5 b8       	out	0x05, r15	; 5
				metal_sensor();
 92c:	88 81       	ld	r24, Y
			if(OS2_flag) 
 92e:	8d 7f       	andi	r24, 0xFD	; 253
 930:	88 83       	st	Y, r24
 932:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <OS1_flag>
				reflective_sensor();
 936:	81 11       	cpse	r24, r1
			if(item_ready) 
 938:	73 de       	rcall	.-794    	; 0x620 <entry_sensor>
 93a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <FER_flag>
				classify_item();
 93e:	81 11       	cpse	r24, r1
 940:	84 de       	rcall	.-760    	; 0x64a <metal_sensor>
			if(OS3_flag) 
 942:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <OS2_flag>
 946:	81 11       	cpse	r24, r1
				exit_sensor();	
 948:	8c de       	rcall	.-744    	; 0x662 <reflective_sensor>
			
		}
		
		if (STATE == PAUSED) {
 94a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <item_ready>
 94e:	81 11       	cpse	r24, r1
 950:	ee de       	rcall	.-548    	; 0x72e <classify_item>
			// testing
			//PORTC = (size(classifiedList) << 6) + (size(reflectiveList) << 3) + size(entryList);

			
			// Check if just entering PAUSED
			if (STATE_TRANSITION == PAUSE_ENTERED) {
 952:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <OS3_flag>
 956:	81 11       	cpse	r24, r1
 958:	7e df       	rcall	.-260    	; 0x856 <exit_sensor>
				//pause_entered = 0;
				STATE_TRANSITION = NONE;
 95a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
				
				// turn off motor
				PORTB =  0;
 95e:	83 30       	cpi	r24, 0x03	; 3
				
				// start timer for 1 sec
				start_timer3(timer3_1sec);
 960:	c1 f5       	brne	.+112    	; 0x9d2 <main+0x148>
 962:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <STATE_TRANSITION>
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	41 f4       	brne	.+16     	; 0x97a <main+0xf0>
			}
			
			// Update display
			if (timer3_flag) {
 96a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <STATE_TRANSITION>
 96e:	15 b8       	out	0x05, r1	; 5
 970:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer3_1sec>
				timer3_flag = 0;
 974:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer3_1sec+0x1>
				//display_pieces((1 << display_index), sorted_items_array[display_index]);
				//display_pieces(display_type[display_index], sorted_items_array[display_index]);
				
				
				
				if (display_index == 4) {
 978:	08 dd       	rcall	.-1520   	; 0x38a <start_timer3>
 97a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <timer3_flag>
					// Get number of items still on conveyor belt
					int remaining_items = size(classifiedList); // gets size of all queues cuz they're linked!!
 97e:	88 23       	and	r24, r24
 980:	41 f1       	breq	.+80     	; 0x9d2 <main+0x148>
 982:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <timer3_flag>
 986:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <display_index>
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 98a:	84 30       	cpi	r24, 0x04	; 4
 98c:	51 f4       	brne	.+20     	; 0x9a2 <main+0x118>
					// Get number of items still on conveyor belt
					int remaining_items = size(classifiedList); // gets size of all queues cuz they're linked!!
					// + size(reflectiveList) + size(classifiedList);
					
					display_pieces(0xff, remaining_items);
					display_index = 0;
 98e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <classifiedList>
 992:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <classifiedList+0x1>
				} else {
					display_pieces(display_type[display_index], sorted_items_array[display_index]);
 996:	f8 db       	rcall	.-2064   	; 0x188 <size>
 998:	80 51       	subi	r24, 0x10	; 16
 99a:	88 b9       	out	0x08, r24	; 8
 99c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <display_index>
 9a0:	18 c0       	rjmp	.+48     	; 0x9d2 <main+0x148>
 9a2:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <display_index>
 9a6:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <display_index>
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	aa 5f       	subi	r26, 0xFA	; 250
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 9ae:	be 4f       	sbci	r27, 0xFE	; 254
 9b0:	9c 91       	ld	r25, X
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	e4 5e       	subi	r30, 0xE4	; 228
					
					display_pieces(0xff, remaining_items);
					display_index = 0;
				} else {
					display_pieces(display_type[display_index], sorted_items_array[display_index]);
					display_index++;
 9ba:	fe 4f       	sbci	r31, 0xFE	; 254
 9bc:	80 81       	ld	r24, Z
 9be:	20 e1       	ldi	r18, 0x10	; 16
 9c0:	92 9f       	mul	r25, r18
 9c2:	80 0d       	add	r24, r0
				}	
			}			
		} 
		
		if (STATE == RAMP_DOWN) {
 9c4:	11 24       	eor	r1, r1
 9c6:	88 b9       	out	0x08, r24	; 8
 9c8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <display_index>
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
			// testing
			//PORTC |= 0x08;
			
			if (timer3_flag) {	
 9ce:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <display_index>
 9d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
				timer3_flag = 0;
 9d6:	84 30       	cpi	r24, 0x04	; 4
 9d8:	09 f0       	breq	.+2      	; 0x9dc <main+0x152>
				
				if (cycle_through_display) {
 9da:	90 cf       	rjmp	.-224    	; 0x8fc <main+0x72>
 9dc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <timer3_flag>
 9e0:	88 23       	and	r24, r24
					display_pieces(display_type[display_index], sorted_items_array[display_index]);
 9e2:	49 f1       	breq	.+82     	; 0xa36 <main+0x1ac>
 9e4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <timer3_flag>
 9e8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cycle_through_display>
 9ec:	88 23       	and	r24, r24
 9ee:	01 f1       	breq	.+64     	; 0xa30 <main+0x1a6>
 9f0:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <display_index>
 9f4:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <display_index>
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	aa 5f       	subi	r26, 0xFA	; 250
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 9fc:	be 4f       	sbci	r27, 0xFE	; 254
 9fe:	9c 91       	ld	r25, X
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	e4 5e       	subi	r30, 0xE4	; 228
				timer3_flag = 0;
				
				if (cycle_through_display) {
					display_pieces(display_type[display_index], sorted_items_array[display_index]);
					
					if (display_index == 3) {
 a08:	fe 4f       	sbci	r31, 0xFE	; 254
 a0a:	80 81       	ld	r24, Z
 a0c:	e0 e1       	ldi	r30, 0x10	; 16
						display_index = 0;
 a0e:	9e 9f       	mul	r25, r30
 a10:	80 0d       	add	r24, r0
 a12:	11 24       	eor	r1, r1
						} else {
						display_index++;
 a14:	88 b9       	out	0x08, r24	; 8
 a16:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <display_index>
 a1a:	83 30       	cpi	r24, 0x03	; 3
 a1c:	19 f4       	brne	.+6      	; 0xa24 <main+0x19a>
					}
				} else {
					// Disable timer
				TIMSK3 &= 0xFD;
 a1e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <display_index>
 a22:	09 c0       	rjmp	.+18     	; 0xa36 <main+0x1ac>
				
				
			}
			
			// If no items in any queue, turn off system
			if (isEmpty(entryList) &&
 a24:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <display_index>
 a28:	8f 5f       	subi	r24, 0xFF	; 255
 a2a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <display_index>
 a2e:	03 c0       	rjmp	.+6      	; 0xa36 <main+0x1ac>
 a30:	88 81       	ld	r24, Y
 a32:	8d 7f       	andi	r24, 0xFD	; 253
				isEmpty(reflectiveList) &&
 a34:	88 83       	st	Y, r24
 a36:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <entryList>
 a3a:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <entryList+0x1>
				
				
			}
			
			// If no items in any queue, turn off system
			if (isEmpty(entryList) &&
 a3e:	9a db       	rcall	.-2252   	; 0x174 <isEmpty>
 a40:	89 2b       	or	r24, r25
 a42:	09 f4       	brne	.+2      	; 0xa46 <main+0x1bc>
				isEmpty(reflectiveList) &&
				isEmpty(classifiedList) &&
 a44:	5b cf       	rjmp	.-330    	; 0x8fc <main+0x72>
 a46:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <reflectiveList>
 a4a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <reflectiveList+0x1>
				
			}
			
			// If no items in any queue, turn off system
			if (isEmpty(entryList) &&
				isEmpty(reflectiveList) &&
 a4e:	92 db       	rcall	.-2268   	; 0x174 <isEmpty>
 a50:	89 2b       	or	r24, r25
 a52:	09 f4       	brne	.+2      	; 0xa56 <main+0x1cc>
				isEmpty(classifiedList) &&
				!cycle_through_display) {
 a54:	53 cf       	rjmp	.-346    	; 0x8fc <main+0x72>
 a56:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <classifiedList>
				
				// Turn off motor
				mTimer(100);
 a5a:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <classifiedList+0x1>
 a5e:	8a db       	rcall	.-2284   	; 0x174 <isEmpty>
				PORTB = 0;
				
				// Start cycling through processed items
				cycle_through_display = 1;
 a60:	89 2b       	or	r24, r25
				display_index = 0;
 a62:	09 f4       	brne	.+2      	; 0xa66 <main+0x1dc>
 a64:	4b cf       	rjmp	.-362    	; 0x8fc <main+0x72>
				start_timer3(timer3_1sec);
 a66:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cycle_through_display>
 a6a:	81 11       	cpse	r24, r1
 a6c:	47 cf       	rjmp	.-370    	; 0x8fc <main+0x72>
				
				// Disable ADC
				ADCSRA &= ~_BV(ADEN);
 a6e:	84 e6       	ldi	r24, 0x64	; 100
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	d0 dc       	rcall	.-1632   	; 0x414 <mTimer>
				
				// Disable interrupts
				//cli();
				
				// Release resources
				clearQueue(entryList);
 a74:	15 b8       	out	0x05, r1	; 5
 a76:	d0 92 1a 01 	sts	0x011A, r13	; 0x80011a <cycle_through_display>
 a7a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <display_index>
 a7e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer3_1sec>
				clearQueue(reflectiveList);
 a82:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer3_1sec+0x1>
 a86:	81 dc       	rcall	.-1790   	; 0x38a <start_timer3>
 a88:	f8 01       	movw	r30, r16
 a8a:	80 81       	ld	r24, Z
				clearQueue(classifiedList);
 a8c:	8f 77       	andi	r24, 0x7F	; 127
 a8e:	80 83       	st	Z, r24
 a90:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <entryList>
 a94:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <entryList+0x1>
				clearQueue(sortedList);
 a98:	57 db       	rcall	.-2386   	; 0x148 <clearQueue>
 a9a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <reflectiveList>
 a9e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <reflectiveList+0x1>
 aa2:	52 db       	rcall	.-2396   	; 0x148 <clearQueue>
 aa4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <classifiedList>
 aa8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <classifiedList+0x1>
 aac:	4d db       	rcall	.-2406   	; 0x148 <clearQueue>
 aae:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <sortedList>
 ab2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sortedList+0x1>
 ab6:	48 db       	rcall	.-2416   	; 0x148 <clearQueue>
 ab8:	21 cf       	rjmp	.-446    	; 0x8fc <main+0x72>

00000aba <malloc>:
 aba:	0f 93       	push	r16
 abc:	1f 93       	push	r17
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	82 30       	cpi	r24, 0x02	; 2
 ac4:	91 05       	cpc	r25, r1
 ac6:	10 f4       	brcc	.+4      	; 0xacc <malloc+0x12>
 ac8:	82 e0       	ldi	r24, 0x02	; 2
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <__flp>
 ad0:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <__flp+0x1>
 ad4:	20 e0       	ldi	r18, 0x00	; 0
 ad6:	30 e0       	ldi	r19, 0x00	; 0
 ad8:	a0 e0       	ldi	r26, 0x00	; 0
 ada:	b0 e0       	ldi	r27, 0x00	; 0
 adc:	30 97       	sbiw	r30, 0x00	; 0
 ade:	19 f1       	breq	.+70     	; 0xb26 <malloc+0x6c>
 ae0:	40 81       	ld	r20, Z
 ae2:	51 81       	ldd	r21, Z+1	; 0x01
 ae4:	02 81       	ldd	r16, Z+2	; 0x02
 ae6:	13 81       	ldd	r17, Z+3	; 0x03
 ae8:	48 17       	cp	r20, r24
 aea:	59 07       	cpc	r21, r25
 aec:	c8 f0       	brcs	.+50     	; 0xb20 <malloc+0x66>
 aee:	84 17       	cp	r24, r20
 af0:	95 07       	cpc	r25, r21
 af2:	69 f4       	brne	.+26     	; 0xb0e <malloc+0x54>
 af4:	10 97       	sbiw	r26, 0x00	; 0
 af6:	31 f0       	breq	.+12     	; 0xb04 <malloc+0x4a>
 af8:	12 96       	adiw	r26, 0x02	; 2
 afa:	0c 93       	st	X, r16
 afc:	12 97       	sbiw	r26, 0x02	; 2
 afe:	13 96       	adiw	r26, 0x03	; 3
 b00:	1c 93       	st	X, r17
 b02:	27 c0       	rjmp	.+78     	; 0xb52 <malloc+0x98>
 b04:	00 93 61 01 	sts	0x0161, r16	; 0x800161 <__flp>
 b08:	10 93 62 01 	sts	0x0162, r17	; 0x800162 <__flp+0x1>
 b0c:	22 c0       	rjmp	.+68     	; 0xb52 <malloc+0x98>
 b0e:	21 15       	cp	r18, r1
 b10:	31 05       	cpc	r19, r1
 b12:	19 f0       	breq	.+6      	; 0xb1a <malloc+0x60>
 b14:	42 17       	cp	r20, r18
 b16:	53 07       	cpc	r21, r19
 b18:	18 f4       	brcc	.+6      	; 0xb20 <malloc+0x66>
 b1a:	9a 01       	movw	r18, r20
 b1c:	bd 01       	movw	r22, r26
 b1e:	ef 01       	movw	r28, r30
 b20:	df 01       	movw	r26, r30
 b22:	f8 01       	movw	r30, r16
 b24:	db cf       	rjmp	.-74     	; 0xadc <malloc+0x22>
 b26:	21 15       	cp	r18, r1
 b28:	31 05       	cpc	r19, r1
 b2a:	f9 f0       	breq	.+62     	; 0xb6a <malloc+0xb0>
 b2c:	28 1b       	sub	r18, r24
 b2e:	39 0b       	sbc	r19, r25
 b30:	24 30       	cpi	r18, 0x04	; 4
 b32:	31 05       	cpc	r19, r1
 b34:	80 f4       	brcc	.+32     	; 0xb56 <malloc+0x9c>
 b36:	8a 81       	ldd	r24, Y+2	; 0x02
 b38:	9b 81       	ldd	r25, Y+3	; 0x03
 b3a:	61 15       	cp	r22, r1
 b3c:	71 05       	cpc	r23, r1
 b3e:	21 f0       	breq	.+8      	; 0xb48 <malloc+0x8e>
 b40:	fb 01       	movw	r30, r22
 b42:	93 83       	std	Z+3, r25	; 0x03
 b44:	82 83       	std	Z+2, r24	; 0x02
 b46:	04 c0       	rjmp	.+8      	; 0xb50 <malloc+0x96>
 b48:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__flp+0x1>
 b4c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__flp>
 b50:	fe 01       	movw	r30, r28
 b52:	32 96       	adiw	r30, 0x02	; 2
 b54:	44 c0       	rjmp	.+136    	; 0xbde <malloc+0x124>
 b56:	fe 01       	movw	r30, r28
 b58:	e2 0f       	add	r30, r18
 b5a:	f3 1f       	adc	r31, r19
 b5c:	81 93       	st	Z+, r24
 b5e:	91 93       	st	Z+, r25
 b60:	22 50       	subi	r18, 0x02	; 2
 b62:	31 09       	sbc	r19, r1
 b64:	39 83       	std	Y+1, r19	; 0x01
 b66:	28 83       	st	Y, r18
 b68:	3a c0       	rjmp	.+116    	; 0xbde <malloc+0x124>
 b6a:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <__brkval>
 b6e:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <__brkval+0x1>
 b72:	23 2b       	or	r18, r19
 b74:	41 f4       	brne	.+16     	; 0xb86 <malloc+0xcc>
 b76:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 b7a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 b7e:	30 93 60 01 	sts	0x0160, r19	; 0x800160 <__brkval+0x1>
 b82:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <__brkval>
 b86:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b8a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 b8e:	21 15       	cp	r18, r1
 b90:	31 05       	cpc	r19, r1
 b92:	41 f4       	brne	.+16     	; 0xba4 <malloc+0xea>
 b94:	2d b7       	in	r18, 0x3d	; 61
 b96:	3e b7       	in	r19, 0x3e	; 62
 b98:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b9c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ba0:	24 1b       	sub	r18, r20
 ba2:	35 0b       	sbc	r19, r21
 ba4:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <__brkval>
 ba8:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <__brkval+0x1>
 bac:	e2 17       	cp	r30, r18
 bae:	f3 07       	cpc	r31, r19
 bb0:	a0 f4       	brcc	.+40     	; 0xbda <malloc+0x120>
 bb2:	2e 1b       	sub	r18, r30
 bb4:	3f 0b       	sbc	r19, r31
 bb6:	28 17       	cp	r18, r24
 bb8:	39 07       	cpc	r19, r25
 bba:	78 f0       	brcs	.+30     	; 0xbda <malloc+0x120>
 bbc:	ac 01       	movw	r20, r24
 bbe:	4e 5f       	subi	r20, 0xFE	; 254
 bc0:	5f 4f       	sbci	r21, 0xFF	; 255
 bc2:	24 17       	cp	r18, r20
 bc4:	35 07       	cpc	r19, r21
 bc6:	48 f0       	brcs	.+18     	; 0xbda <malloc+0x120>
 bc8:	4e 0f       	add	r20, r30
 bca:	5f 1f       	adc	r21, r31
 bcc:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <__brkval+0x1>
 bd0:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <__brkval>
 bd4:	81 93       	st	Z+, r24
 bd6:	91 93       	st	Z+, r25
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <malloc+0x124>
 bda:	e0 e0       	ldi	r30, 0x00	; 0
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	cf 01       	movw	r24, r30
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	1f 91       	pop	r17
 be6:	0f 91       	pop	r16
 be8:	08 95       	ret

00000bea <free>:
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	00 97       	sbiw	r24, 0x00	; 0
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <free+0xa>
 bf2:	81 c0       	rjmp	.+258    	; 0xcf6 <free+0x10c>
 bf4:	fc 01       	movw	r30, r24
 bf6:	32 97       	sbiw	r30, 0x02	; 2
 bf8:	13 82       	std	Z+3, r1	; 0x03
 bfa:	12 82       	std	Z+2, r1	; 0x02
 bfc:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <__flp>
 c00:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <__flp+0x1>
 c04:	10 97       	sbiw	r26, 0x00	; 0
 c06:	81 f4       	brne	.+32     	; 0xc28 <free+0x3e>
 c08:	20 81       	ld	r18, Z
 c0a:	31 81       	ldd	r19, Z+1	; 0x01
 c0c:	82 0f       	add	r24, r18
 c0e:	93 1f       	adc	r25, r19
 c10:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <__brkval>
 c14:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <__brkval+0x1>
 c18:	28 17       	cp	r18, r24
 c1a:	39 07       	cpc	r19, r25
 c1c:	51 f5       	brne	.+84     	; 0xc72 <free+0x88>
 c1e:	f0 93 60 01 	sts	0x0160, r31	; 0x800160 <__brkval+0x1>
 c22:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <__brkval>
 c26:	67 c0       	rjmp	.+206    	; 0xcf6 <free+0x10c>
 c28:	ed 01       	movw	r28, r26
 c2a:	20 e0       	ldi	r18, 0x00	; 0
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	ce 17       	cp	r28, r30
 c30:	df 07       	cpc	r29, r31
 c32:	40 f4       	brcc	.+16     	; 0xc44 <free+0x5a>
 c34:	4a 81       	ldd	r20, Y+2	; 0x02
 c36:	5b 81       	ldd	r21, Y+3	; 0x03
 c38:	9e 01       	movw	r18, r28
 c3a:	41 15       	cp	r20, r1
 c3c:	51 05       	cpc	r21, r1
 c3e:	f1 f0       	breq	.+60     	; 0xc7c <free+0x92>
 c40:	ea 01       	movw	r28, r20
 c42:	f5 cf       	rjmp	.-22     	; 0xc2e <free+0x44>
 c44:	d3 83       	std	Z+3, r29	; 0x03
 c46:	c2 83       	std	Z+2, r28	; 0x02
 c48:	40 81       	ld	r20, Z
 c4a:	51 81       	ldd	r21, Z+1	; 0x01
 c4c:	84 0f       	add	r24, r20
 c4e:	95 1f       	adc	r25, r21
 c50:	c8 17       	cp	r28, r24
 c52:	d9 07       	cpc	r29, r25
 c54:	59 f4       	brne	.+22     	; 0xc6c <free+0x82>
 c56:	88 81       	ld	r24, Y
 c58:	99 81       	ldd	r25, Y+1	; 0x01
 c5a:	84 0f       	add	r24, r20
 c5c:	95 1f       	adc	r25, r21
 c5e:	02 96       	adiw	r24, 0x02	; 2
 c60:	91 83       	std	Z+1, r25	; 0x01
 c62:	80 83       	st	Z, r24
 c64:	8a 81       	ldd	r24, Y+2	; 0x02
 c66:	9b 81       	ldd	r25, Y+3	; 0x03
 c68:	93 83       	std	Z+3, r25	; 0x03
 c6a:	82 83       	std	Z+2, r24	; 0x02
 c6c:	21 15       	cp	r18, r1
 c6e:	31 05       	cpc	r19, r1
 c70:	29 f4       	brne	.+10     	; 0xc7c <free+0x92>
 c72:	f0 93 62 01 	sts	0x0162, r31	; 0x800162 <__flp+0x1>
 c76:	e0 93 61 01 	sts	0x0161, r30	; 0x800161 <__flp>
 c7a:	3d c0       	rjmp	.+122    	; 0xcf6 <free+0x10c>
 c7c:	e9 01       	movw	r28, r18
 c7e:	fb 83       	std	Y+3, r31	; 0x03
 c80:	ea 83       	std	Y+2, r30	; 0x02
 c82:	49 91       	ld	r20, Y+
 c84:	59 91       	ld	r21, Y+
 c86:	c4 0f       	add	r28, r20
 c88:	d5 1f       	adc	r29, r21
 c8a:	ec 17       	cp	r30, r28
 c8c:	fd 07       	cpc	r31, r29
 c8e:	61 f4       	brne	.+24     	; 0xca8 <free+0xbe>
 c90:	80 81       	ld	r24, Z
 c92:	91 81       	ldd	r25, Z+1	; 0x01
 c94:	84 0f       	add	r24, r20
 c96:	95 1f       	adc	r25, r21
 c98:	02 96       	adiw	r24, 0x02	; 2
 c9a:	e9 01       	movw	r28, r18
 c9c:	99 83       	std	Y+1, r25	; 0x01
 c9e:	88 83       	st	Y, r24
 ca0:	82 81       	ldd	r24, Z+2	; 0x02
 ca2:	93 81       	ldd	r25, Z+3	; 0x03
 ca4:	9b 83       	std	Y+3, r25	; 0x03
 ca6:	8a 83       	std	Y+2, r24	; 0x02
 ca8:	e0 e0       	ldi	r30, 0x00	; 0
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	12 96       	adiw	r26, 0x02	; 2
 cae:	8d 91       	ld	r24, X+
 cb0:	9c 91       	ld	r25, X
 cb2:	13 97       	sbiw	r26, 0x03	; 3
 cb4:	00 97       	sbiw	r24, 0x00	; 0
 cb6:	19 f0       	breq	.+6      	; 0xcbe <free+0xd4>
 cb8:	fd 01       	movw	r30, r26
 cba:	dc 01       	movw	r26, r24
 cbc:	f7 cf       	rjmp	.-18     	; 0xcac <free+0xc2>
 cbe:	8d 91       	ld	r24, X+
 cc0:	9c 91       	ld	r25, X
 cc2:	11 97       	sbiw	r26, 0x01	; 1
 cc4:	9d 01       	movw	r18, r26
 cc6:	2e 5f       	subi	r18, 0xFE	; 254
 cc8:	3f 4f       	sbci	r19, 0xFF	; 255
 cca:	82 0f       	add	r24, r18
 ccc:	93 1f       	adc	r25, r19
 cce:	20 91 5f 01 	lds	r18, 0x015F	; 0x80015f <__brkval>
 cd2:	30 91 60 01 	lds	r19, 0x0160	; 0x800160 <__brkval+0x1>
 cd6:	28 17       	cp	r18, r24
 cd8:	39 07       	cpc	r19, r25
 cda:	69 f4       	brne	.+26     	; 0xcf6 <free+0x10c>
 cdc:	30 97       	sbiw	r30, 0x00	; 0
 cde:	29 f4       	brne	.+10     	; 0xcea <free+0x100>
 ce0:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__flp+0x1>
 ce4:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__flp>
 ce8:	02 c0       	rjmp	.+4      	; 0xcee <free+0x104>
 cea:	13 82       	std	Z+3, r1	; 0x03
 cec:	12 82       	std	Z+2, r1	; 0x02
 cee:	b0 93 60 01 	sts	0x0160, r27	; 0x800160 <__brkval+0x1>
 cf2:	a0 93 5f 01 	sts	0x015F, r26	; 0x80015f <__brkval>
 cf6:	df 91       	pop	r29
 cf8:	cf 91       	pop	r28
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
