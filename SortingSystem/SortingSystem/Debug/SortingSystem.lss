
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007ce  00000862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080010e  0080010e  00000870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a80  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee2  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d21  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000924  00000000  00000000  000044b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be2  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000059ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	ac c0       	rjmp	.+344    	; 0x15e <__vector_1>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__vector_2>
   a:	00 00       	nop
   c:	c6 c0       	rjmp	.+396    	; 0x19a <__vector_3>
   e:	00 00       	nop
  10:	dd c0       	rjmp	.+442    	; 0x1cc <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	7a c0       	rjmp	.+244    	; 0x14a <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	ba c0       	rjmp	.+372    	; 0x1ea <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ec       	ldi	r30, 0xCE	; 206
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 30       	cpi	r26, 0x0E	; 14
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ae e0       	ldi	r26, 0x0E	; 14
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a9 35       	cpi	r26, 0x59	; 89
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	1e d2       	rcall	.+1084   	; 0x50c <main>
  d0:	7c c3       	rjmp	.+1784   	; 0x7ca <_exit>

000000d2 <__bad_interrupt>:
  d2:	d5 c0       	rjmp	.+426    	; 0x27e <__vector_default>

000000d4 <initItem>:
		free(temp);
	}/*while*/

	q->tail = NULL;		
	return;
}//clearQueue
  d4:	87 e0       	ldi	r24, 0x07	; 7
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	57 d2       	rcall	.+1198   	; 0x588 <malloc>
  da:	fc 01       	movw	r30, r24
  dc:	16 82       	std	Z+6, r1	; 0x06
  de:	15 82       	std	Z+5, r1	; 0x05
  e0:	10 82       	st	Z, r1
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
  e6:	13 82       	std	Z+3, r1	; 0x03
  e8:	14 82       	std	Z+4, r1	; 0x04
  ea:	08 95       	ret

000000ec <initQueue>:
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	4b d2       	rcall	.+1174   	; 0x588 <malloc>
  f2:	fc 01       	movw	r30, r24
  f4:	11 82       	std	Z+1, r1	; 0x01
  f6:	10 82       	st	Z, r1
  f8:	13 82       	std	Z+3, r1	; 0x03
  fa:	12 82       	std	Z+2, r1	; 0x02
  fc:	08 95       	ret

000000fe <enqueue>:
  fe:	fc 01       	movw	r30, r24
 100:	a2 81       	ldd	r26, Z+2	; 0x02
 102:	b3 81       	ldd	r27, Z+3	; 0x03
 104:	10 97       	sbiw	r26, 0x00	; 0
 106:	39 f0       	breq	.+14     	; 0x116 <enqueue+0x18>
 108:	16 96       	adiw	r26, 0x06	; 6
 10a:	7c 93       	st	X, r23
 10c:	6e 93       	st	-X, r22
 10e:	15 97       	sbiw	r26, 0x05	; 5
 110:	73 83       	std	Z+3, r23	; 0x03
 112:	62 83       	std	Z+2, r22	; 0x02
 114:	08 95       	ret
 116:	71 83       	std	Z+1, r23	; 0x01
 118:	60 83       	st	Z, r22
 11a:	73 83       	std	Z+3, r23	; 0x03
 11c:	62 83       	std	Z+2, r22	; 0x02
 11e:	08 95       	ret

00000120 <dequeue>:
 120:	dc 01       	movw	r26, r24
 122:	ed 91       	ld	r30, X+
 124:	fc 91       	ld	r31, X
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	30 97       	sbiw	r30, 0x00	; 0
 12a:	39 f0       	breq	.+14     	; 0x13a <dequeue+0x1a>
 12c:	85 81       	ldd	r24, Z+5	; 0x05
 12e:	96 81       	ldd	r25, Z+6	; 0x06
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	9c 93       	st	X, r25
 134:	8e 93       	st	-X, r24
 136:	89 2b       	or	r24, r25
 138:	21 f4       	brne	.+8      	; 0x142 <dequeue+0x22>
 13a:	13 96       	adiw	r26, 0x03	; 3
 13c:	1c 92       	st	X, r1
 13e:	1e 92       	st	-X, r1
 140:	12 97       	sbiw	r26, 0x02	; 2
 142:	cf 01       	movw	r24, r30
 144:	08 95       	ret

00000146 <deleteItem>:

void deleteItem(item* i){
 146:	b8 c2       	rjmp	.+1392   	; 0x6b8 <free>
 148:	08 95       	ret

0000014a <__vector_21>:
		display_reflective_reading(avg);
		mTimer(7000);
		
		update_motor_speed(MOTOR_SPEED);
	}
}//ADC_calibrate
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <__vector_1>:
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <OS1_flag>
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_2>:
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <FER_flag>
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_3>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <OS2_flag>
 1ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <reflective_present>
 1b0:	88 23       	and	r24, r24
 1b2:	19 f0       	breq	.+6      	; 0x1ba <__vector_3+0x20>
 1b4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <reflective_present>
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <__vector_3+0x26>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <reflective_present>
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_4>:
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <OS3_flag>
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_29>:
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	0b b6       	in	r0, 0x3b	; 59
 1f6:	0f 92       	push	r0
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
 204:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <reflective_present>
 208:	88 23       	and	r24, r24
 20a:	61 f1       	breq	.+88     	; 0x264 <__vector_29+0x7a>
 20c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ADC_result+0x1>
 216:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ADC_result>
 21a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ADC_result>
 21e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ADC_result+0x1>
 222:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 226:	98 2f       	mov	r25, r24
 228:	88 27       	eor	r24, r24
 22a:	82 2b       	or	r24, r18
 22c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ADC_result+0x1>
 230:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ADC_result>
 234:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <ADC_result>
 238:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <ADC_result+0x1>
 23c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ADC_lowest_val>
 240:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ADC_lowest_val+0x1>
 244:	28 17       	cp	r18, r24
 246:	39 07       	cpc	r19, r25
 248:	40 f4       	brcc	.+16     	; 0x25a <__vector_29+0x70>
 24a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <ADC_result>
 24e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ADC_result+0x1>
 252:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ADC_lowest_val+0x1>
 256:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ADC_lowest_val>
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 64       	ori	r24, 0x40	; 64
 262:	80 83       	st	Z, r24
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	3f 91       	pop	r19
 26e:	2f 91       	pop	r18
 270:	0f 90       	pop	r0
 272:	0b be       	out	0x3b, r0	; 59
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_default>:
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <init_interrupts>:
 292:	8a e9       	ldi	r24, 0x9A	; 154
 294:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 298:	8d b3       	in	r24, 0x1d	; 29
 29a:	8f 60       	ori	r24, 0x0F	; 15
 29c:	8d bb       	out	0x1d, r24	; 29
 29e:	08 95       	ret

000002a0 <init_timer0_pwm>:
 2a0:	84 b5       	in	r24, 0x24	; 36
 2a2:	83 68       	ori	r24, 0x83	; 131
 2a4:	84 bd       	out	0x24, r24	; 36
 2a6:	85 b5       	in	r24, 0x25	; 37
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	85 bd       	out	0x25, r24	; 37
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	87 bd       	out	0x27, r24	; 39
 2b0:	08 95       	ret

000002b2 <init_motor>:
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	85 b9       	out	0x05, r24	; 5
 2b6:	80 e7       	ldi	r24, 0x70	; 112
 2b8:	87 bd       	out	0x27, r24	; 39
 2ba:	08 95       	ret

000002bc <init_ADC>:
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	93 e0       	ldi	r25, 0x03	; 3
 2c0:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ADC_result+0x1>
 2c4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ADC_result>
 2c8:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ADC_lowest_val+0x1>
 2cc:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ADC_lowest_val>
 2d0:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <reflective_present>
 2d4:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <item_ready>
 2d8:	ec e7       	ldi	r30, 0x7C	; 124
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24
 2e2:	ea e7       	ldi	r30, 0x7A	; 122
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	80 83       	st	Z, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	80 83       	st	Z, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	80 83       	st	Z, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	80 83       	st	Z, r24
 2fe:	08 95       	ret

00000300 <init_stepper>:
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	81 b9       	out	0x01, r24	; 1
 304:	85 e3       	ldi	r24, 0x35	; 53
 306:	82 b9       	out	0x02, r24	; 2
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <motor_position+0x1>
 310:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <motor_position>
 314:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <stepnum+0x1>
 318:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <stepnum>
 31c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <stepper_on+0x1>
 320:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <stepper_on>
 324:	08 95       	ret

00000326 <entry_sensor>:

void entry_sensor()
{
	OS1_flag = 0;
 326:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <OS1_flag>
	//Add a new item to the queue
	item* newItem = initItem();
	newItem->stage = 1;
 32a:	d4 de       	rcall	.-600    	; 0xd4 <initItem>
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	fc 01       	movw	r30, r24
	enqueue(itemList, newItem);
 330:	24 83       	std	Z+4, r18	; 0x04
 332:	bc 01       	movw	r22, r24
 334:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <itemList>
 338:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <itemList+0x1>
	
	//Display queue length
	//PORTC = (uint8_t)size(itemList);
	PORTC = 0x10;
 33c:	e0 de       	rcall	.-576    	; 0xfe <enqueue>
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	88 b9       	out	0x08, r24	; 8
 342:	08 95       	ret

00000344 <metal_sensor>:
}

void metal_sensor(){
	//If this interrupt fires, then the object is metal
	FER_flag = 0;
 344:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <FER_flag>
	metal_sensor_item->metal = 1;
 348:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <metal_sensor_item>
 34c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <metal_sensor_item+0x1>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 83       	st	Z, r24
	metal_sensor_item = metal_sensor_item->next;
 354:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <metal_sensor_item>
 358:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <metal_sensor_item+0x1>
 35c:	85 81       	ldd	r24, Z+5	; 0x05
 35e:	96 81       	ldd	r25, Z+6	; 0x06
 360:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <metal_sensor_item+0x1>
 364:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <metal_sensor_item>
	PORTC |= 0x20;
 368:	45 9a       	sbi	0x08, 5	; 8
 36a:	08 95       	ret

0000036c <reflective_sensor>:
}

void reflective_sensor(){
	OS2_flag = 0;
 36c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <OS2_flag>
	//object entering reflective sensor zone, start ADC conversion
	if(reflective_present)
 370:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <reflective_present>
 374:	88 23       	and	r24, r24
 376:	31 f0       	breq	.+12     	; 0x384 <reflective_sensor+0x18>
	{
		ADCSRA |= _BV(ADSC);
 378:	ea e7       	ldi	r30, 0x7A	; 122
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	80 64       	ori	r24, 0x40	; 64
 380:	80 83       	st	Z, r24
 382:	08 95       	ret
	}
	// object exiting the reflective sensor zone, item ready to be classified
	else
	{
		if(STATE == OPERATIONAL)
 384:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <STATE>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	e9 f4       	brne	.+58     	; 0x3c6 <reflective_sensor+0x5a>
		{
			reflective_sensor_item->reflective = ADC_lowest_val;
 38c:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <reflective_sensor_item>
 390:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <reflective_sensor_item+0x1>
 394:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <ADC_lowest_val>
 398:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <ADC_lowest_val+0x1>
 39c:	92 83       	std	Z+2, r25	; 0x02
 39e:	81 83       	std	Z+1, r24	; 0x01
			ADC_lowest_val = 0x3FF;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	93 e0       	ldi	r25, 0x03	; 3
 3a4:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <ADC_lowest_val+0x1>
 3a8:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <ADC_lowest_val>
			reflective_sensor_item->stage = 2;
 3ac:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <reflective_sensor_item>
 3b0:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <reflective_sensor_item+0x1>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	84 83       	std	Z+4, r24	; 0x04
			reflective_sensor_item = reflective_sensor_item->next;
 3b8:	85 81       	ldd	r24, Z+5	; 0x05
 3ba:	96 81       	ldd	r25, Z+6	; 0x06
 3bc:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <reflective_sensor_item+0x1>
 3c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <reflective_sensor_item>
			PORTC |= 0x40;
 3c4:	46 9a       	sbi	0x08, 6	; 8
		}
		item_ready = 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <item_ready>
 3cc:	08 95       	ret

000003ce <classify_item>:
	}
}

void classify_item(){
	item_ready = 0;
 3ce:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <item_ready>
	
	uint16_t r = reflective_sensor_item->reflective;
 3d2:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <reflective_sensor_item>
 3d6:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <reflective_sensor_item+0x1>
 3da:	81 81       	ldd	r24, Z+1	; 0x01
 3dc:	92 81       	ldd	r25, Z+2	; 0x02
	uint8_t m = reflective_sensor_item->metal;
 3de:	20 81       	ld	r18, Z
	uint16_t diff_white;
	uint16_t diff_black;
	uint16_t diff_steel;
	uint16_t diff_aluminum;

	if(m == 0)
 3e0:	21 11       	cpse	r18, r1
 3e2:	34 c0       	rjmp	.+104    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		diff_white = abs(calibration_vals[0] - r);
 3e4:	a6 e0       	ldi	r26, 0x06	; 6
 3e6:	b1 e0       	ldi	r27, 0x01	; 1
 3e8:	4d 91       	ld	r20, X+
 3ea:	5c 91       	ld	r21, X
 3ec:	11 97       	sbiw	r26, 0x01	; 1
		diff_black = abs(calibration_vals[1] - r);
 3ee:	12 96       	adiw	r26, 0x02	; 2
 3f0:	2d 91       	ld	r18, X+
 3f2:	3c 91       	ld	r19, X
 3f4:	13 97       	sbiw	r26, 0x03	; 3
		if(diff_white < diff_black) 
 3f6:	48 1b       	sub	r20, r24
 3f8:	59 0b       	sbc	r21, r25
 3fa:	ba 01       	movw	r22, r20
 3fc:	22 f4       	brpl	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	66 27       	eor	r22, r22
 400:	77 27       	eor	r23, r23
 402:	64 1b       	sub	r22, r20
 404:	75 0b       	sbc	r23, r21
 406:	a9 01       	movw	r20, r18
 408:	48 1b       	sub	r20, r24
 40a:	59 0b       	sbc	r21, r25
 40c:	9a 01       	movw	r18, r20
 40e:	22 f4       	brpl	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	22 27       	eor	r18, r18
 412:	33 27       	eor	r19, r19
 414:	24 1b       	sub	r18, r20
 416:	35 0b       	sbc	r19, r21
 418:	62 17       	cp	r22, r18
 41a:	73 07       	cpc	r23, r19
 41c:	50 f4       	brcc	.+20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		{
			type = WHITE;
			sorted_items_array[WHITE]++;
 41e:	ae e0       	ldi	r26, 0x0E	; 14
 420:	b1 e0       	ldi	r27, 0x01	; 1
 422:	8d 91       	ld	r24, X+
 424:	9c 91       	ld	r25, X
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	8d 93       	st	X+, r24
 42c:	9c 93       	st	X, r25
	{
		diff_white = abs(calibration_vals[0] - r);
		diff_black = abs(calibration_vals[1] - r);
		if(diff_white < diff_black) 
		{
			type = WHITE;
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	48 c0       	rjmp	.+144    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			sorted_items_array[WHITE]++;
		}
		else 
		{
			type = BLACK;
			sorted_items_array[BLACK]++;
 432:	ae e0       	ldi	r26, 0x0E	; 14
 434:	b1 e0       	ldi	r27, 0x01	; 1
 436:	14 96       	adiw	r26, 0x04	; 4
 438:	8d 91       	ld	r24, X+
 43a:	9c 91       	ld	r25, X
 43c:	15 97       	sbiw	r26, 0x05	; 5
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	15 96       	adiw	r26, 0x05	; 5
 442:	9c 93       	st	X, r25
 444:	8e 93       	st	-X, r24
 446:	14 97       	sbiw	r26, 0x04	; 4
			type = WHITE;
			sorted_items_array[WHITE]++;
		}
		else 
		{
			type = BLACK;
 448:	92 e0       	ldi	r25, 0x02	; 2
 44a:	3b c0       	rjmp	.+118    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			sorted_items_array[BLACK]++;
		}
	}
	
	if(m == 1)
 44c:	21 30       	cpi	r18, 0x01	; 1
 44e:	c1 f5       	brne	.+112    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	{
		diff_aluminum = abs(calibration_vals[2] - r);
 450:	a6 e0       	ldi	r26, 0x06	; 6
 452:	b1 e0       	ldi	r27, 0x01	; 1
 454:	14 96       	adiw	r26, 0x04	; 4
 456:	4d 91       	ld	r20, X+
 458:	5c 91       	ld	r21, X
 45a:	15 97       	sbiw	r26, 0x05	; 5
		diff_steel = abs(calibration_vals[3] - r);
 45c:	16 96       	adiw	r26, 0x06	; 6
 45e:	2d 91       	ld	r18, X+
 460:	3c 91       	ld	r19, X
 462:	17 97       	sbiw	r26, 0x07	; 7
		if(diff_aluminum < diff_steel) 
 464:	48 1b       	sub	r20, r24
 466:	59 0b       	sbc	r21, r25
 468:	ba 01       	movw	r22, r20
 46a:	22 f4       	brpl	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 46c:	66 27       	eor	r22, r22
 46e:	77 27       	eor	r23, r23
 470:	64 1b       	sub	r22, r20
 472:	75 0b       	sbc	r23, r21
 474:	a9 01       	movw	r20, r18
 476:	48 1b       	sub	r20, r24
 478:	59 0b       	sbc	r21, r25
 47a:	9a 01       	movw	r18, r20
 47c:	22 f4       	brpl	.+8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47e:	22 27       	eor	r18, r18
 480:	33 27       	eor	r19, r19
 482:	24 1b       	sub	r18, r20
 484:	35 0b       	sbc	r19, r21
 486:	62 17       	cp	r22, r18
 488:	73 07       	cpc	r23, r19
 48a:	68 f4       	brcc	.+26     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		{
			type = ALUMINUM;
			sorted_items_array[ALUMINUM]++;
 48c:	ae e0       	ldi	r26, 0x0E	; 14
 48e:	b1 e0       	ldi	r27, 0x01	; 1
 490:	16 96       	adiw	r26, 0x06	; 6
 492:	8d 91       	ld	r24, X+
 494:	9c 91       	ld	r25, X
 496:	17 97       	sbiw	r26, 0x07	; 7
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	17 96       	adiw	r26, 0x07	; 7
 49c:	9c 93       	st	X, r25
 49e:	8e 93       	st	-X, r24
 4a0:	16 97       	sbiw	r26, 0x06	; 6
	{
		diff_aluminum = abs(calibration_vals[2] - r);
		diff_steel = abs(calibration_vals[3] - r);
		if(diff_aluminum < diff_steel) 
		{
			type = ALUMINUM;
 4a2:	93 e0       	ldi	r25, 0x03	; 3
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			sorted_items_array[ALUMINUM]++;
		}
		else 
		{
			type = STEEL;
			sorted_items_array[STEEL]++;
 4a6:	ae e0       	ldi	r26, 0x0E	; 14
 4a8:	b1 e0       	ldi	r27, 0x01	; 1
 4aa:	12 96       	adiw	r26, 0x02	; 2
 4ac:	8d 91       	ld	r24, X+
 4ae:	9c 91       	ld	r25, X
 4b0:	13 97       	sbiw	r26, 0x03	; 3
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	13 96       	adiw	r26, 0x03	; 3
 4b6:	9c 93       	st	X, r25
 4b8:	8e 93       	st	-X, r24
 4ba:	12 97       	sbiw	r26, 0x02	; 2
			type = ALUMINUM;
			sorted_items_array[ALUMINUM]++;
		}
		else 
		{
			type = STEEL;
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
void classify_item(){
	item_ready = 0;
	
	uint16_t r = reflective_sensor_item->reflective;
	uint8_t m = reflective_sensor_item->metal;
	uint8_t type = 0;
 4c0:	90 e0       	ldi	r25, 0x00	; 0
		{
			type = STEEL;
			sorted_items_array[STEEL]++;
		}
	}
	reflective_sensor_item->type = type;
 4c2:	93 83       	std	Z+3, r25	; 0x03
	reflective_sensor_item->stage = 3;
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	84 83       	std	Z+4, r24	; 0x04
	
	sorted_items_array[TOTAL]++;
 4c8:	ee e0       	ldi	r30, 0x0E	; 14
 4ca:	f1 e0       	ldi	r31, 0x01	; 1
 4cc:	20 85       	ldd	r18, Z+8	; 0x08
 4ce:	31 85       	ldd	r19, Z+9	; 0x09
 4d0:	2f 5f       	subi	r18, 0xFF	; 255
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	31 87       	std	Z+9, r19	; 0x09
 4d6:	20 87       	std	Z+8, r18	; 0x08
	
	//TESTING
	PORTC |= type;
 4d8:	88 b1       	in	r24, 0x08	; 8
 4da:	89 2b       	or	r24, r25
 4dc:	88 b9       	out	0x08, r24	; 8
 4de:	08 95       	ret

000004e0 <exit_sensor>:
	
}//classify_item

void exit_sensor(){
	//dequeue item, display queue size
	if(stepper_on)
 4e0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <stepper_on>
 4e4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <stepper_on+0x1>
 4e8:	89 2b       	or	r24, r25
 4ea:	21 f0       	breq	.+8      	; 0x4f4 <exit_sensor+0x14>
	}
	return 1;
}//button_pressed
*/
void update_motor_speed(uint16_t speed){
	OCR0A = speed;
 4ec:	17 bc       	out	0x27, r1	; 39
void exit_sensor(){
	//dequeue item, display queue size
	if(stepper_on)
	{
		update_motor_speed(0);
		item_waiting = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <item_waiting>
	}
	
	exit_sensor_item = dequeue(itemList);
 4f4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <itemList>
 4f8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <itemList+0x1>
 4fc:	11 de       	rcall	.-990    	; 0x120 <dequeue>
 4fe:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <exit_sensor_item+0x1>
 502:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <exit_sensor_item>
	deleteItem(exit_sensor_item);
 506:	1f de       	rcall	.-962    	; 0x146 <deleteItem>
	//PORTC = (uint8_t)size(itemList);
	PORTC |= 0x80;
 508:	47 9a       	sbi	0x08, 7	; 8
 50a:	08 95       	ret

0000050c <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 50c:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal
 50e:	8f e8       	ldi	r24, 0x8F	; 143
 510:	84 b9       	out	0x04, r24	; 4
	// PB3:0 = output for motor
	DDRC = 0xFF;		// Port C all output (LEDs)
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 516:	80 ef       	ldi	r24, 0xF0	; 240
 518:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 51a:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 51c:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 51e:	18 b8       	out	0x08, r1	; 8
	
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
 520:	f8 94       	cli
 522:	cc de       	rcall	.-616    	; 0x2bc <init_ADC>
 524:	bd de       	rcall	.-646    	; 0x2a0 <init_timer0_pwm>
 526:	c5 de       	rcall	.-630    	; 0x2b2 <init_motor>
 528:	b4 de       	rcall	.-664    	; 0x292 <init_interrupts>
 52a:	ea de       	rcall	.-556    	; 0x300 <init_stepper>
 52c:	78 94       	sei
 52e:	de dd       	rcall	.-1092   	; 0xec <initQueue>
 530:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <itemList+0x1>
 534:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <itemList>
 538:	fc 01       	movw	r30, r24
 53a:	20 81       	ld	r18, Z
 53c:	31 81       	ldd	r19, Z+1	; 0x01
 53e:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <metal_sensor_item+0x1>
 542:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <metal_sensor_item>
 546:	80 81       	ld	r24, Z
 548:	91 81       	ldd	r25, Z+1	; 0x01
 54a:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <reflective_sensor_item+0x1>
 54e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <reflective_sensor_item>
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <STATE>
 558:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <item_waiting>
 55c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <OS1_flag>
 560:	81 11       	cpse	r24, r1
 562:	e1 de       	rcall	.-574    	; 0x326 <entry_sensor>
 564:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <FER_flag>
 568:	81 11       	cpse	r24, r1
 56a:	ec de       	rcall	.-552    	; 0x344 <metal_sensor>
 56c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <OS2_flag>
 570:	81 11       	cpse	r24, r1
 572:	fc de       	rcall	.-520    	; 0x36c <reflective_sensor>
 574:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <item_ready>
 578:	81 11       	cpse	r24, r1
 57a:	29 df       	rcall	.-430    	; 0x3ce <classify_item>
 57c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <OS3_flag>
 580:	88 23       	and	r24, r24
 582:	61 f3       	breq	.-40     	; 0x55c <main+0x50>
 584:	ad df       	rcall	.-166    	; 0x4e0 <exit_sensor>
 586:	ea cf       	rjmp	.-44     	; 0x55c <main+0x50>

00000588 <malloc>:
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	91 05       	cpc	r25, r1
 594:	10 f4       	brcc	.+4      	; 0x59a <malloc+0x12>
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <__flp>
 59e:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <__flp+0x1>
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	30 97       	sbiw	r30, 0x00	; 0
 5ac:	19 f1       	breq	.+70     	; 0x5f4 <malloc+0x6c>
 5ae:	40 81       	ld	r20, Z
 5b0:	51 81       	ldd	r21, Z+1	; 0x01
 5b2:	02 81       	ldd	r16, Z+2	; 0x02
 5b4:	13 81       	ldd	r17, Z+3	; 0x03
 5b6:	48 17       	cp	r20, r24
 5b8:	59 07       	cpc	r21, r25
 5ba:	c8 f0       	brcs	.+50     	; 0x5ee <malloc+0x66>
 5bc:	84 17       	cp	r24, r20
 5be:	95 07       	cpc	r25, r21
 5c0:	69 f4       	brne	.+26     	; 0x5dc <malloc+0x54>
 5c2:	10 97       	sbiw	r26, 0x00	; 0
 5c4:	31 f0       	breq	.+12     	; 0x5d2 <malloc+0x4a>
 5c6:	12 96       	adiw	r26, 0x02	; 2
 5c8:	0c 93       	st	X, r16
 5ca:	12 97       	sbiw	r26, 0x02	; 2
 5cc:	13 96       	adiw	r26, 0x03	; 3
 5ce:	1c 93       	st	X, r17
 5d0:	27 c0       	rjmp	.+78     	; 0x620 <malloc+0x98>
 5d2:	00 93 57 01 	sts	0x0157, r16	; 0x800157 <__flp>
 5d6:	10 93 58 01 	sts	0x0158, r17	; 0x800158 <__flp+0x1>
 5da:	22 c0       	rjmp	.+68     	; 0x620 <malloc+0x98>
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <malloc+0x60>
 5e2:	42 17       	cp	r20, r18
 5e4:	53 07       	cpc	r21, r19
 5e6:	18 f4       	brcc	.+6      	; 0x5ee <malloc+0x66>
 5e8:	9a 01       	movw	r18, r20
 5ea:	bd 01       	movw	r22, r26
 5ec:	ef 01       	movw	r28, r30
 5ee:	df 01       	movw	r26, r30
 5f0:	f8 01       	movw	r30, r16
 5f2:	db cf       	rjmp	.-74     	; 0x5aa <malloc+0x22>
 5f4:	21 15       	cp	r18, r1
 5f6:	31 05       	cpc	r19, r1
 5f8:	f9 f0       	breq	.+62     	; 0x638 <malloc+0xb0>
 5fa:	28 1b       	sub	r18, r24
 5fc:	39 0b       	sbc	r19, r25
 5fe:	24 30       	cpi	r18, 0x04	; 4
 600:	31 05       	cpc	r19, r1
 602:	80 f4       	brcc	.+32     	; 0x624 <malloc+0x9c>
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	9b 81       	ldd	r25, Y+3	; 0x03
 608:	61 15       	cp	r22, r1
 60a:	71 05       	cpc	r23, r1
 60c:	21 f0       	breq	.+8      	; 0x616 <malloc+0x8e>
 60e:	fb 01       	movw	r30, r22
 610:	93 83       	std	Z+3, r25	; 0x03
 612:	82 83       	std	Z+2, r24	; 0x02
 614:	04 c0       	rjmp	.+8      	; 0x61e <malloc+0x96>
 616:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <__flp+0x1>
 61a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <__flp>
 61e:	fe 01       	movw	r30, r28
 620:	32 96       	adiw	r30, 0x02	; 2
 622:	44 c0       	rjmp	.+136    	; 0x6ac <malloc+0x124>
 624:	fe 01       	movw	r30, r28
 626:	e2 0f       	add	r30, r18
 628:	f3 1f       	adc	r31, r19
 62a:	81 93       	st	Z+, r24
 62c:	91 93       	st	Z+, r25
 62e:	22 50       	subi	r18, 0x02	; 2
 630:	31 09       	sbc	r19, r1
 632:	39 83       	std	Y+1, r19	; 0x01
 634:	28 83       	st	Y, r18
 636:	3a c0       	rjmp	.+116    	; 0x6ac <malloc+0x124>
 638:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <__brkval>
 63c:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <__brkval+0x1>
 640:	23 2b       	or	r18, r19
 642:	41 f4       	brne	.+16     	; 0x654 <malloc+0xcc>
 644:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 648:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 64c:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <__brkval+0x1>
 650:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <__brkval>
 654:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 658:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 65c:	21 15       	cp	r18, r1
 65e:	31 05       	cpc	r19, r1
 660:	41 f4       	brne	.+16     	; 0x672 <malloc+0xea>
 662:	2d b7       	in	r18, 0x3d	; 61
 664:	3e b7       	in	r19, 0x3e	; 62
 666:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 66a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 66e:	24 1b       	sub	r18, r20
 670:	35 0b       	sbc	r19, r21
 672:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <__brkval>
 676:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <__brkval+0x1>
 67a:	e2 17       	cp	r30, r18
 67c:	f3 07       	cpc	r31, r19
 67e:	a0 f4       	brcc	.+40     	; 0x6a8 <malloc+0x120>
 680:	2e 1b       	sub	r18, r30
 682:	3f 0b       	sbc	r19, r31
 684:	28 17       	cp	r18, r24
 686:	39 07       	cpc	r19, r25
 688:	78 f0       	brcs	.+30     	; 0x6a8 <malloc+0x120>
 68a:	ac 01       	movw	r20, r24
 68c:	4e 5f       	subi	r20, 0xFE	; 254
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	24 17       	cp	r18, r20
 692:	35 07       	cpc	r19, r21
 694:	48 f0       	brcs	.+18     	; 0x6a8 <malloc+0x120>
 696:	4e 0f       	add	r20, r30
 698:	5f 1f       	adc	r21, r31
 69a:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <__brkval+0x1>
 69e:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <__brkval>
 6a2:	81 93       	st	Z+, r24
 6a4:	91 93       	st	Z+, r25
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <malloc+0x124>
 6a8:	e0 e0       	ldi	r30, 0x00	; 0
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	cf 01       	movw	r24, r30
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <free>:
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	09 f4       	brne	.+2      	; 0x6c2 <free+0xa>
 6c0:	81 c0       	rjmp	.+258    	; 0x7c4 <free+0x10c>
 6c2:	fc 01       	movw	r30, r24
 6c4:	32 97       	sbiw	r30, 0x02	; 2
 6c6:	13 82       	std	Z+3, r1	; 0x03
 6c8:	12 82       	std	Z+2, r1	; 0x02
 6ca:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <__flp>
 6ce:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <__flp+0x1>
 6d2:	10 97       	sbiw	r26, 0x00	; 0
 6d4:	81 f4       	brne	.+32     	; 0x6f6 <free+0x3e>
 6d6:	20 81       	ld	r18, Z
 6d8:	31 81       	ldd	r19, Z+1	; 0x01
 6da:	82 0f       	add	r24, r18
 6dc:	93 1f       	adc	r25, r19
 6de:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <__brkval>
 6e2:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <__brkval+0x1>
 6e6:	28 17       	cp	r18, r24
 6e8:	39 07       	cpc	r19, r25
 6ea:	51 f5       	brne	.+84     	; 0x740 <free+0x88>
 6ec:	f0 93 56 01 	sts	0x0156, r31	; 0x800156 <__brkval+0x1>
 6f0:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <__brkval>
 6f4:	67 c0       	rjmp	.+206    	; 0x7c4 <free+0x10c>
 6f6:	ed 01       	movw	r28, r26
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	ce 17       	cp	r28, r30
 6fe:	df 07       	cpc	r29, r31
 700:	40 f4       	brcc	.+16     	; 0x712 <free+0x5a>
 702:	4a 81       	ldd	r20, Y+2	; 0x02
 704:	5b 81       	ldd	r21, Y+3	; 0x03
 706:	9e 01       	movw	r18, r28
 708:	41 15       	cp	r20, r1
 70a:	51 05       	cpc	r21, r1
 70c:	f1 f0       	breq	.+60     	; 0x74a <free+0x92>
 70e:	ea 01       	movw	r28, r20
 710:	f5 cf       	rjmp	.-22     	; 0x6fc <free+0x44>
 712:	d3 83       	std	Z+3, r29	; 0x03
 714:	c2 83       	std	Z+2, r28	; 0x02
 716:	40 81       	ld	r20, Z
 718:	51 81       	ldd	r21, Z+1	; 0x01
 71a:	84 0f       	add	r24, r20
 71c:	95 1f       	adc	r25, r21
 71e:	c8 17       	cp	r28, r24
 720:	d9 07       	cpc	r29, r25
 722:	59 f4       	brne	.+22     	; 0x73a <free+0x82>
 724:	88 81       	ld	r24, Y
 726:	99 81       	ldd	r25, Y+1	; 0x01
 728:	84 0f       	add	r24, r20
 72a:	95 1f       	adc	r25, r21
 72c:	02 96       	adiw	r24, 0x02	; 2
 72e:	91 83       	std	Z+1, r25	; 0x01
 730:	80 83       	st	Z, r24
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	9b 81       	ldd	r25, Y+3	; 0x03
 736:	93 83       	std	Z+3, r25	; 0x03
 738:	82 83       	std	Z+2, r24	; 0x02
 73a:	21 15       	cp	r18, r1
 73c:	31 05       	cpc	r19, r1
 73e:	29 f4       	brne	.+10     	; 0x74a <free+0x92>
 740:	f0 93 58 01 	sts	0x0158, r31	; 0x800158 <__flp+0x1>
 744:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <__flp>
 748:	3d c0       	rjmp	.+122    	; 0x7c4 <free+0x10c>
 74a:	e9 01       	movw	r28, r18
 74c:	fb 83       	std	Y+3, r31	; 0x03
 74e:	ea 83       	std	Y+2, r30	; 0x02
 750:	49 91       	ld	r20, Y+
 752:	59 91       	ld	r21, Y+
 754:	c4 0f       	add	r28, r20
 756:	d5 1f       	adc	r29, r21
 758:	ec 17       	cp	r30, r28
 75a:	fd 07       	cpc	r31, r29
 75c:	61 f4       	brne	.+24     	; 0x776 <free+0xbe>
 75e:	80 81       	ld	r24, Z
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	84 0f       	add	r24, r20
 764:	95 1f       	adc	r25, r21
 766:	02 96       	adiw	r24, 0x02	; 2
 768:	e9 01       	movw	r28, r18
 76a:	99 83       	std	Y+1, r25	; 0x01
 76c:	88 83       	st	Y, r24
 76e:	82 81       	ldd	r24, Z+2	; 0x02
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	9b 83       	std	Y+3, r25	; 0x03
 774:	8a 83       	std	Y+2, r24	; 0x02
 776:	e0 e0       	ldi	r30, 0x00	; 0
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	12 96       	adiw	r26, 0x02	; 2
 77c:	8d 91       	ld	r24, X+
 77e:	9c 91       	ld	r25, X
 780:	13 97       	sbiw	r26, 0x03	; 3
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	19 f0       	breq	.+6      	; 0x78c <free+0xd4>
 786:	fd 01       	movw	r30, r26
 788:	dc 01       	movw	r26, r24
 78a:	f7 cf       	rjmp	.-18     	; 0x77a <free+0xc2>
 78c:	8d 91       	ld	r24, X+
 78e:	9c 91       	ld	r25, X
 790:	11 97       	sbiw	r26, 0x01	; 1
 792:	9d 01       	movw	r18, r26
 794:	2e 5f       	subi	r18, 0xFE	; 254
 796:	3f 4f       	sbci	r19, 0xFF	; 255
 798:	82 0f       	add	r24, r18
 79a:	93 1f       	adc	r25, r19
 79c:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <__brkval>
 7a0:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <__brkval+0x1>
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	69 f4       	brne	.+26     	; 0x7c4 <free+0x10c>
 7aa:	30 97       	sbiw	r30, 0x00	; 0
 7ac:	29 f4       	brne	.+10     	; 0x7b8 <free+0x100>
 7ae:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__flp+0x1>
 7b2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__flp>
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <free+0x104>
 7b8:	13 82       	std	Z+3, r1	; 0x03
 7ba:	12 82       	std	Z+2, r1	; 0x02
 7bc:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <__brkval+0x1>
 7c0:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <__brkval>
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <_exit>:
 7ca:	f8 94       	cli

000007cc <__stop_program>:
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <__stop_program>
