
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000896  0000092a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080010e  0080010e  00000938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a63  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9d  00000000  00000000  00002563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c02  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00004004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000925  00000000  00000000  00004404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3c  00000000  00000000  00004d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	be c0       	rjmp	.+380    	; 0x182 <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	9c c2       	rjmp	.+1336   	; 0x546 <__vector_3>
   e:	00 00       	nop
  10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	94 c0       	rjmp	.+296    	; 0x16e <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	82 c0       	rjmp	.+260    	; 0x15a <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 e9       	ldi	r30, 0x96	; 150
  ac:	f8 e0       	ldi	r31, 0x08	; 8
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 30       	cpi	r26, 0x0E	; 14
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ae e0       	ldi	r26, 0x0E	; 14
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 34       	cpi	r26, 0x41	; 65
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	74 d2       	rcall	.+1256   	; 0x5b8 <main>
  d0:	e0 c3       	rjmp	.+1984   	; 0x892 <_exit>

000000d2 <__bad_interrupt>:
  d2:	c2 c0       	rjmp	.+388    	; 0x258 <__vector_default>

000000d4 <initQueue>:
	return *(q->head);
}//firstValue

item lastValue(queue* q){
	return *(q->tail);
}//lastValue
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	bb d2       	rcall	.+1398   	; 0x650 <malloc>
  da:	fc 01       	movw	r30, r24
  dc:	11 82       	std	Z+1, r1	; 0x01
  de:	10 82       	st	Z, r1
  e0:	13 82       	std	Z+3, r1	; 0x03
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	08 95       	ret

000000e6 <enqueue>:
  e6:	fc 01       	movw	r30, r24
  e8:	a2 81       	ldd	r26, Z+2	; 0x02
  ea:	b3 81       	ldd	r27, Z+3	; 0x03
  ec:	10 97       	sbiw	r26, 0x00	; 0
  ee:	39 f0       	breq	.+14     	; 0xfe <enqueue+0x18>
  f0:	17 96       	adiw	r26, 0x07	; 7
  f2:	7c 93       	st	X, r23
  f4:	6e 93       	st	-X, r22
  f6:	16 97       	sbiw	r26, 0x06	; 6
  f8:	73 83       	std	Z+3, r23	; 0x03
  fa:	62 83       	std	Z+2, r22	; 0x02
  fc:	08 95       	ret
  fe:	71 83       	std	Z+1, r23	; 0x01
 100:	60 83       	st	Z, r22
 102:	73 83       	std	Z+3, r23	; 0x03
 104:	62 83       	std	Z+2, r22	; 0x02
 106:	08 95       	ret

00000108 <dequeue>:
 108:	dc 01       	movw	r26, r24
 10a:	ed 91       	ld	r30, X+
 10c:	fc 91       	ld	r31, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	30 97       	sbiw	r30, 0x00	; 0
 112:	39 f0       	breq	.+14     	; 0x122 <dequeue+0x1a>
 114:	86 81       	ldd	r24, Z+6	; 0x06
 116:	97 81       	ldd	r25, Z+7	; 0x07
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	9c 93       	st	X, r25
 11c:	8e 93       	st	-X, r24
 11e:	89 2b       	or	r24, r25
 120:	21 f4       	brne	.+8      	; 0x12a <dequeue+0x22>
 122:	13 96       	adiw	r26, 0x03	; 3
 124:	1c 92       	st	X, r1
 126:	1e 92       	st	-X, r1
 128:	12 97       	sbiw	r26, 0x02	; 2
 12a:	cf 01       	movw	r24, r30
 12c:	08 95       	ret

0000012e <clearQueue>:

/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
void clearQueue(queue* q){
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	item *temp;
	
	while (q->head != NULL){
 134:	88 81       	ld	r24, Y
 136:	99 81       	ldd	r25, Y+1	; 0x01
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	51 f0       	breq	.+20     	; 0x150 <clearQueue+0x22>
		temp = q->head;
		q->head = q->head->next;
 13c:	fc 01       	movw	r30, r24
 13e:	26 81       	ldd	r18, Z+6	; 0x06
 140:	37 81       	ldd	r19, Z+7	; 0x07
 142:	39 83       	std	Y+1, r19	; 0x01
		free(temp);
 144:	28 83       	st	Y, r18
* INPUT: the pointers to the head and the tail
*/
void clearQueue(queue* q){
	item *temp;
	
	while (q->head != NULL){
 146:	1c d3       	rcall	.+1592   	; 0x780 <free>
 148:	88 81       	ld	r24, Y
 14a:	99 81       	ldd	r25, Y+1	; 0x01
 14c:	00 97       	sbiw	r24, 0x00	; 0
		temp = q->head;
		q->head = q->head->next;
		free(temp);
	}/*while*/

	q->tail = NULL;		
 14e:	b1 f7       	brne	.-20     	; 0x13c <clearQueue+0xe>
 150:	1b 82       	std	Y+3, r1	; 0x03
	return;
}//clearQueue
 152:	1a 82       	std	Y+2, r1	; 0x02
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <__vector_21>:
void exit_sensor(){
	OS3_flag = 0;
	// Show sensor triggered
	//PORTC |= 0x80;
	// Move item to sorted queue
	enqueue(sortedList, dequeue(classifiedList));
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_17>:
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_1>:
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	88 b9       	out	0x08, r24	; 8
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <OS1_flag>
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_4>:
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	47 9a       	sbi	0x08, 7	; 8
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <__vector_29>:
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
 1de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <reflective_present>
 1e2:	88 23       	and	r24, r24
 1e4:	61 f1       	breq	.+88     	; 0x23e <__vector_29+0x7a>
 1e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_result+0x1>
 1f0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_result>
 1f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_result>
 1f8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_result+0x1>
 1fc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 200:	98 2f       	mov	r25, r24
 202:	88 27       	eor	r24, r24
 204:	82 2b       	or	r24, r18
 206:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_result+0x1>
 20a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_result>
 20e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ADC_result>
 212:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <ADC_result+0x1>
 216:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_lowest_val>
 21a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ADC_lowest_val+0x1>
 21e:	28 17       	cp	r18, r24
 220:	39 07       	cpc	r19, r25
 222:	40 f4       	brcc	.+16     	; 0x234 <__vector_29+0x70>
 224:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_result>
 228:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADC_result+0x1>
 22c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_lowest_val+0x1>
 230:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_lowest_val>
 234:	ea e7       	ldi	r30, 0x7A	; 122
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	80 83       	st	Z, r24
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0b be       	out	0x3b, r0	; 59
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_default>:
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <init_interrupts>:
 26c:	82 e9       	ldi	r24, 0x92	; 146
 26e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 272:	8d b3       	in	r24, 0x1d	; 29
 274:	8d 63       	ori	r24, 0x3D	; 61
 276:	8d bb       	out	0x1d, r24	; 29
 278:	08 95       	ret

0000027a <init_timer0_pwm>:
 27a:	84 b5       	in	r24, 0x24	; 36
 27c:	83 68       	ori	r24, 0x83	; 131
 27e:	84 bd       	out	0x24, r24	; 36
 280:	85 b5       	in	r24, 0x25	; 37
 282:	82 60       	ori	r24, 0x02	; 2
 284:	85 bd       	out	0x25, r24	; 37
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	87 bd       	out	0x27, r24	; 39
 28a:	08 95       	ret

0000028c <init_motor>:
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	85 b9       	out	0x05, r24	; 5
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	87 bd       	out	0x27, r24	; 39
 294:	08 95       	ret

00000296 <init_ADC>:
 296:	ec e7       	ldi	r30, 0x7C	; 124
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	80 83       	st	Z, r24
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	88 60       	ori	r24, 0x08	; 8
 2b4:	80 83       	st	Z, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	80 83       	st	Z, r24
 2bc:	08 95       	ret

000002be <init_stepper>:
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	81 b9       	out	0x01, r24	; 1
 2c2:	85 e3       	ldi	r24, 0x35	; 53
 2c4:	82 b9       	out	0x02, r24	; 2
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <motor_position+0x1>
 2ce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <motor_position>
 2d2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <stepper_on+0x1>
 2d6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <stepper_on>
 2da:	08 95       	ret

000002dc <mTimer>:
 2dc:	ac 01       	movw	r20, r24
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	90 81       	ld	r25, Z
 2e4:	91 60       	ori	r25, 0x01	; 1
 2e6:	90 83       	st	Z, r25
 2e8:	90 81       	ld	r25, Z
 2ea:	98 60       	ori	r25, 0x08	; 8
 2ec:	90 83       	st	Z, r25
 2ee:	88 ee       	ldi	r24, 0xE8	; 232
 2f0:	93 e0       	ldi	r25, 0x03	; 3
 2f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 302:	b1 9a       	sbi	0x16, 1	; 22
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	05 c0       	rjmp	.+10     	; 0x314 <mTimer+0x38>
 30a:	b1 9b       	sbis	0x16, 1	; 22
 30c:	fe cf       	rjmp	.-4      	; 0x30a <mTimer+0x2e>
 30e:	b1 9a       	sbi	0x16, 1	; 22
 310:	2f 5f       	subi	r18, 0xFF	; 255
 312:	3f 4f       	sbci	r19, 0xFF	; 255
 314:	24 17       	cp	r18, r20
 316:	35 07       	cpc	r19, r21
 318:	1c f4       	brge	.+6      	; 0x320 <mTimer+0x44>
 31a:	b1 9b       	sbis	0x16, 1	; 22
 31c:	f6 cf       	rjmp	.-20     	; 0x30a <mTimer+0x2e>
 31e:	f7 cf       	rjmp	.-18     	; 0x30e <mTimer+0x32>
 320:	08 95       	ret

00000322 <display_reflective_reading>:
 322:	2b b1       	in	r18, 0x0b	; 11
 324:	2f 70       	andi	r18, 0x0F	; 15
 326:	2b b9       	out	0x0b, r18	; 11
 328:	9c 01       	movw	r18, r24
 32a:	33 70       	andi	r19, 0x03	; 3
 32c:	28 b9       	out	0x08, r18	; 8
 32e:	2b b1       	in	r18, 0x0b	; 11
 330:	ac 01       	movw	r20, r24
 332:	44 27       	eor	r20, r20
 334:	51 70       	andi	r21, 0x01	; 1
 336:	52 95       	swap	r21
 338:	42 95       	swap	r20
 33a:	4f 70       	andi	r20, 0x0F	; 15
 33c:	45 27       	eor	r20, r21
 33e:	5f 70       	andi	r21, 0x0F	; 15
 340:	45 27       	eor	r20, r21
 342:	88 27       	eor	r24, r24
 344:	92 70       	andi	r25, 0x02	; 2
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	84 0f       	add	r24, r20
 350:	82 2b       	or	r24, r18
 352:	8b b9       	out	0x0b, r24	; 11
 354:	08 95       	ret

00000356 <ADC_calibrate>:
 356:	2f 92       	push	r2
 358:	3f 92       	push	r3
 35a:	4f 92       	push	r4
 35c:	5f 92       	push	r5
 35e:	6f 92       	push	r6
 360:	7f 92       	push	r7
 362:	8f 92       	push	r8
 364:	9f 92       	push	r9
 366:	af 92       	push	r10
 368:	bf 92       	push	r11
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	64 97       	sbiw	r28, 0x14	; 20
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	81 2c       	mov	r8, r1
 38c:	91 2c       	mov	r9, r1
 38e:	0f 2e       	mov	r0, r31
 390:	cc 24       	eor	r12, r12
 392:	ca 94       	dec	r12
 394:	f3 e0       	ldi	r31, 0x03	; 3
 396:	df 2e       	mov	r13, r31
 398:	f0 2d       	mov	r31, r0
 39a:	22 24       	eor	r2, r2
 39c:	2a 94       	dec	r2
 39e:	5e 01       	movw	r10, r28
 3a0:	45 e1       	ldi	r20, 0x15	; 21
 3a2:	a4 0e       	add	r10, r20
 3a4:	b1 1c       	adc	r11, r1
 3a6:	68 94       	set
 3a8:	33 24       	eor	r3, r3
 3aa:	32 f8       	bld	r3, 2
 3ac:	81 c0       	rjmp	.+258    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 3ae:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <item_ready>
 3b2:	88 23       	and	r24, r24
 3b4:	e1 f3       	breq	.-8      	; 0x3ae <ADC_calibrate+0x58>
 3b6:	98 b9       	out	0x08, r25	; 8
 3b8:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ADC_lowest_val>
 3bc:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <ADC_lowest_val+0x1>
 3c0:	21 93       	st	Z+, r18
 3c2:	31 93       	st	Z+, r19
 3c4:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <ADC_lowest_val+0x1>
 3c8:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <ADC_lowest_val>
 3cc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <item_ready>
 3d0:	9f 5f       	subi	r25, 0xFF	; 255
 3d2:	9b 30       	cpi	r25, 0x0B	; 11
 3d4:	61 f7       	brne	.-40     	; 0x3ae <ADC_calibrate+0x58>
 3d6:	28 b8       	out	0x08, r2	; 8
 3d8:	15 b8       	out	0x05, r1	; 5
 3da:	84 e6       	ldi	r24, 0x64	; 100
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	7e df       	rcall	.-260    	; 0x2dc <mTimer>
 3e0:	09 81       	ldd	r16, Y+1	; 0x01
 3e2:	1a 81       	ldd	r17, Y+2	; 0x02
 3e4:	fe 01       	movw	r30, r28
 3e6:	33 96       	adiw	r30, 0x03	; 3
 3e8:	98 01       	movw	r18, r16
 3ea:	78 01       	movw	r14, r16
 3ec:	81 91       	ld	r24, Z+
 3ee:	91 91       	ld	r25, Z+
 3f0:	e8 16       	cp	r14, r24
 3f2:	f9 06       	cpc	r15, r25
 3f4:	28 f4       	brcc	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f6:	8f 3f       	cpi	r24, 0xFF	; 255
 3f8:	43 e0       	ldi	r20, 0x03	; 3
 3fa:	94 07       	cpc	r25, r20
 3fc:	09 f0       	breq	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	7c 01       	movw	r14, r24
 400:	80 17       	cp	r24, r16
 402:	91 07       	cpc	r25, r17
 404:	08 f4       	brcc	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	8c 01       	movw	r16, r24
 408:	28 0f       	add	r18, r24
 40a:	39 1f       	adc	r19, r25
 40c:	ea 15       	cp	r30, r10
 40e:	fb 05       	cpc	r31, r11
 410:	69 f7       	brne	.-38     	; 0x3ec <ADC_calibrate+0x96>
 412:	27 01       	movw	r4, r14
 414:	40 0e       	add	r4, r16
 416:	51 1e       	adc	r5, r17
 418:	56 94       	lsr	r5
 41a:	47 94       	ror	r4
 41c:	ad ec       	ldi	r26, 0xCD	; 205
 41e:	bc ec       	ldi	r27, 0xCC	; 204
 420:	08 d1       	rcall	.+528    	; 0x632 <__umulhisi3>
 422:	3c 01       	movw	r6, r24
 424:	76 94       	lsr	r7
 426:	67 94       	ror	r6
 428:	76 94       	lsr	r7
 42a:	67 94       	ror	r6
 42c:	76 94       	lsr	r7
 42e:	67 94       	ror	r6
 430:	f4 01       	movw	r30, r8
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	e7 5e       	subi	r30, 0xE7	; 231
 440:	fe 4f       	sbci	r31, 0xFE	; 254
 442:	11 83       	std	Z+1, r17	; 0x01
 444:	00 83       	st	Z, r16
 446:	f3 82       	std	Z+3, r15	; 0x03
 448:	e2 82       	std	Z+2, r14	; 0x02
 44a:	55 82       	std	Z+5, r5	; 0x05
 44c:	44 82       	std	Z+4, r4	; 0x04
 44e:	77 82       	std	Z+7, r7	; 0x07
 450:	66 82       	std	Z+6, r6	; 0x06
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	88 b9       	out	0x08, r24	; 8
 456:	88 ee       	ldi	r24, 0xE8	; 232
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	40 df       	rcall	.-384    	; 0x2dc <mTimer>
 45c:	c8 01       	movw	r24, r16
 45e:	61 df       	rcall	.-318    	; 0x322 <display_reflective_reading>
 460:	88 e5       	ldi	r24, 0x58	; 88
 462:	9b e1       	ldi	r25, 0x1B	; 27
 464:	3b df       	rcall	.-394    	; 0x2dc <mTimer>
 466:	42 e0       	ldi	r20, 0x02	; 2
 468:	48 b9       	out	0x08, r20	; 8
 46a:	88 ee       	ldi	r24, 0xE8	; 232
 46c:	93 e0       	ldi	r25, 0x03	; 3
 46e:	36 df       	rcall	.-404    	; 0x2dc <mTimer>
 470:	c7 01       	movw	r24, r14
 472:	57 df       	rcall	.-338    	; 0x322 <display_reflective_reading>
 474:	88 e5       	ldi	r24, 0x58	; 88
 476:	9b e1       	ldi	r25, 0x1B	; 27
 478:	31 df       	rcall	.-414    	; 0x2dc <mTimer>
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	88 b9       	out	0x08, r24	; 8
 47e:	88 ee       	ldi	r24, 0xE8	; 232
 480:	93 e0       	ldi	r25, 0x03	; 3
 482:	2c df       	rcall	.-424    	; 0x2dc <mTimer>
 484:	c2 01       	movw	r24, r4
 486:	4d df       	rcall	.-358    	; 0x322 <display_reflective_reading>
 488:	88 e5       	ldi	r24, 0x58	; 88
 48a:	9b e1       	ldi	r25, 0x1B	; 27
 48c:	27 df       	rcall	.-434    	; 0x2dc <mTimer>
 48e:	38 b8       	out	0x08, r3	; 8
 490:	88 ee       	ldi	r24, 0xE8	; 232
 492:	93 e0       	ldi	r25, 0x03	; 3
 494:	23 df       	rcall	.-442    	; 0x2dc <mTimer>
 496:	c3 01       	movw	r24, r6
 498:	44 df       	rcall	.-376    	; 0x322 <display_reflective_reading>
 49a:	88 e5       	ldi	r24, 0x58	; 88
 49c:	9b e1       	ldi	r25, 0x1B	; 27
 49e:	1e df       	rcall	.-452    	; 0x2dc <mTimer>
 4a0:	35 b8       	out	0x05, r3	; 5
 4a2:	4f ef       	ldi	r20, 0xFF	; 255
 4a4:	84 1a       	sub	r8, r20
 4a6:	94 0a       	sbc	r9, r20
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	88 16       	cp	r8, r24
 4ac:	91 04       	cpc	r9, r1
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b0:	fe 01       	movw	r30, r28
 4b2:	31 96       	adiw	r30, 0x01	; 1
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	7b cf       	rjmp	.-266    	; 0x3ae <ADC_calibrate+0x58>
 4b8:	64 96       	adiw	r28, 0x14	; 20
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	bf 90       	pop	r11
 4d6:	af 90       	pop	r10
 4d8:	9f 90       	pop	r9
 4da:	8f 90       	pop	r8
 4dc:	7f 90       	pop	r7
 4de:	6f 90       	pop	r6
 4e0:	5f 90       	pop	r5
 4e2:	4f 90       	pop	r4
 4e4:	3f 90       	pop	r3
 4e6:	2f 90       	pop	r2
 4e8:	08 95       	ret

000004ea <reflective_sensor>:
 4ea:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <OS2_flag>
 4ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <reflective_present>
 4f2:	88 23       	and	r24, r24
 4f4:	31 f0       	breq	.+12     	; 0x502 <reflective_sensor+0x18>
 4f6:	ea e7       	ldi	r30, 0x7A	; 122
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	80 83       	st	Z, r24
 500:	08 95       	ret
 502:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <STATE>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	d1 f4       	brne	.+52     	; 0x53e <reflective_sensor+0x54>
 50a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <entryList>
 50e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <entryList+0x1>
 512:	fa dd       	rcall	.-1036   	; 0x108 <dequeue>
 514:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <ADC_lowest_val>
 518:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <ADC_lowest_val+0x1>
 51c:	fc 01       	movw	r30, r24
 51e:	32 83       	std	Z+2, r19	; 0x02
 520:	21 83       	std	Z+1, r18	; 0x01
 522:	22 e0       	ldi	r18, 0x02	; 2
 524:	24 83       	std	Z+4, r18	; 0x04
 526:	bc 01       	movw	r22, r24
 528:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <reflectiveList>
 52c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <reflectiveList+0x1>
 530:	da dd       	rcall	.-1100   	; 0xe6 <enqueue>
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_lowest_val+0x1>
 53a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_lowest_val>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <item_ready>
 544:	08 95       	ret

00000546 <__vector_3>:
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	0b b6       	in	r0, 0x3b	; 59
 552:	0f 92       	push	r0
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	46 9a       	sbi	0x08, 6	; 8
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <OS2_flag>
 574:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <reflective_present>
 578:	88 23       	and	r24, r24
 57a:	19 f0       	breq	.+6      	; 0x582 <__vector_3+0x3c>
 57c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <reflective_present>
 580:	03 c0       	rjmp	.+6      	; 0x588 <__vector_3+0x42>
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <reflective_present>
 588:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <STATE>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	09 f4       	brne	.+2      	; 0x592 <__vector_3+0x4c>
 590:	ac df       	rcall	.-168    	; 0x4ea <reflective_sensor>
 592:	ff 91       	pop	r31
 594:	ef 91       	pop	r30
 596:	bf 91       	pop	r27
 598:	af 91       	pop	r26
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	7f 91       	pop	r23
 5a0:	6f 91       	pop	r22
 5a2:	5f 91       	pop	r21
 5a4:	4f 91       	pop	r20
 5a6:	3f 91       	pop	r19
 5a8:	2f 91       	pop	r18
 5aa:	0f 90       	pop	r0
 5ac:	0b be       	out	0x3b, r0	; 59
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 5b8:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 5ba:	8f e8       	ldi	r24, 0x8F	; 143
 5bc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 5be:	8f ef       	ldi	r24, 0xFF	; 255
 5c0:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 5c2:	80 ef       	ldi	r24, 0xF0	; 240
 5c4:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 5c6:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 5c8:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 5ca:	18 b8       	out	0x08, r1	; 8
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
	init_motor();
	init_interrupts();
 5cc:	f8 94       	cli
 5ce:	63 de       	rcall	.-826    	; 0x296 <init_ADC>
	init_stepper();
 5d0:	54 de       	rcall	.-856    	; 0x27a <init_timer0_pwm>
	entryList = initQueue();
 5d2:	5c de       	rcall	.-840    	; 0x28c <init_motor>
 5d4:	4b de       	rcall	.-874    	; 0x26c <init_interrupts>
 5d6:	73 de       	rcall	.-794    	; 0x2be <init_stepper>
 5d8:	7d dd       	rcall	.-1286   	; 0xd4 <initQueue>
	reflectiveList = initQueue();
 5da:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <entryList+0x1>
 5de:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <entryList>
 5e2:	78 dd       	rcall	.-1296   	; 0xd4 <initQueue>
	classifiedList = initQueue();
 5e4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <reflectiveList+0x1>
 5e8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <reflectiveList>
 5ec:	73 dd       	rcall	.-1306   	; 0xd4 <initQueue>
	sortedList = initQueue();
 5ee:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <classifiedList+0x1>
 5f2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <classifiedList>
 5f6:	6e dd       	rcall	.-1316   	; 0xd4 <initQueue>
	sei();
 5f8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <sortedList+0x1>
			stepper_position((sortedList->tail->type)+1);
		}
			
	}//while
	*/
	clearQueue(entryList);
 5fc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <sortedList>
 600:	78 94       	sei
 602:	a9 de       	rcall	.-686    	; 0x356 <ADC_calibrate>
 604:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <entryList>
	clearQueue(reflectiveList);
 608:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <entryList+0x1>
 60c:	90 dd       	rcall	.-1248   	; 0x12e <clearQueue>
 60e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <reflectiveList>
	clearQueue(classifiedList);
 612:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <reflectiveList+0x1>
 616:	8b dd       	rcall	.-1258   	; 0x12e <clearQueue>
 618:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <classifiedList>
	clearQueue(sortedList);
 61c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <classifiedList+0x1>
 620:	86 dd       	rcall	.-1268   	; 0x12e <clearQueue>
 622:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <sortedList>
 626:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <sortedList+0x1>
	
	
	return 0;
}//main
 62a:	81 dd       	rcall	.-1278   	; 0x12e <clearQueue>
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	08 95       	ret

00000632 <__umulhisi3>:
 632:	a2 9f       	mul	r26, r18
 634:	b0 01       	movw	r22, r0
 636:	b3 9f       	mul	r27, r19
 638:	c0 01       	movw	r24, r0
 63a:	a3 9f       	mul	r26, r19
 63c:	70 0d       	add	r23, r0
 63e:	81 1d       	adc	r24, r1
 640:	11 24       	eor	r1, r1
 642:	91 1d       	adc	r25, r1
 644:	b2 9f       	mul	r27, r18
 646:	70 0d       	add	r23, r0
 648:	81 1d       	adc	r24, r1
 64a:	11 24       	eor	r1, r1
 64c:	91 1d       	adc	r25, r1
 64e:	08 95       	ret

00000650 <malloc>:
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	91 05       	cpc	r25, r1
 65c:	10 f4       	brcc	.+4      	; 0x662 <malloc+0x12>
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <__flp>
 666:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <__flp+0x1>
 66a:	20 e0       	ldi	r18, 0x00	; 0
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	a0 e0       	ldi	r26, 0x00	; 0
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	30 97       	sbiw	r30, 0x00	; 0
 674:	19 f1       	breq	.+70     	; 0x6bc <malloc+0x6c>
 676:	40 81       	ld	r20, Z
 678:	51 81       	ldd	r21, Z+1	; 0x01
 67a:	02 81       	ldd	r16, Z+2	; 0x02
 67c:	13 81       	ldd	r17, Z+3	; 0x03
 67e:	48 17       	cp	r20, r24
 680:	59 07       	cpc	r21, r25
 682:	c8 f0       	brcs	.+50     	; 0x6b6 <malloc+0x66>
 684:	84 17       	cp	r24, r20
 686:	95 07       	cpc	r25, r21
 688:	69 f4       	brne	.+26     	; 0x6a4 <malloc+0x54>
 68a:	10 97       	sbiw	r26, 0x00	; 0
 68c:	31 f0       	breq	.+12     	; 0x69a <malloc+0x4a>
 68e:	12 96       	adiw	r26, 0x02	; 2
 690:	0c 93       	st	X, r16
 692:	12 97       	sbiw	r26, 0x02	; 2
 694:	13 96       	adiw	r26, 0x03	; 3
 696:	1c 93       	st	X, r17
 698:	27 c0       	rjmp	.+78     	; 0x6e8 <malloc+0x98>
 69a:	00 93 3f 01 	sts	0x013F, r16	; 0x80013f <__flp>
 69e:	10 93 40 01 	sts	0x0140, r17	; 0x800140 <__flp+0x1>
 6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <malloc+0x98>
 6a4:	21 15       	cp	r18, r1
 6a6:	31 05       	cpc	r19, r1
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <malloc+0x60>
 6aa:	42 17       	cp	r20, r18
 6ac:	53 07       	cpc	r21, r19
 6ae:	18 f4       	brcc	.+6      	; 0x6b6 <malloc+0x66>
 6b0:	9a 01       	movw	r18, r20
 6b2:	bd 01       	movw	r22, r26
 6b4:	ef 01       	movw	r28, r30
 6b6:	df 01       	movw	r26, r30
 6b8:	f8 01       	movw	r30, r16
 6ba:	db cf       	rjmp	.-74     	; 0x672 <malloc+0x22>
 6bc:	21 15       	cp	r18, r1
 6be:	31 05       	cpc	r19, r1
 6c0:	f9 f0       	breq	.+62     	; 0x700 <malloc+0xb0>
 6c2:	28 1b       	sub	r18, r24
 6c4:	39 0b       	sbc	r19, r25
 6c6:	24 30       	cpi	r18, 0x04	; 4
 6c8:	31 05       	cpc	r19, r1
 6ca:	80 f4       	brcc	.+32     	; 0x6ec <malloc+0x9c>
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	9b 81       	ldd	r25, Y+3	; 0x03
 6d0:	61 15       	cp	r22, r1
 6d2:	71 05       	cpc	r23, r1
 6d4:	21 f0       	breq	.+8      	; 0x6de <malloc+0x8e>
 6d6:	fb 01       	movw	r30, r22
 6d8:	93 83       	std	Z+3, r25	; 0x03
 6da:	82 83       	std	Z+2, r24	; 0x02
 6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <malloc+0x96>
 6de:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <__flp+0x1>
 6e2:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <__flp>
 6e6:	fe 01       	movw	r30, r28
 6e8:	32 96       	adiw	r30, 0x02	; 2
 6ea:	44 c0       	rjmp	.+136    	; 0x774 <malloc+0x124>
 6ec:	fe 01       	movw	r30, r28
 6ee:	e2 0f       	add	r30, r18
 6f0:	f3 1f       	adc	r31, r19
 6f2:	81 93       	st	Z+, r24
 6f4:	91 93       	st	Z+, r25
 6f6:	22 50       	subi	r18, 0x02	; 2
 6f8:	31 09       	sbc	r19, r1
 6fa:	39 83       	std	Y+1, r19	; 0x01
 6fc:	28 83       	st	Y, r18
 6fe:	3a c0       	rjmp	.+116    	; 0x774 <malloc+0x124>
 700:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <__brkval>
 704:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <__brkval+0x1>
 708:	23 2b       	or	r18, r19
 70a:	41 f4       	brne	.+16     	; 0x71c <malloc+0xcc>
 70c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 710:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 714:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <__brkval+0x1>
 718:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <__brkval>
 71c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 720:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 724:	21 15       	cp	r18, r1
 726:	31 05       	cpc	r19, r1
 728:	41 f4       	brne	.+16     	; 0x73a <malloc+0xea>
 72a:	2d b7       	in	r18, 0x3d	; 61
 72c:	3e b7       	in	r19, 0x3e	; 62
 72e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 732:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 736:	24 1b       	sub	r18, r20
 738:	35 0b       	sbc	r19, r21
 73a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <__brkval>
 73e:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <__brkval+0x1>
 742:	e2 17       	cp	r30, r18
 744:	f3 07       	cpc	r31, r19
 746:	a0 f4       	brcc	.+40     	; 0x770 <malloc+0x120>
 748:	2e 1b       	sub	r18, r30
 74a:	3f 0b       	sbc	r19, r31
 74c:	28 17       	cp	r18, r24
 74e:	39 07       	cpc	r19, r25
 750:	78 f0       	brcs	.+30     	; 0x770 <malloc+0x120>
 752:	ac 01       	movw	r20, r24
 754:	4e 5f       	subi	r20, 0xFE	; 254
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	24 17       	cp	r18, r20
 75a:	35 07       	cpc	r19, r21
 75c:	48 f0       	brcs	.+18     	; 0x770 <malloc+0x120>
 75e:	4e 0f       	add	r20, r30
 760:	5f 1f       	adc	r21, r31
 762:	50 93 3e 01 	sts	0x013E, r21	; 0x80013e <__brkval+0x1>
 766:	40 93 3d 01 	sts	0x013D, r20	; 0x80013d <__brkval>
 76a:	81 93       	st	Z+, r24
 76c:	91 93       	st	Z+, r25
 76e:	02 c0       	rjmp	.+4      	; 0x774 <malloc+0x124>
 770:	e0 e0       	ldi	r30, 0x00	; 0
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	cf 01       	movw	r24, r30
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	08 95       	ret

00000780 <free>:
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	09 f4       	brne	.+2      	; 0x78a <free+0xa>
 788:	81 c0       	rjmp	.+258    	; 0x88c <free+0x10c>
 78a:	fc 01       	movw	r30, r24
 78c:	32 97       	sbiw	r30, 0x02	; 2
 78e:	13 82       	std	Z+3, r1	; 0x03
 790:	12 82       	std	Z+2, r1	; 0x02
 792:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <__flp>
 796:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <__flp+0x1>
 79a:	10 97       	sbiw	r26, 0x00	; 0
 79c:	81 f4       	brne	.+32     	; 0x7be <free+0x3e>
 79e:	20 81       	ld	r18, Z
 7a0:	31 81       	ldd	r19, Z+1	; 0x01
 7a2:	82 0f       	add	r24, r18
 7a4:	93 1f       	adc	r25, r19
 7a6:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <__brkval>
 7aa:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <__brkval+0x1>
 7ae:	28 17       	cp	r18, r24
 7b0:	39 07       	cpc	r19, r25
 7b2:	51 f5       	brne	.+84     	; 0x808 <free+0x88>
 7b4:	f0 93 3e 01 	sts	0x013E, r31	; 0x80013e <__brkval+0x1>
 7b8:	e0 93 3d 01 	sts	0x013D, r30	; 0x80013d <__brkval>
 7bc:	67 c0       	rjmp	.+206    	; 0x88c <free+0x10c>
 7be:	ed 01       	movw	r28, r26
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	ce 17       	cp	r28, r30
 7c6:	df 07       	cpc	r29, r31
 7c8:	40 f4       	brcc	.+16     	; 0x7da <free+0x5a>
 7ca:	4a 81       	ldd	r20, Y+2	; 0x02
 7cc:	5b 81       	ldd	r21, Y+3	; 0x03
 7ce:	9e 01       	movw	r18, r28
 7d0:	41 15       	cp	r20, r1
 7d2:	51 05       	cpc	r21, r1
 7d4:	f1 f0       	breq	.+60     	; 0x812 <free+0x92>
 7d6:	ea 01       	movw	r28, r20
 7d8:	f5 cf       	rjmp	.-22     	; 0x7c4 <free+0x44>
 7da:	d3 83       	std	Z+3, r29	; 0x03
 7dc:	c2 83       	std	Z+2, r28	; 0x02
 7de:	40 81       	ld	r20, Z
 7e0:	51 81       	ldd	r21, Z+1	; 0x01
 7e2:	84 0f       	add	r24, r20
 7e4:	95 1f       	adc	r25, r21
 7e6:	c8 17       	cp	r28, r24
 7e8:	d9 07       	cpc	r29, r25
 7ea:	59 f4       	brne	.+22     	; 0x802 <free+0x82>
 7ec:	88 81       	ld	r24, Y
 7ee:	99 81       	ldd	r25, Y+1	; 0x01
 7f0:	84 0f       	add	r24, r20
 7f2:	95 1f       	adc	r25, r21
 7f4:	02 96       	adiw	r24, 0x02	; 2
 7f6:	91 83       	std	Z+1, r25	; 0x01
 7f8:	80 83       	st	Z, r24
 7fa:	8a 81       	ldd	r24, Y+2	; 0x02
 7fc:	9b 81       	ldd	r25, Y+3	; 0x03
 7fe:	93 83       	std	Z+3, r25	; 0x03
 800:	82 83       	std	Z+2, r24	; 0x02
 802:	21 15       	cp	r18, r1
 804:	31 05       	cpc	r19, r1
 806:	29 f4       	brne	.+10     	; 0x812 <free+0x92>
 808:	f0 93 40 01 	sts	0x0140, r31	; 0x800140 <__flp+0x1>
 80c:	e0 93 3f 01 	sts	0x013F, r30	; 0x80013f <__flp>
 810:	3d c0       	rjmp	.+122    	; 0x88c <free+0x10c>
 812:	e9 01       	movw	r28, r18
 814:	fb 83       	std	Y+3, r31	; 0x03
 816:	ea 83       	std	Y+2, r30	; 0x02
 818:	49 91       	ld	r20, Y+
 81a:	59 91       	ld	r21, Y+
 81c:	c4 0f       	add	r28, r20
 81e:	d5 1f       	adc	r29, r21
 820:	ec 17       	cp	r30, r28
 822:	fd 07       	cpc	r31, r29
 824:	61 f4       	brne	.+24     	; 0x83e <free+0xbe>
 826:	80 81       	ld	r24, Z
 828:	91 81       	ldd	r25, Z+1	; 0x01
 82a:	84 0f       	add	r24, r20
 82c:	95 1f       	adc	r25, r21
 82e:	02 96       	adiw	r24, 0x02	; 2
 830:	e9 01       	movw	r28, r18
 832:	99 83       	std	Y+1, r25	; 0x01
 834:	88 83       	st	Y, r24
 836:	82 81       	ldd	r24, Z+2	; 0x02
 838:	93 81       	ldd	r25, Z+3	; 0x03
 83a:	9b 83       	std	Y+3, r25	; 0x03
 83c:	8a 83       	std	Y+2, r24	; 0x02
 83e:	e0 e0       	ldi	r30, 0x00	; 0
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	12 96       	adiw	r26, 0x02	; 2
 844:	8d 91       	ld	r24, X+
 846:	9c 91       	ld	r25, X
 848:	13 97       	sbiw	r26, 0x03	; 3
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	19 f0       	breq	.+6      	; 0x854 <free+0xd4>
 84e:	fd 01       	movw	r30, r26
 850:	dc 01       	movw	r26, r24
 852:	f7 cf       	rjmp	.-18     	; 0x842 <free+0xc2>
 854:	8d 91       	ld	r24, X+
 856:	9c 91       	ld	r25, X
 858:	11 97       	sbiw	r26, 0x01	; 1
 85a:	9d 01       	movw	r18, r26
 85c:	2e 5f       	subi	r18, 0xFE	; 254
 85e:	3f 4f       	sbci	r19, 0xFF	; 255
 860:	82 0f       	add	r24, r18
 862:	93 1f       	adc	r25, r19
 864:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <__brkval>
 868:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <__brkval+0x1>
 86c:	28 17       	cp	r18, r24
 86e:	39 07       	cpc	r19, r25
 870:	69 f4       	brne	.+26     	; 0x88c <free+0x10c>
 872:	30 97       	sbiw	r30, 0x00	; 0
 874:	29 f4       	brne	.+10     	; 0x880 <free+0x100>
 876:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__flp+0x1>
 87a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <__flp>
 87e:	02 c0       	rjmp	.+4      	; 0x884 <free+0x104>
 880:	13 82       	std	Z+3, r1	; 0x03
 882:	12 82       	std	Z+2, r1	; 0x02
 884:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <__brkval+0x1>
 888:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <__brkval>
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
