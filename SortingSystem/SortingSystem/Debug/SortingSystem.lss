
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000c6e  00000d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800116  00800116  00000d18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd3  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0b  00000000  00000000  00002ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee3  00000000  00000000  00003bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00004adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a77  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e07  00000000  00000000  00005a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000680e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	f2 c0       	rjmp	.+484    	; 0x1ea <__vector_1>
   6:	00 00       	nop
   8:	ff c0       	rjmp	.+510    	; 0x208 <__vector_2>
   a:	00 00       	nop
   c:	49 c3       	rjmp	.+1682   	; 0x6a0 <__vector_3>
   e:	00 00       	nop
  10:	0a c1       	rjmp	.+532    	; 0x226 <__vector_4>
  12:	00 00       	nop
  14:	17 c1       	rjmp	.+558    	; 0x244 <__vector_5>
  16:	00 00       	nop
  18:	37 c1       	rjmp	.+622    	; 0x288 <__vector_6>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	aa c0       	rjmp	.+340    	; 0x1aa <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c1       	rjmp	.+566    	; 0x2ac <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9e c0       	rjmp	.+316    	; 0x1be <__vector_32>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee e6       	ldi	r30, 0x6E	; 110
  ac:	fc e0       	ldi	r31, 0x0C	; 12
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 31       	cpi	r26, 0x16	; 22
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a6 e1       	ldi	r26, 0x16	; 22
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a2 36       	cpi	r26, 0x62	; 98
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	ce d3       	rcall	.+1948   	; 0x86c <main>
  d0:	cc c5       	rjmp	.+2968   	; 0xc6a <_exit>

000000d2 <__bad_interrupt>:
  d2:	2f c1       	rjmp	.+606    	; 0x332 <__vector_default>

000000d4 <initItem>:
}

char itemType(item* i){
	i->type = i->metal + i->reflective;
	return (i->type);
}
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	a7 d4       	rcall	.+2382   	; 0xa28 <malloc>
  da:	fc 01       	movw	r30, r24
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
  e0:	10 82       	st	Z, r1
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
  e6:	13 82       	std	Z+3, r1	; 0x03
  e8:	14 82       	std	Z+4, r1	; 0x04
  ea:	15 82       	std	Z+5, r1	; 0x05
  ec:	08 95       	ret

000000ee <initQueue>:
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a d4       	rcall	.+2356   	; 0xa28 <malloc>
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
  fe:	08 95       	ret

00000100 <enqueue>:
 100:	fc 01       	movw	r30, r24
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:
 122:	dc 01       	movw	r26, r24
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	39 f0       	breq	.+14     	; 0x13c <dequeue+0x1a>
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
 138:	89 2b       	or	r24, r25
 13a:	21 f4       	brne	.+8      	; 0x144 <dequeue+0x22>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <clearQueue>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	88 81       	ld	r24, Y
 150:	99 81       	ldd	r25, Y+1	; 0x01
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	51 f0       	breq	.+20     	; 0x16a <clearQueue+0x22>
 156:	fc 01       	movw	r30, r24
 158:	26 81       	ldd	r18, Z+6	; 0x06
 15a:	37 81       	ldd	r19, Z+7	; 0x07
 15c:	39 83       	std	Y+1, r19	; 0x01
 15e:	28 83       	st	Y, r18
 160:	fb d4       	rcall	.+2550   	; 0xb58 <free>
 162:	88 81       	ld	r24, Y
 164:	99 81       	ldd	r25, Y+1	; 0x01
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	b1 f7       	brne	.-20     	; 0x156 <clearQueue+0xe>
 16a:	1b 82       	std	Y+3, r1	; 0x03
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <isEmpty>:
/**************************************************************************************
* DESC: Checks to see whether the queue is empty or not
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
int isEmpty(queue* q){
 174:	fc 01       	movw	r30, r24
	return(q->head == NULL);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	20 81       	ld	r18, Z
 17c:	31 81       	ldd	r19, Z+1	; 0x01
 17e:	23 2b       	or	r18, r19
 180:	11 f0       	breq	.+4      	; 0x186 <isEmpty+0x12>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
}//isEmpty
 186:	08 95       	ret

00000188 <size>:
/**************************************************************************************
* DESC: Obtains the number of links in the queue
* RETURNS: An integer with the number of links in the queue
*/
int size(queue* q){
	item* temp = q->head;			
 188:	dc 01       	movw	r26, r24
 18a:	ed 91       	ld	r30, X+
 18c:	fc 91       	ld	r31, X
	int numItems = 0;

	while(temp != NULL){
 18e:	30 97       	sbiw	r30, 0x00	; 0
 190:	49 f0       	breq	.+18     	; 0x1a4 <size+0x1c>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
		numItems++;
 196:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
 198:	06 80       	ldd	r0, Z+6	; 0x06
 19a:	f7 81       	ldd	r31, Z+7	; 0x07
 19c:	e0 2d       	mov	r30, r0
*/
int size(queue* q){
	item* temp = q->head;			
	int numItems = 0;

	while(temp != NULL){
 19e:	30 97       	sbiw	r30, 0x00	; 0
 1a0:	d1 f7       	brne	.-12     	; 0x196 <size+0xe>
 1a2:	08 95       	ret
* DESC: Obtains the number of links in the queue
* RETURNS: An integer with the number of links in the queue
*/
int size(queue* q){
	item* temp = q->head;			
	int numItems = 0;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
		numItems++;
		temp = temp->next;
	}/*while*/
	
	return(numItems);
}//size
 1a8:	08 95       	ret

000001aa <__vector_21>:
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_32>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timer3_flag>
 1d0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <processing_for_ramp_down>
 1d4:	88 23       	and	r24, r24
 1d6:	19 f0       	breq	.+6      	; 0x1de <__vector_32+0x20>
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_1>:
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <OS1_flag>
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_2>:
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <FER_flag>
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_4>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <OS3_flag>
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_5>:
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	8f 93       	push	r24
 250:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	49 f4       	brne	.+18     	; 0x26a <__vector_5+0x26>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <STATE_TRANSITION>
 25e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <display_index>
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
 268:	09 c0       	rjmp	.+18     	; 0x27c <__vector_5+0x38>
 26a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	29 f4       	brne	.+10     	; 0x27c <__vector_5+0x38>
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <STATE_TRANSITION>
 278:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_6>:
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	8f 93       	push	r24
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <STATE_TRANSITION>
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <processing_for_ramp_down>
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_29>:
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	0b b6       	in	r0, 0x3b	; 59
 2b8:	0f 92       	push	r0
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
 2c6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <reflective_present>
 2ca:	88 23       	and	r24, r24
 2cc:	29 f1       	breq	.+74     	; 0x318 <__vector_29+0x6c>
 2ce:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	98 2f       	mov	r25, r24
 2da:	88 27       	eor	r24, r24
 2dc:	82 0f       	add	r24, r18
 2de:	91 1d       	adc	r25, r1
 2e0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <ADC_result+0x1>
 2e4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ADC_result>
 2e8:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <ADC_result>
 2ec:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <ADC_result+0x1>
 2f0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ADC_lowest_val>
 2f4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ADC_lowest_val+0x1>
 2f8:	28 17       	cp	r18, r24
 2fa:	39 07       	cpc	r19, r25
 2fc:	40 f4       	brcc	.+16     	; 0x30e <__vector_29+0x62>
 2fe:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ADC_result>
 302:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ADC_result+0x1>
 306:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <ADC_lowest_val+0x1>
 30a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ADC_lowest_val>
 30e:	ea e7       	ldi	r30, 0x7A	; 122
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	80 64       	ori	r24, 0x40	; 64
 316:	80 83       	st	Z, r24
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0b be       	out	0x3b, r0	; 59
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_default>:
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <init_interrupts>:
 346:	8a e9       	ldi	r24, 0x9A	; 154
 348:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 352:	8d b3       	in	r24, 0x1d	; 29
 354:	8f 63       	ori	r24, 0x3F	; 63
 356:	8d bb       	out	0x1d, r24	; 29
 358:	08 95       	ret

0000035a <init_timer0_pwm>:
 35a:	84 b5       	in	r24, 0x24	; 36
 35c:	83 68       	ori	r24, 0x83	; 131
 35e:	84 bd       	out	0x24, r24	; 36
 360:	85 b5       	in	r24, 0x25	; 37
 362:	82 60       	ori	r24, 0x02	; 2
 364:	85 bd       	out	0x25, r24	; 37
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	87 bd       	out	0x27, r24	; 39
 36a:	08 95       	ret

0000036c <init_timer3>:
 36c:	e1 e9       	ldi	r30, 0x91	; 145
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	8b 60       	ori	r24, 0x0B	; 11
 374:	80 83       	st	Z, r24
 376:	e1 e7       	ldi	r30, 0x71	; 113
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	80 83       	st	Z, r24
 380:	c1 9a       	sbi	0x18, 1	; 24
 382:	80 81       	ld	r24, Z
 384:	8d 7f       	andi	r24, 0xFD	; 253
 386:	80 83       	st	Z, r24
 388:	08 95       	ret

0000038a <start_timer3>:
 38a:	9c 01       	movw	r18, r24
 38c:	e1 e7       	ldi	r30, 0x71	; 113
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	90 81       	ld	r25, Z
 392:	92 60       	ori	r25, 0x02	; 2
 394:	90 83       	st	Z, r25
 396:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 39a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 39e:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 3a2:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 3a6:	08 95       	ret

000003a8 <init_motor>:
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	85 b9       	out	0x05, r24	; 5
 3ac:	80 e6       	ldi	r24, 0x60	; 96
 3ae:	87 bd       	out	0x27, r24	; 39
 3b0:	08 95       	ret

000003b2 <init_ADC>:
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	93 e0       	ldi	r25, 0x03	; 3
 3b6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <ADC_result+0x1>
 3ba:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <ADC_result>
 3be:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <ADC_lowest_val+0x1>
 3c2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ADC_lowest_val>
 3c6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <reflective_present>
 3ca:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <item_ready>
 3ce:	ec e7       	ldi	r30, 0x7C	; 124
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	80 83       	st	Z, r24
 3d8:	ea e7       	ldi	r30, 0x7A	; 122
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	80 83       	st	Z, r24
 3e2:	80 81       	ld	r24, Z
 3e4:	81 60       	ori	r24, 0x01	; 1
 3e6:	80 83       	st	Z, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	80 83       	st	Z, r24
 3ee:	80 81       	ld	r24, Z
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	80 83       	st	Z, r24
 3f4:	08 95       	ret

000003f6 <init_stepper>:
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	81 b9       	out	0x01, r24	; 1
 3fa:	85 e3       	ldi	r24, 0x35	; 53
 3fc:	82 b9       	out	0x02, r24	; 2
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <motor_position+0x1>
 406:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <motor_position>
 40a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <stepper_on+0x1>
 40e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <stepper_on>
 412:	08 95       	ret

00000414 <mTimer>:
 414:	ac 01       	movw	r20, r24
 416:	e1 e8       	ldi	r30, 0x81	; 129
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	90 81       	ld	r25, Z
 41c:	91 60       	ori	r25, 0x01	; 1
 41e:	90 83       	st	Z, r25
 420:	90 81       	ld	r25, Z
 422:	98 60       	ori	r25, 0x08	; 8
 424:	90 83       	st	Z, r25
 426:	88 ee       	ldi	r24, 0xE8	; 232
 428:	93 e0       	ldi	r25, 0x03	; 3
 42a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 42e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 432:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 436:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 43a:	b1 9a       	sbi	0x16, 1	; 22
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	05 c0       	rjmp	.+10     	; 0x44c <mTimer+0x38>
 442:	b1 9b       	sbis	0x16, 1	; 22
 444:	fe cf       	rjmp	.-4      	; 0x442 <mTimer+0x2e>
 446:	b1 9a       	sbi	0x16, 1	; 22
 448:	2f 5f       	subi	r18, 0xFF	; 255
 44a:	3f 4f       	sbci	r19, 0xFF	; 255
 44c:	24 17       	cp	r18, r20
 44e:	35 07       	cpc	r19, r21
 450:	1c f4       	brge	.+6      	; 0x458 <mTimer+0x44>
 452:	b1 9b       	sbis	0x16, 1	; 22
 454:	f6 cf       	rjmp	.-20     	; 0x442 <mTimer+0x2e>
 456:	f7 cf       	rjmp	.-18     	; 0x446 <mTimer+0x32>
 458:	08 95       	ret

0000045a <stepper_rotate>:
 45a:	8f 92       	push	r8
 45c:	9f 92       	push	r9
 45e:	af 92       	push	r10
 460:	bf 92       	push	r11
 462:	cf 92       	push	r12
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	18 16       	cp	r1, r24
 474:	19 06       	cpc	r1, r25
 476:	0c f0       	brlt	.+2      	; 0x47a <stepper_rotate+0x20>
 478:	80 c0       	rjmp	.+256    	; 0x57a <stepper_rotate+0x120>
 47a:	7b 01       	movw	r14, r22
 47c:	8c 01       	movw	r16, r24
 47e:	c0 e0       	ldi	r28, 0x00	; 0
 480:	d0 e0       	ldi	r29, 0x00	; 0
 482:	0f 2e       	mov	r0, r31
 484:	fe e0       	ldi	r31, 0x0E	; 14
 486:	cf 2e       	mov	r12, r31
 488:	d1 2c       	mov	r13, r1
 48a:	f0 2d       	mov	r31, r0
 48c:	0f 2e       	mov	r0, r31
 48e:	f6 e3       	ldi	r31, 0x36	; 54
 490:	8f 2e       	mov	r8, r31
 492:	f0 2d       	mov	r31, r0
 494:	0f 2e       	mov	r0, r31
 496:	fe e2       	ldi	r31, 0x2E	; 46
 498:	9f 2e       	mov	r9, r31
 49a:	f0 2d       	mov	r31, r0
 49c:	0f 2e       	mov	r0, r31
 49e:	fd e2       	ldi	r31, 0x2D	; 45
 4a0:	af 2e       	mov	r10, r31
 4a2:	f0 2d       	mov	r31, r0
 4a4:	0f 2e       	mov	r0, r31
 4a6:	f5 e3       	ldi	r31, 0x35	; 53
 4a8:	bf 2e       	mov	r11, r31
 4aa:	f0 2d       	mov	r31, r0
 4ac:	84 e0       	ldi	r24, 0x04	; 4
 4ae:	e8 16       	cp	r14, r24
 4b0:	f1 04       	cpc	r15, r1
 4b2:	91 f4       	brne	.+36     	; 0x4d8 <stepper_rotate+0x7e>
 4b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 4b8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	83 70       	andi	r24, 0x03	; 3
 4c0:	90 78       	andi	r25, 0x80	; 128
 4c2:	99 23       	and	r25, r25
 4c4:	24 f4       	brge	.+8      	; 0x4ce <stepper_rotate+0x74>
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	8c 6f       	ori	r24, 0xFC	; 252
 4ca:	9f 6f       	ori	r25, 0xFF	; 255
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 4d2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 4d6:	15 c0       	rjmp	.+42     	; 0x502 <stepper_rotate+0xa8>
 4d8:	88 e0       	ldi	r24, 0x08	; 8
 4da:	e8 16       	cp	r14, r24
 4dc:	f1 04       	cpc	r15, r1
 4de:	89 f4       	brne	.+34     	; 0x502 <stepper_rotate+0xa8>
 4e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 4e4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	83 70       	andi	r24, 0x03	; 3
 4ec:	90 78       	andi	r25, 0x80	; 128
 4ee:	99 23       	and	r25, r25
 4f0:	24 f4       	brge	.+8      	; 0x4fa <stepper_rotate+0xa0>
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	8c 6f       	ori	r24, 0xFC	; 252
 4f6:	9f 6f       	ori	r25, 0xFF	; 255
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 4fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 502:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end>
 506:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__data_end+0x1>
 50a:	21 30       	cpi	r18, 0x01	; 1
 50c:	31 05       	cpc	r19, r1
 50e:	79 f0       	breq	.+30     	; 0x52e <stepper_rotate+0xd4>
 510:	1c f4       	brge	.+6      	; 0x518 <stepper_rotate+0xbe>
 512:	23 2b       	or	r18, r19
 514:	41 f0       	breq	.+16     	; 0x526 <stepper_rotate+0xcc>
 516:	16 c0       	rjmp	.+44     	; 0x544 <stepper_rotate+0xea>
 518:	22 30       	cpi	r18, 0x02	; 2
 51a:	31 05       	cpc	r19, r1
 51c:	61 f0       	breq	.+24     	; 0x536 <stepper_rotate+0xdc>
 51e:	23 30       	cpi	r18, 0x03	; 3
 520:	31 05       	cpc	r19, r1
 522:	69 f0       	breq	.+26     	; 0x53e <stepper_rotate+0xe4>
 524:	0f c0       	rjmp	.+30     	; 0x544 <stepper_rotate+0xea>
 526:	b2 b8       	out	0x02, r11	; 2
 528:	c6 01       	movw	r24, r12
 52a:	74 df       	rcall	.-280    	; 0x414 <mTimer>
 52c:	0b c0       	rjmp	.+22     	; 0x544 <stepper_rotate+0xea>
 52e:	82 b8       	out	0x02, r8	; 2
 530:	c6 01       	movw	r24, r12
 532:	70 df       	rcall	.-288    	; 0x414 <mTimer>
 534:	07 c0       	rjmp	.+14     	; 0x544 <stepper_rotate+0xea>
 536:	92 b8       	out	0x02, r9	; 2
 538:	c6 01       	movw	r24, r12
 53a:	6c df       	rcall	.-296    	; 0x414 <mTimer>
 53c:	03 c0       	rjmp	.+6      	; 0x544 <stepper_rotate+0xea>
 53e:	a2 b8       	out	0x02, r10	; 2
 540:	c6 01       	movw	r24, r12
 542:	68 df       	rcall	.-304    	; 0x414 <mTimer>
 544:	c8 30       	cpi	r28, 0x08	; 8
 546:	d1 05       	cpc	r29, r1
 548:	3c f4       	brge	.+14     	; 0x558 <stepper_rotate+0xfe>
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	c8 16       	cp	r12, r24
 54e:	d1 04       	cpc	r13, r1
 550:	1c f0       	brlt	.+6      	; 0x558 <stepper_rotate+0xfe>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	c8 1a       	sub	r12, r24
 556:	d1 08       	sbc	r13, r1
 558:	c8 01       	movw	r24, r16
 55a:	8c 1b       	sub	r24, r28
 55c:	9d 0b       	sbc	r25, r29
 55e:	09 97       	sbiw	r24, 0x09	; 9
 560:	3c f4       	brge	.+14     	; 0x570 <stepper_rotate+0x116>
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	c8 16       	cp	r12, r24
 566:	d1 04       	cpc	r13, r1
 568:	1c f4       	brge	.+6      	; 0x570 <stepper_rotate+0x116>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	c8 1a       	sub	r12, r24
 56e:	d8 0a       	sbc	r13, r24
 570:	21 96       	adiw	r28, 0x01	; 1
 572:	0c 17       	cp	r16, r28
 574:	1d 07       	cpc	r17, r29
 576:	09 f0       	breq	.+2      	; 0x57a <stepper_rotate+0x120>
 578:	99 cf       	rjmp	.-206    	; 0x4ac <stepper_rotate+0x52>
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	bf 90       	pop	r11
 58c:	af 90       	pop	r10
 58e:	9f 90       	pop	r9
 590:	8f 90       	pop	r8
 592:	08 95       	ret

00000594 <stepper_position>:
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	c8 2f       	mov	r28, r24
 59a:	d0 e0       	ldi	r29, 0x00	; 0
 59c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <motor_position>
 5a0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <motor_position+0x1>
 5a4:	9e 01       	movw	r18, r28
 5a6:	28 1b       	sub	r18, r24
 5a8:	39 0b       	sbc	r19, r25
 5aa:	21 30       	cpi	r18, 0x01	; 1
 5ac:	31 05       	cpc	r19, r1
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <stepper_position+0x24>
 5b0:	2d 3f       	cpi	r18, 0xFD	; 253
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	38 07       	cpc	r19, r24
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <stepper_position+0x30>
 5b8:	64 e0       	ldi	r22, 0x04	; 4
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	82 e3       	ldi	r24, 0x32	; 50
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	4c df       	rcall	.-360    	; 0x45a <stepper_rotate>
 5c2:	18 c0       	rjmp	.+48     	; 0x5f4 <stepper_position+0x60>
 5c4:	2f 3f       	cpi	r18, 0xFF	; 255
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	38 07       	cpc	r19, r24
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <stepper_position+0x3e>
 5cc:	23 30       	cpi	r18, 0x03	; 3
 5ce:	31 05       	cpc	r19, r1
 5d0:	31 f4       	brne	.+12     	; 0x5de <stepper_position+0x4a>
 5d2:	68 e0       	ldi	r22, 0x08	; 8
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	82 e3       	ldi	r24, 0x32	; 50
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	3f df       	rcall	.-386    	; 0x45a <stepper_rotate>
 5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <stepper_position+0x60>
 5de:	22 30       	cpi	r18, 0x02	; 2
 5e0:	31 05       	cpc	r19, r1
 5e2:	19 f0       	breq	.+6      	; 0x5ea <stepper_position+0x56>
 5e4:	2e 3f       	cpi	r18, 0xFE	; 254
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	29 f4       	brne	.+10     	; 0x5f4 <stepper_position+0x60>
 5ea:	64 e0       	ldi	r22, 0x04	; 4
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	84 e6       	ldi	r24, 0x64	; 100
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	33 df       	rcall	.-410    	; 0x45a <stepper_rotate>
 5f4:	d0 93 30 01 	sts	0x0130, r29	; 0x800130 <motor_position+0x1>
 5f8:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <motor_position>
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <entry_sensor>:
 602:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <OS1_flag>
 606:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <item_number>
 60a:	8f 5f       	subi	r24, 0xFF	; 255
 60c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <item_number>
 610:	61 dd       	rcall	.-1342   	; 0xd4 <initItem>
 612:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <item_number>
 616:	fc 01       	movw	r30, r24
 618:	25 83       	std	Z+5, r18	; 0x05
 61a:	21 e0       	ldi	r18, 0x01	; 1
 61c:	24 83       	std	Z+4, r18	; 0x04
 61e:	bc 01       	movw	r22, r24
 620:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <entryList>
 624:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <entryList+0x1>
 628:	6b cd       	rjmp	.-1322   	; 0x100 <enqueue>
 62a:	08 95       	ret

0000062c <metal_sensor>:
 62c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <FER_flag>
 630:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <entryList>
 634:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <entryList+0x1>
 638:	02 80       	ldd	r0, Z+2	; 0x02
 63a:	f3 81       	ldd	r31, Z+3	; 0x03
 63c:	e0 2d       	mov	r30, r0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	80 83       	st	Z, r24
 642:	08 95       	ret

00000644 <reflective_sensor>:
 644:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <OS2_flag>
 648:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <reflective_present>
 64c:	88 23       	and	r24, r24
 64e:	31 f0       	breq	.+12     	; 0x65c <reflective_sensor+0x18>
 650:	ea e7       	ldi	r30, 0x7A	; 122
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	80 64       	ori	r24, 0x40	; 64
 658:	80 83       	st	Z, r24
 65a:	08 95       	ret
 65c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	d1 f4       	brne	.+52     	; 0x698 <reflective_sensor+0x54>
 664:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <entryList>
 668:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <entryList+0x1>
 66c:	5a dd       	rcall	.-1356   	; 0x122 <dequeue>
 66e:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <ADC_lowest_val>
 672:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <ADC_lowest_val+0x1>
 676:	fc 01       	movw	r30, r24
 678:	32 83       	std	Z+2, r19	; 0x02
 67a:	21 83       	std	Z+1, r18	; 0x01
 67c:	22 e0       	ldi	r18, 0x02	; 2
 67e:	24 83       	std	Z+4, r18	; 0x04
 680:	bc 01       	movw	r22, r24
 682:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <reflectiveList>
 686:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <reflectiveList+0x1>
 68a:	3a dd       	rcall	.-1420   	; 0x100 <enqueue>
 68c:	8f ef       	ldi	r24, 0xFF	; 255
 68e:	93 e0       	ldi	r25, 0x03	; 3
 690:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <ADC_lowest_val+0x1>
 694:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ADC_lowest_val>
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <item_ready>
 69e:	08 95       	ret

000006a0 <__vector_3>:
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	0b b6       	in	r0, 0x3b	; 59
 6ac:	0f 92       	push	r0
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <OS2_flag>
 6cc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <reflective_present>
 6d0:	88 23       	and	r24, r24
 6d2:	19 f0       	breq	.+6      	; 0x6da <__vector_3+0x3a>
 6d4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <reflective_present>
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <__vector_3+0x40>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <reflective_present>
 6e0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	09 f4       	brne	.+2      	; 0x6ea <__vector_3+0x4a>
 6e8:	ad df       	rcall	.-166    	; 0x644 <reflective_sensor>
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	bf 91       	pop	r27
 6f0:	af 91       	pop	r26
 6f2:	9f 91       	pop	r25
 6f4:	8f 91       	pop	r24
 6f6:	7f 91       	pop	r23
 6f8:	6f 91       	pop	r22
 6fa:	5f 91       	pop	r21
 6fc:	4f 91       	pop	r20
 6fe:	3f 91       	pop	r19
 700:	2f 91       	pop	r18
 702:	0f 90       	pop	r0
 704:	0b be       	out	0x3b, r0	; 59
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <classify_item>:
 710:	cf 93       	push	r28
 712:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <item_ready>
 716:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <reflectiveList>
 71a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <reflectiveList+0x1>
 71e:	01 dd       	rcall	.-1534   	; 0x122 <dequeue>
 720:	fc 01       	movw	r30, r24
 722:	81 81       	ldd	r24, Z+1	; 0x01
 724:	92 81       	ldd	r25, Z+2	; 0x02
 726:	20 81       	ld	r18, Z
 728:	21 11       	cpse	r18, r1
 72a:	34 c0       	rjmp	.+104    	; 0x794 <classify_item+0x84>
 72c:	ae e0       	ldi	r26, 0x0E	; 14
 72e:	b1 e0       	ldi	r27, 0x01	; 1
 730:	4d 91       	ld	r20, X+
 732:	5c 91       	ld	r21, X
 734:	11 97       	sbiw	r26, 0x01	; 1
 736:	12 96       	adiw	r26, 0x02	; 2
 738:	2d 91       	ld	r18, X+
 73a:	3c 91       	ld	r19, X
 73c:	13 97       	sbiw	r26, 0x03	; 3
 73e:	48 1b       	sub	r20, r24
 740:	59 0b       	sbc	r21, r25
 742:	ba 01       	movw	r22, r20
 744:	22 f4       	brpl	.+8      	; 0x74e <classify_item+0x3e>
 746:	66 27       	eor	r22, r22
 748:	77 27       	eor	r23, r23
 74a:	64 1b       	sub	r22, r20
 74c:	75 0b       	sbc	r23, r21
 74e:	a9 01       	movw	r20, r18
 750:	48 1b       	sub	r20, r24
 752:	59 0b       	sbc	r21, r25
 754:	9a 01       	movw	r18, r20
 756:	22 f4       	brpl	.+8      	; 0x760 <classify_item+0x50>
 758:	22 27       	eor	r18, r18
 75a:	33 27       	eor	r19, r19
 75c:	24 1b       	sub	r18, r20
 75e:	35 0b       	sbc	r19, r21
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	50 f4       	brcc	.+20     	; 0x77a <classify_item+0x6a>
 766:	a9 e1       	ldi	r26, 0x19	; 25
 768:	b1 e0       	ldi	r27, 0x01	; 1
 76a:	8d 91       	ld	r24, X+
 76c:	9c 91       	ld	r25, X
 76e:	11 97       	sbiw	r26, 0x01	; 1
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	8d 93       	st	X+, r24
 774:	9c 93       	st	X, r25
 776:	c0 e0       	ldi	r28, 0x00	; 0
 778:	48 c0       	rjmp	.+144    	; 0x80a <classify_item+0xfa>
 77a:	a9 e1       	ldi	r26, 0x19	; 25
 77c:	b1 e0       	ldi	r27, 0x01	; 1
 77e:	14 96       	adiw	r26, 0x04	; 4
 780:	8d 91       	ld	r24, X+
 782:	9c 91       	ld	r25, X
 784:	15 97       	sbiw	r26, 0x05	; 5
 786:	01 96       	adiw	r24, 0x01	; 1
 788:	15 96       	adiw	r26, 0x05	; 5
 78a:	9c 93       	st	X, r25
 78c:	8e 93       	st	-X, r24
 78e:	14 97       	sbiw	r26, 0x04	; 4
 790:	c2 e0       	ldi	r28, 0x02	; 2
 792:	3b c0       	rjmp	.+118    	; 0x80a <classify_item+0xfa>
 794:	21 30       	cpi	r18, 0x01	; 1
 796:	c1 f5       	brne	.+112    	; 0x808 <classify_item+0xf8>
 798:	ae e0       	ldi	r26, 0x0E	; 14
 79a:	b1 e0       	ldi	r27, 0x01	; 1
 79c:	14 96       	adiw	r26, 0x04	; 4
 79e:	4d 91       	ld	r20, X+
 7a0:	5c 91       	ld	r21, X
 7a2:	15 97       	sbiw	r26, 0x05	; 5
 7a4:	16 96       	adiw	r26, 0x06	; 6
 7a6:	2d 91       	ld	r18, X+
 7a8:	3c 91       	ld	r19, X
 7aa:	17 97       	sbiw	r26, 0x07	; 7
 7ac:	48 1b       	sub	r20, r24
 7ae:	59 0b       	sbc	r21, r25
 7b0:	ba 01       	movw	r22, r20
 7b2:	22 f4       	brpl	.+8      	; 0x7bc <classify_item+0xac>
 7b4:	66 27       	eor	r22, r22
 7b6:	77 27       	eor	r23, r23
 7b8:	64 1b       	sub	r22, r20
 7ba:	75 0b       	sbc	r23, r21
 7bc:	a9 01       	movw	r20, r18
 7be:	48 1b       	sub	r20, r24
 7c0:	59 0b       	sbc	r21, r25
 7c2:	9a 01       	movw	r18, r20
 7c4:	22 f4       	brpl	.+8      	; 0x7ce <classify_item+0xbe>
 7c6:	22 27       	eor	r18, r18
 7c8:	33 27       	eor	r19, r19
 7ca:	24 1b       	sub	r18, r20
 7cc:	35 0b       	sbc	r19, r21
 7ce:	62 17       	cp	r22, r18
 7d0:	73 07       	cpc	r23, r19
 7d2:	68 f4       	brcc	.+26     	; 0x7ee <classify_item+0xde>
 7d4:	a9 e1       	ldi	r26, 0x19	; 25
 7d6:	b1 e0       	ldi	r27, 0x01	; 1
 7d8:	12 96       	adiw	r26, 0x02	; 2
 7da:	8d 91       	ld	r24, X+
 7dc:	9c 91       	ld	r25, X
 7de:	13 97       	sbiw	r26, 0x03	; 3
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	13 96       	adiw	r26, 0x03	; 3
 7e4:	9c 93       	st	X, r25
 7e6:	8e 93       	st	-X, r24
 7e8:	12 97       	sbiw	r26, 0x02	; 2
 7ea:	c1 e0       	ldi	r28, 0x01	; 1
 7ec:	0e c0       	rjmp	.+28     	; 0x80a <classify_item+0xfa>
 7ee:	a9 e1       	ldi	r26, 0x19	; 25
 7f0:	b1 e0       	ldi	r27, 0x01	; 1
 7f2:	16 96       	adiw	r26, 0x06	; 6
 7f4:	8d 91       	ld	r24, X+
 7f6:	9c 91       	ld	r25, X
 7f8:	17 97       	sbiw	r26, 0x07	; 7
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	17 96       	adiw	r26, 0x07	; 7
 7fe:	9c 93       	st	X, r25
 800:	8e 93       	st	-X, r24
 802:	16 97       	sbiw	r26, 0x06	; 6
 804:	c3 e0       	ldi	r28, 0x03	; 3
 806:	01 c0       	rjmp	.+2      	; 0x80a <classify_item+0xfa>
 808:	c0 e0       	ldi	r28, 0x00	; 0
 80a:	c3 83       	std	Z+3, r28	; 0x03
 80c:	83 e0       	ldi	r24, 0x03	; 3
 80e:	84 83       	std	Z+4, r24	; 0x04
 810:	a9 e1       	ldi	r26, 0x19	; 25
 812:	b1 e0       	ldi	r27, 0x01	; 1
 814:	18 96       	adiw	r26, 0x08	; 8
 816:	8d 91       	ld	r24, X+
 818:	9c 91       	ld	r25, X
 81a:	19 97       	sbiw	r26, 0x09	; 9
 81c:	01 96       	adiw	r24, 0x01	; 1
 81e:	19 96       	adiw	r26, 0x09	; 9
 820:	9c 93       	st	X, r25
 822:	8e 93       	st	-X, r24
 824:	18 97       	sbiw	r26, 0x08	; 8
 826:	bf 01       	movw	r22, r30
 828:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <classifiedList>
 82c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <classifiedList+0x1>
 830:	67 dc       	rcall	.-1842   	; 0x100 <enqueue>
 832:	c8 b9       	out	0x08, r28	; 8
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <exit_sensor>:
 838:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <OS3_flag>
 83c:	15 b8       	out	0x05, r1	; 5
 83e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <classifiedList>
 842:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <classifiedList+0x1>
 846:	6d dc       	rcall	.-1830   	; 0x122 <dequeue>
 848:	bc 01       	movw	r22, r24
 84a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <sortedList>
 84e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <sortedList+0x1>
 852:	56 dc       	rcall	.-1876   	; 0x100 <enqueue>
 854:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <sortedList>
 858:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <sortedList+0x1>
 85c:	02 80       	ldd	r0, Z+2	; 0x02
 85e:	f3 81       	ldd	r31, Z+3	; 0x03
 860:	e0 2d       	mov	r30, r0
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	8f 5f       	subi	r24, 0xFF	; 255
 866:	96 de       	rcall	.-724    	; 0x594 <stepper_position>
 868:	9f cd       	rjmp	.-1218   	; 0x3a8 <init_motor>
 86a:	08 95       	ret

0000086c <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 86c:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 86e:	8f e8       	ldi	r24, 0x8F	; 143
 870:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 876:	80 ef       	ldi	r24, 0xF0	; 240
 878:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 87a:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 87c:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 87e:	18 b8       	out	0x08, r1	; 8
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
	init_timer3();
	init_motor();
 880:	f8 94       	cli
	init_interrupts();
 882:	97 dd       	rcall	.-1234   	; 0x3b2 <init_ADC>
 884:	6a dd       	rcall	.-1324   	; 0x35a <init_timer0_pwm>
	init_stepper();
 886:	72 dd       	rcall	.-1308   	; 0x36c <init_timer3>
		stepper_position(stepper_pos[i]);
		mTimer(1000);
		i++;
	}*/

	entryList = initQueue();
 888:	8f dd       	rcall	.-1250   	; 0x3a8 <init_motor>
 88a:	5d dd       	rcall	.-1350   	; 0x346 <init_interrupts>
 88c:	b4 dd       	rcall	.-1176   	; 0x3f6 <init_stepper>
 88e:	78 94       	sei
 890:	2e dc       	rcall	.-1956   	; 0xee <initQueue>
	reflectiveList = initQueue();
 892:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <entryList+0x1>
 896:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <entryList>
 89a:	29 dc       	rcall	.-1966   	; 0xee <initQueue>
	classifiedList = initQueue();
 89c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <reflectiveList+0x1>
 8a0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <reflectiveList>
 8a4:	24 dc       	rcall	.-1976   	; 0xee <initQueue>
 8a6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <classifiedList+0x1>
	sortedList = initQueue();
 8aa:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <classifiedList>
 8ae:	1f dc       	rcall	.-1986   	; 0xee <initQueue>
 8b0:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <sortedList+0x1>

	STATE = OPERATIONAL;
 8b4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <sortedList>
 8b8:	82 e0       	ldi	r24, 0x02	; 2
	item_waiting = 0;
 8ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <STATE>
	item_number = 0;
 8be:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <item_waiting>
			//PORTC = 0x00;
			
			// Entered OPERATIONAL from PAUSED
			if (STATE_TRANSITION == OPERATIONAL_ENTERED) {
				// start motor
				PORTB =  CW;
 8c2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <item_number>
				
				// Disable timer
				TIMSK3 &= 0xFD;
 8c6:	14 e0       	ldi	r17, 0x04	; 4
			
			STATE_TRANSITION = NONE;
			//ramp_down_entered = 0;
			
			if (STATE == PAUSED) {
				STATE = OPERATIONAL;
 8c8:	c1 e7       	ldi	r28, 0x71	; 113
	// Main Program
	while (1)
	{
				
		// When we trigger ramp down button stay in OPERATIONAL for time of half conveyor
		if (STATE_TRANSITION == RAMP_DOWN_ENTERED) {
 8ca:	d0 e0       	ldi	r29, 0x00	; 0
 8cc:	02 e0       	ldi	r16, 0x02	; 2
 8ce:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <STATE_TRANSITION>
			// testing
			//PORTC |= 0x02;
			
			STATE_TRANSITION = NONE;
 8d2:	83 30       	cpi	r24, 0x03	; 3
			//ramp_down_entered = 0;
			
			if (STATE == PAUSED) {
 8d4:	69 f4       	brne	.+26     	; 0x8f0 <main+0x84>
 8d6:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <STATE_TRANSITION>
				STATE = OPERATIONAL;
 8da:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
			}
			
			start_timer3(timer3_1sec);		// Good for MOTOR_SPEED = 0x30
 8de:	83 30       	cpi	r24, 0x03	; 3
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <main+0x7a>
 8e2:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <STATE>
 8e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer3_1sec>
		}
		
		if (STATE == OPERATIONAL || RAMP_DOWN) {
 8ea:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer3_1sec+0x1>
			//PORTC = 0x00;
			
			// Entered OPERATIONAL from PAUSED
			if (STATE_TRANSITION == OPERATIONAL_ENTERED) {
 8ee:	4d dd       	rcall	.-1382   	; 0x38a <start_timer3>
				// start motor
				PORTB =  CW;
				
				// Disable timer
				TIMSK3 &= 0xFD;
 8f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
			}	
			
			// Handle flags from sensors
			if(OS1_flag) 
 8f4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <STATE_TRANSITION>
				entry_sensor();
 8f8:	82 30       	cpi	r24, 0x02	; 2
			if(FER_flag) 
 8fa:	21 f4       	brne	.+8      	; 0x904 <main+0x98>
 8fc:	15 b9       	out	0x05, r17	; 5
				metal_sensor();
 8fe:	88 81       	ld	r24, Y
			if(OS2_flag) 
 900:	8d 7f       	andi	r24, 0xFD	; 253
 902:	88 83       	st	Y, r24
 904:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <OS1_flag>
				reflective_sensor();
 908:	81 11       	cpse	r24, r1
			if(item_ready) 
 90a:	7b de       	rcall	.-778    	; 0x602 <entry_sensor>
 90c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <FER_flag>
				classify_item();
 910:	81 11       	cpse	r24, r1
 912:	8c de       	rcall	.-744    	; 0x62c <metal_sensor>
			if(OS3_flag) 
 914:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <OS2_flag>
 918:	81 11       	cpse	r24, r1
				exit_sensor();	
 91a:	94 de       	rcall	.-728    	; 0x644 <reflective_sensor>
			
		}
		
		if (STATE == PAUSED) {
 91c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <item_ready>
 920:	81 11       	cpse	r24, r1
 922:	f6 de       	rcall	.-532    	; 0x710 <classify_item>
			// testing
			//PORTC = (size(classifiedList) << 6) + (size(reflectiveList) << 3) + size(entryList);

			
			// Check if just entering PAUSED
			if (STATE_TRANSITION == PAUSE_ENTERED) {
 924:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <OS3_flag>
 928:	81 11       	cpse	r24, r1
 92a:	86 df       	rcall	.-244    	; 0x838 <exit_sensor>
				//pause_entered = 0;
				STATE_TRANSITION = NONE;
 92c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
				
				// turn off motor
				PORTB =  0;
 930:	83 30       	cpi	r24, 0x03	; 3
				
				// start timer for 1 sec
				start_timer3(timer3_1sec);
 932:	c1 f5       	brne	.+112    	; 0x9a4 <main+0x138>
 934:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <STATE_TRANSITION>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	41 f4       	brne	.+16     	; 0x94c <main+0xe0>
			}
			
			// Update display
			if (timer3_flag) {
 93c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <STATE_TRANSITION>
 940:	15 b8       	out	0x05, r1	; 5
 942:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer3_1sec>
				timer3_flag = 0;
 946:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <timer3_1sec+0x1>
				//display_pieces((1 << display_index), sorted_items_array[display_index]);
				//display_pieces(display_type[display_index], sorted_items_array[display_index]);
				
				
				
				if (display_index == 4) {
 94a:	1f dd       	rcall	.-1474   	; 0x38a <start_timer3>
 94c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timer3_flag>
					// Get number of items still on conveyor belt
					int remaining_items = size(classifiedList); // gets size of all queues cuz they're linked!!
 950:	88 23       	and	r24, r24
 952:	41 f1       	breq	.+80     	; 0x9a4 <main+0x138>
 954:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timer3_flag>
 958:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <display_index>
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 95c:	84 30       	cpi	r24, 0x04	; 4
 95e:	51 f4       	brne	.+20     	; 0x974 <main+0x108>
					int remaining_items = size(classifiedList); // gets size of all queues cuz they're linked!!
					
					// + size(reflectiveList) + size(classifiedList);
					
					display_pieces(0xff, remaining_items);
					display_index = 0;
 960:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <classifiedList>
 964:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <classifiedList+0x1>
				} else {
					display_pieces(display_type[display_index], sorted_items_array[display_index]);
 968:	0f dc       	rcall	.-2018   	; 0x188 <size>
 96a:	80 51       	subi	r24, 0x10	; 16
 96c:	88 b9       	out	0x08, r24	; 8
 96e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <display_index>
 972:	18 c0       	rjmp	.+48     	; 0x9a4 <main+0x138>
 974:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <display_index>
 978:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <display_index>
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	aa 5f       	subi	r26, 0xFA	; 250
	//PORTC = size(sortedList);
	//PORTC |= 0x10;
}

void display_pieces(uint8_t type, uint8_t amount) {
	PORTC = (type << 4) + amount;
 980:	be 4f       	sbci	r27, 0xFE	; 254
 982:	9c 91       	ld	r25, X
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	ee 0f       	add	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	e7 5e       	subi	r30, 0xE7	; 231
					
					display_pieces(0xff, remaining_items);
					display_index = 0;
				} else {
					display_pieces(display_type[display_index], sorted_items_array[display_index]);
					display_index++;
 98c:	fe 4f       	sbci	r31, 0xFE	; 254
 98e:	80 81       	ld	r24, Z
 990:	20 e1       	ldi	r18, 0x10	; 16
 992:	92 9f       	mul	r25, r18
				}	
			}			
		} 
		
		if (STATE == RAMP_DOWN) {
 994:	80 0d       	add	r24, r0
 996:	11 24       	eor	r1, r1
 998:	88 b9       	out	0x08, r24	; 8
 99a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <display_index>
			// testing
			//PORTC |= 0x08;
			
			if (timer3_flag) {	
 99e:	8f 5f       	subi	r24, 0xFF	; 255
 9a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <display_index>
				timer3_flag = 0;
 9a4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <STATE>
				
				// Disable timer
				TIMSK3 &= 0xFD;
 9a8:	84 30       	cpi	r24, 0x04	; 4
 9aa:	09 f0       	breq	.+2      	; 0x9ae <main+0x142>
			}
			
			// If no items in any queue, turn off system
			if (isEmpty(entryList) &&
 9ac:	90 cf       	rjmp	.-224    	; 0x8ce <main+0x62>
 9ae:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timer3_flag>
 9b2:	88 23       	and	r24, r24
 9b4:	29 f0       	breq	.+10     	; 0x9c0 <main+0x154>
 9b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <timer3_flag>
 9ba:	88 81       	ld	r24, Y
				isEmpty(reflectiveList) &&
 9bc:	8d 7f       	andi	r24, 0xFD	; 253
 9be:	88 83       	st	Y, r24
 9c0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <entryList>
 9c4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <entryList+0x1>
				// Disable timer
				TIMSK3 &= 0xFD;
			}
			
			// If no items in any queue, turn off system
			if (isEmpty(entryList) &&
 9c8:	d5 db       	rcall	.-2134   	; 0x174 <isEmpty>
 9ca:	89 2b       	or	r24, r25
				isEmpty(reflectiveList) &&
				isEmpty(classifiedList)) {
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <main+0x164>
 9ce:	7f cf       	rjmp	.-258    	; 0x8ce <main+0x62>
 9d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <reflectiveList>
 9d4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <reflectiveList+0x1>
				TIMSK3 &= 0xFD;
			}
			
			// If no items in any queue, turn off system
			if (isEmpty(entryList) &&
				isEmpty(reflectiveList) &&
 9d8:	cd db       	rcall	.-2150   	; 0x174 <isEmpty>
				
				// Turn off motor
				PORTB = 0;
				
				// Disable ADC
				ADCSRA &= ~_BV(ADEN);
 9da:	89 2b       	or	r24, r25
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <main+0x174>
 9de:	77 cf       	rjmp	.-274    	; 0x8ce <main+0x62>
 9e0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <classifiedList>
				
				// Disable interrupts
				cli();
				
				// Release resources
				clearQueue(entryList);
 9e4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <classifiedList+0x1>
 9e8:	c5 db       	rcall	.-2166   	; 0x174 <isEmpty>
 9ea:	89 2b       	or	r24, r25
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <main+0x184>
 9ee:	6f cf       	rjmp	.-290    	; 0x8ce <main+0x62>
				clearQueue(reflectiveList);
 9f0:	15 b8       	out	0x05, r1	; 5
 9f2:	ea e7       	ldi	r30, 0x7A	; 122
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	8f 77       	andi	r24, 0x7F	; 127
 9fa:	80 83       	st	Z, r24
				clearQueue(classifiedList);
 9fc:	f8 94       	cli
 9fe:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <entryList>
 a02:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <entryList+0x1>
 a06:	a0 db       	rcall	.-2240   	; 0x148 <clearQueue>
				clearQueue(sortedList);
 a08:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <reflectiveList>
 a0c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <reflectiveList+0x1>
 a10:	9b db       	rcall	.-2250   	; 0x148 <clearQueue>
 a12:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <classifiedList>
 a16:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <classifiedList+0x1>
 a1a:	96 db       	rcall	.-2260   	; 0x148 <clearQueue>
 a1c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <sortedList>
 a20:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <sortedList+0x1>
 a24:	91 db       	rcall	.-2270   	; 0x148 <clearQueue>
 a26:	53 cf       	rjmp	.-346    	; 0x8ce <main+0x62>

00000a28 <malloc>:
 a28:	0f 93       	push	r16
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	82 30       	cpi	r24, 0x02	; 2
 a32:	91 05       	cpc	r25, r1
 a34:	10 f4       	brcc	.+4      	; 0xa3a <malloc+0x12>
 a36:	82 e0       	ldi	r24, 0x02	; 2
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__flp>
 a3e:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <__flp+0x1>
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	a0 e0       	ldi	r26, 0x00	; 0
 a48:	b0 e0       	ldi	r27, 0x00	; 0
 a4a:	30 97       	sbiw	r30, 0x00	; 0
 a4c:	19 f1       	breq	.+70     	; 0xa94 <malloc+0x6c>
 a4e:	40 81       	ld	r20, Z
 a50:	51 81       	ldd	r21, Z+1	; 0x01
 a52:	02 81       	ldd	r16, Z+2	; 0x02
 a54:	13 81       	ldd	r17, Z+3	; 0x03
 a56:	48 17       	cp	r20, r24
 a58:	59 07       	cpc	r21, r25
 a5a:	c8 f0       	brcs	.+50     	; 0xa8e <malloc+0x66>
 a5c:	84 17       	cp	r24, r20
 a5e:	95 07       	cpc	r25, r21
 a60:	69 f4       	brne	.+26     	; 0xa7c <malloc+0x54>
 a62:	10 97       	sbiw	r26, 0x00	; 0
 a64:	31 f0       	breq	.+12     	; 0xa72 <malloc+0x4a>
 a66:	12 96       	adiw	r26, 0x02	; 2
 a68:	0c 93       	st	X, r16
 a6a:	12 97       	sbiw	r26, 0x02	; 2
 a6c:	13 96       	adiw	r26, 0x03	; 3
 a6e:	1c 93       	st	X, r17
 a70:	27 c0       	rjmp	.+78     	; 0xac0 <malloc+0x98>
 a72:	00 93 60 01 	sts	0x0160, r16	; 0x800160 <__flp>
 a76:	10 93 61 01 	sts	0x0161, r17	; 0x800161 <__flp+0x1>
 a7a:	22 c0       	rjmp	.+68     	; 0xac0 <malloc+0x98>
 a7c:	21 15       	cp	r18, r1
 a7e:	31 05       	cpc	r19, r1
 a80:	19 f0       	breq	.+6      	; 0xa88 <malloc+0x60>
 a82:	42 17       	cp	r20, r18
 a84:	53 07       	cpc	r21, r19
 a86:	18 f4       	brcc	.+6      	; 0xa8e <malloc+0x66>
 a88:	9a 01       	movw	r18, r20
 a8a:	bd 01       	movw	r22, r26
 a8c:	ef 01       	movw	r28, r30
 a8e:	df 01       	movw	r26, r30
 a90:	f8 01       	movw	r30, r16
 a92:	db cf       	rjmp	.-74     	; 0xa4a <malloc+0x22>
 a94:	21 15       	cp	r18, r1
 a96:	31 05       	cpc	r19, r1
 a98:	f9 f0       	breq	.+62     	; 0xad8 <malloc+0xb0>
 a9a:	28 1b       	sub	r18, r24
 a9c:	39 0b       	sbc	r19, r25
 a9e:	24 30       	cpi	r18, 0x04	; 4
 aa0:	31 05       	cpc	r19, r1
 aa2:	80 f4       	brcc	.+32     	; 0xac4 <malloc+0x9c>
 aa4:	8a 81       	ldd	r24, Y+2	; 0x02
 aa6:	9b 81       	ldd	r25, Y+3	; 0x03
 aa8:	61 15       	cp	r22, r1
 aaa:	71 05       	cpc	r23, r1
 aac:	21 f0       	breq	.+8      	; 0xab6 <malloc+0x8e>
 aae:	fb 01       	movw	r30, r22
 ab0:	93 83       	std	Z+3, r25	; 0x03
 ab2:	82 83       	std	Z+2, r24	; 0x02
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <malloc+0x96>
 ab6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__flp+0x1>
 aba:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__flp>
 abe:	fe 01       	movw	r30, r28
 ac0:	32 96       	adiw	r30, 0x02	; 2
 ac2:	44 c0       	rjmp	.+136    	; 0xb4c <malloc+0x124>
 ac4:	fe 01       	movw	r30, r28
 ac6:	e2 0f       	add	r30, r18
 ac8:	f3 1f       	adc	r31, r19
 aca:	81 93       	st	Z+, r24
 acc:	91 93       	st	Z+, r25
 ace:	22 50       	subi	r18, 0x02	; 2
 ad0:	31 09       	sbc	r19, r1
 ad2:	39 83       	std	Y+1, r19	; 0x01
 ad4:	28 83       	st	Y, r18
 ad6:	3a c0       	rjmp	.+116    	; 0xb4c <malloc+0x124>
 ad8:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 adc:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 ae0:	23 2b       	or	r18, r19
 ae2:	41 f4       	brne	.+16     	; 0xaf4 <malloc+0xcc>
 ae4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ae8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 aec:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <__brkval+0x1>
 af0:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__brkval>
 af4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 af8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 afc:	21 15       	cp	r18, r1
 afe:	31 05       	cpc	r19, r1
 b00:	41 f4       	brne	.+16     	; 0xb12 <malloc+0xea>
 b02:	2d b7       	in	r18, 0x3d	; 61
 b04:	3e b7       	in	r19, 0x3e	; 62
 b06:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 b0a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 b0e:	24 1b       	sub	r18, r20
 b10:	35 0b       	sbc	r19, r21
 b12:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <__brkval>
 b16:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <__brkval+0x1>
 b1a:	e2 17       	cp	r30, r18
 b1c:	f3 07       	cpc	r31, r19
 b1e:	a0 f4       	brcc	.+40     	; 0xb48 <malloc+0x120>
 b20:	2e 1b       	sub	r18, r30
 b22:	3f 0b       	sbc	r19, r31
 b24:	28 17       	cp	r18, r24
 b26:	39 07       	cpc	r19, r25
 b28:	78 f0       	brcs	.+30     	; 0xb48 <malloc+0x120>
 b2a:	ac 01       	movw	r20, r24
 b2c:	4e 5f       	subi	r20, 0xFE	; 254
 b2e:	5f 4f       	sbci	r21, 0xFF	; 255
 b30:	24 17       	cp	r18, r20
 b32:	35 07       	cpc	r19, r21
 b34:	48 f0       	brcs	.+18     	; 0xb48 <malloc+0x120>
 b36:	4e 0f       	add	r20, r30
 b38:	5f 1f       	adc	r21, r31
 b3a:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <__brkval+0x1>
 b3e:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <__brkval>
 b42:	81 93       	st	Z+, r24
 b44:	91 93       	st	Z+, r25
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <malloc+0x124>
 b48:	e0 e0       	ldi	r30, 0x00	; 0
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	cf 01       	movw	r24, r30
 b4e:	df 91       	pop	r29
 b50:	cf 91       	pop	r28
 b52:	1f 91       	pop	r17
 b54:	0f 91       	pop	r16
 b56:	08 95       	ret

00000b58 <free>:
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
 b5c:	00 97       	sbiw	r24, 0x00	; 0
 b5e:	09 f4       	brne	.+2      	; 0xb62 <free+0xa>
 b60:	81 c0       	rjmp	.+258    	; 0xc64 <free+0x10c>
 b62:	fc 01       	movw	r30, r24
 b64:	32 97       	sbiw	r30, 0x02	; 2
 b66:	13 82       	std	Z+3, r1	; 0x03
 b68:	12 82       	std	Z+2, r1	; 0x02
 b6a:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <__flp>
 b6e:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <__flp+0x1>
 b72:	10 97       	sbiw	r26, 0x00	; 0
 b74:	81 f4       	brne	.+32     	; 0xb96 <free+0x3e>
 b76:	20 81       	ld	r18, Z
 b78:	31 81       	ldd	r19, Z+1	; 0x01
 b7a:	82 0f       	add	r24, r18
 b7c:	93 1f       	adc	r25, r19
 b7e:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 b82:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 b86:	28 17       	cp	r18, r24
 b88:	39 07       	cpc	r19, r25
 b8a:	51 f5       	brne	.+84     	; 0xbe0 <free+0x88>
 b8c:	f0 93 5f 01 	sts	0x015F, r31	; 0x80015f <__brkval+0x1>
 b90:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <__brkval>
 b94:	67 c0       	rjmp	.+206    	; 0xc64 <free+0x10c>
 b96:	ed 01       	movw	r28, r26
 b98:	20 e0       	ldi	r18, 0x00	; 0
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	ce 17       	cp	r28, r30
 b9e:	df 07       	cpc	r29, r31
 ba0:	40 f4       	brcc	.+16     	; 0xbb2 <free+0x5a>
 ba2:	4a 81       	ldd	r20, Y+2	; 0x02
 ba4:	5b 81       	ldd	r21, Y+3	; 0x03
 ba6:	9e 01       	movw	r18, r28
 ba8:	41 15       	cp	r20, r1
 baa:	51 05       	cpc	r21, r1
 bac:	f1 f0       	breq	.+60     	; 0xbea <free+0x92>
 bae:	ea 01       	movw	r28, r20
 bb0:	f5 cf       	rjmp	.-22     	; 0xb9c <free+0x44>
 bb2:	d3 83       	std	Z+3, r29	; 0x03
 bb4:	c2 83       	std	Z+2, r28	; 0x02
 bb6:	40 81       	ld	r20, Z
 bb8:	51 81       	ldd	r21, Z+1	; 0x01
 bba:	84 0f       	add	r24, r20
 bbc:	95 1f       	adc	r25, r21
 bbe:	c8 17       	cp	r28, r24
 bc0:	d9 07       	cpc	r29, r25
 bc2:	59 f4       	brne	.+22     	; 0xbda <free+0x82>
 bc4:	88 81       	ld	r24, Y
 bc6:	99 81       	ldd	r25, Y+1	; 0x01
 bc8:	84 0f       	add	r24, r20
 bca:	95 1f       	adc	r25, r21
 bcc:	02 96       	adiw	r24, 0x02	; 2
 bce:	91 83       	std	Z+1, r25	; 0x01
 bd0:	80 83       	st	Z, r24
 bd2:	8a 81       	ldd	r24, Y+2	; 0x02
 bd4:	9b 81       	ldd	r25, Y+3	; 0x03
 bd6:	93 83       	std	Z+3, r25	; 0x03
 bd8:	82 83       	std	Z+2, r24	; 0x02
 bda:	21 15       	cp	r18, r1
 bdc:	31 05       	cpc	r19, r1
 bde:	29 f4       	brne	.+10     	; 0xbea <free+0x92>
 be0:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <__flp+0x1>
 be4:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <__flp>
 be8:	3d c0       	rjmp	.+122    	; 0xc64 <free+0x10c>
 bea:	e9 01       	movw	r28, r18
 bec:	fb 83       	std	Y+3, r31	; 0x03
 bee:	ea 83       	std	Y+2, r30	; 0x02
 bf0:	49 91       	ld	r20, Y+
 bf2:	59 91       	ld	r21, Y+
 bf4:	c4 0f       	add	r28, r20
 bf6:	d5 1f       	adc	r29, r21
 bf8:	ec 17       	cp	r30, r28
 bfa:	fd 07       	cpc	r31, r29
 bfc:	61 f4       	brne	.+24     	; 0xc16 <free+0xbe>
 bfe:	80 81       	ld	r24, Z
 c00:	91 81       	ldd	r25, Z+1	; 0x01
 c02:	84 0f       	add	r24, r20
 c04:	95 1f       	adc	r25, r21
 c06:	02 96       	adiw	r24, 0x02	; 2
 c08:	e9 01       	movw	r28, r18
 c0a:	99 83       	std	Y+1, r25	; 0x01
 c0c:	88 83       	st	Y, r24
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	9b 83       	std	Y+3, r25	; 0x03
 c14:	8a 83       	std	Y+2, r24	; 0x02
 c16:	e0 e0       	ldi	r30, 0x00	; 0
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	12 96       	adiw	r26, 0x02	; 2
 c1c:	8d 91       	ld	r24, X+
 c1e:	9c 91       	ld	r25, X
 c20:	13 97       	sbiw	r26, 0x03	; 3
 c22:	00 97       	sbiw	r24, 0x00	; 0
 c24:	19 f0       	breq	.+6      	; 0xc2c <free+0xd4>
 c26:	fd 01       	movw	r30, r26
 c28:	dc 01       	movw	r26, r24
 c2a:	f7 cf       	rjmp	.-18     	; 0xc1a <free+0xc2>
 c2c:	8d 91       	ld	r24, X+
 c2e:	9c 91       	ld	r25, X
 c30:	11 97       	sbiw	r26, 0x01	; 1
 c32:	9d 01       	movw	r18, r26
 c34:	2e 5f       	subi	r18, 0xFE	; 254
 c36:	3f 4f       	sbci	r19, 0xFF	; 255
 c38:	82 0f       	add	r24, r18
 c3a:	93 1f       	adc	r25, r19
 c3c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 c40:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 c44:	28 17       	cp	r18, r24
 c46:	39 07       	cpc	r19, r25
 c48:	69 f4       	brne	.+26     	; 0xc64 <free+0x10c>
 c4a:	30 97       	sbiw	r30, 0x00	; 0
 c4c:	29 f4       	brne	.+10     	; 0xc58 <free+0x100>
 c4e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__flp+0x1>
 c52:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__flp>
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <free+0x104>
 c58:	13 82       	std	Z+3, r1	; 0x03
 c5a:	12 82       	std	Z+2, r1	; 0x02
 c5c:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <__brkval+0x1>
 c60:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <__brkval>
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>
