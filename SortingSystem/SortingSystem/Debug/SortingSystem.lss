
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000af6  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800110  00800110  00000b9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a74  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f08  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c34  00000000  00000000  000036d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  00004304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090a  00000000  00000000  00004758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc6  00000000  00000000  00005062  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005e28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	c8 c0       	rjmp	.+400    	; 0x196 <__vector_1>
   6:	00 00       	nop
   8:	fe c0       	rjmp	.+508    	; 0x206 <__vector_2>
   a:	00 00       	nop
   c:	19 c1       	rjmp	.+562    	; 0x240 <__vector_3>
   e:	00 00       	nop
  10:	e2 c2       	rjmp	.+1476   	; 0x5d6 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	96 c0       	rjmp	.+300    	; 0x182 <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	3b c1       	rjmp	.+630    	; 0x2ec <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 ef       	ldi	r30, 0xF6	; 246
  ac:	fa e0       	ldi	r31, 0x0A	; 10
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 31       	cpi	r26, 0x10	; 16
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a0 e1       	ldi	r26, 0x10	; 16
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 34       	cpi	r26, 0x4C	; 76
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	a4 d3       	rcall	.+1864   	; 0x818 <main>
  d0:	10 c5       	rjmp	.+2592   	; 0xaf2 <_exit>

000000d2 <__bad_interrupt>:
  d2:	4f c1       	rjmp	.+670    	; 0x372 <__vector_default>

000000d4 <initItem>:
	return *(q->head);
}//firstValue

item lastValue(queue* q){
	return *(q->tail);
}//lastValue
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	eb d3       	rcall	.+2006   	; 0x8b0 <malloc>
  da:	fc 01       	movw	r30, r24
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
  e0:	10 82       	st	Z, r1
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
  e6:	13 82       	std	Z+3, r1	; 0x03
  e8:	14 82       	std	Z+4, r1	; 0x04
  ea:	15 82       	std	Z+5, r1	; 0x05
  ec:	08 95       	ret

000000ee <initQueue>:
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	de d3       	rcall	.+1980   	; 0x8b0 <malloc>
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
  fe:	08 95       	ret

00000100 <enqueue>:
 100:	fc 01       	movw	r30, r24
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:
 122:	dc 01       	movw	r26, r24
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	71 f0       	breq	.+28     	; 0x14a <dequeue+0x28>
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
 138:	89 2b       	or	r24, r25
 13a:	51 f4       	brne	.+20     	; 0x150 <dequeue+0x2e>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
 144:	8e 2f       	mov	r24, r30
 146:	9f 2f       	mov	r25, r31
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret
 150:	8e 2f       	mov	r24, r30
 152:	9f 2f       	mov	r25, r31
 154:	08 95       	ret

00000156 <clearQueue>:

/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
void clearQueue(queue* q){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
	item *temp;
	
	while (q->head != NULL){
 15c:	88 81       	ld	r24, Y
 15e:	99 81       	ldd	r25, Y+1	; 0x01
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	51 f0       	breq	.+20     	; 0x178 <clearQueue+0x22>
		temp = q->head;
		q->head = q->head->next;
 164:	fc 01       	movw	r30, r24
 166:	26 81       	ldd	r18, Z+6	; 0x06
 168:	37 81       	ldd	r19, Z+7	; 0x07
 16a:	39 83       	std	Y+1, r19	; 0x01
		free(temp);
 16c:	28 83       	st	Y, r18
* INPUT: the pointers to the head and the tail
*/
void clearQueue(queue* q){
	item *temp;
	
	while (q->head != NULL){
 16e:	38 d4       	rcall	.+2160   	; 0x9e0 <free>
 170:	88 81       	ld	r24, Y
 172:	99 81       	ldd	r25, Y+1	; 0x01
 174:	00 97       	sbiw	r24, 0x00	; 0
		temp = q->head;
		q->head = q->head->next;
		free(temp);
	}/*while*/

	q->tail = NULL;		
 176:	b1 f7       	brne	.-20     	; 0x164 <clearQueue+0xe>
 178:	1b 82       	std	Y+3, r1	; 0x03
	return;
}//clearQueue
 17a:	1a 82       	std	Y+2, r1	; 0x02
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <__vector_21>:

	if(m == 0)
	{
		diff_white = abs(calibration_vals[0] - r);
		diff_black = abs(calibration_vals[1] - r);
		if(diff_white < diff_black) type = WHITE;
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_1>:
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	0b b6       	in	r0, 0x3b	; 59
 1a2:	0f 92       	push	r0
 1a4:	2f 93       	push	r18
 1a6:	3f 93       	push	r19
 1a8:	4f 93       	push	r20
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
 1bc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <item_number>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <item_number>
 1c6:	86 df       	rcall	.-244    	; 0xd4 <initItem>
 1c8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <item_number>
 1cc:	fc 01       	movw	r30, r24
 1ce:	25 83       	std	Z+5, r18	; 0x05
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	24 83       	std	Z+4, r18	; 0x04
 1d4:	bc 01       	movw	r22, r24
 1d6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <entryList>
 1da:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <entryList+0x1>
 1de:	90 df       	rcall	.-224    	; 0x100 <enqueue>
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0b be       	out	0x3b, r0	; 59
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_2>:
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	0b b6       	in	r0, 0x3b	; 59
 212:	0f 92       	push	r0
 214:	8f 93       	push	r24
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
 21a:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <entryList>
 21e:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <entryList+0x1>
 222:	02 80       	ldd	r0, Z+2	; 0x02
 224:	f3 81       	ldd	r31, Z+3	; 0x03
 226:	e0 2d       	mov	r30, r0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	8f 91       	pop	r24
 232:	0f 90       	pop	r0
 234:	0b be       	out	0x3b, r0	; 59
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_3>:
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	0b b6       	in	r0, 0x3b	; 59
 24c:	0f 92       	push	r0
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
 266:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <reflective_present>
 26a:	88 23       	and	r24, r24
 26c:	21 f1       	breq	.+72     	; 0x2b6 <__vector_3+0x76>
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <STATE>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	d1 f4       	brne	.+52     	; 0x2aa <__vector_3+0x6a>
 276:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <entryList>
 27a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <entryList+0x1>
 27e:	51 df       	rcall	.-350    	; 0x122 <dequeue>
 280:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <ADC_lowest_val>
 284:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <ADC_lowest_val+0x1>
 288:	fc 01       	movw	r30, r24
 28a:	32 83       	std	Z+2, r19	; 0x02
 28c:	21 83       	std	Z+1, r18	; 0x01
 28e:	22 e0       	ldi	r18, 0x02	; 2
 290:	24 83       	std	Z+4, r18	; 0x04
 292:	bc 01       	movw	r22, r24
 294:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <reflectiveList>
 298:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <reflectiveList+0x1>
 29c:	31 df       	rcall	.-414    	; 0x100 <enqueue>
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	93 e0       	ldi	r25, 0x03	; 3
 2a2:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ADC_lowest_val+0x1>
 2a6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ADC_lowest_val>
 2aa:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <reflective_present>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <item_ready>
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <__vector_3+0x86>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <reflective_present>
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 83       	st	Z, r24
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0b be       	out	0x3b, r0	; 59
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_29>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
 306:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <reflective_present>
 30a:	88 23       	and	r24, r24
 30c:	29 f1       	breq	.+74     	; 0x358 <__vector_29+0x6c>
 30e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 312:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	98 2f       	mov	r25, r24
 31a:	88 27       	eor	r24, r24
 31c:	82 0f       	add	r24, r18
 31e:	91 1d       	adc	r25, r1
 320:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ADC_result+0x1>
 324:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ADC_result>
 328:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <ADC_result>
 32c:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <ADC_result+0x1>
 330:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ADC_lowest_val>
 334:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ADC_lowest_val+0x1>
 338:	28 17       	cp	r18, r24
 33a:	39 07       	cpc	r19, r25
 33c:	40 f4       	brcc	.+16     	; 0x34e <__vector_29+0x62>
 33e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ADC_result>
 342:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ADC_result+0x1>
 346:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ADC_lowest_val+0x1>
 34a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ADC_lowest_val>
 34e:	ea e7       	ldi	r30, 0x7A	; 122
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	80 83       	st	Z, r24
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0b be       	out	0x3b, r0	; 59
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_default>:
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <init_interrupts>:
 386:	8a e9       	ldi	r24, 0x9A	; 154
 388:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 38c:	8d b3       	in	r24, 0x1d	; 29
 38e:	8f 60       	ori	r24, 0x0F	; 15
 390:	8d bb       	out	0x1d, r24	; 29
 392:	08 95       	ret

00000394 <init_timer0_pwm>:
 394:	84 b5       	in	r24, 0x24	; 36
 396:	83 68       	ori	r24, 0x83	; 131
 398:	84 bd       	out	0x24, r24	; 36
 39a:	85 b5       	in	r24, 0x25	; 37
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	85 bd       	out	0x25, r24	; 37
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	87 bd       	out	0x27, r24	; 39
 3a4:	08 95       	ret

000003a6 <init_motor>:
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	85 b9       	out	0x05, r24	; 5
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	87 bd       	out	0x27, r24	; 39
 3ae:	08 95       	ret

000003b0 <init_ADC>:
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	93 e0       	ldi	r25, 0x03	; 3
 3b4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ADC_result+0x1>
 3b8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ADC_result>
 3bc:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ADC_lowest_val+0x1>
 3c0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ADC_lowest_val>
 3c4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <reflective_present>
 3c8:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <item_ready>
 3cc:	ec e7       	ldi	r30, 0x7C	; 124
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	80 64       	ori	r24, 0x40	; 64
 3d4:	80 83       	st	Z, r24
 3d6:	ea e7       	ldi	r30, 0x7A	; 122
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	80 83       	st	Z, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	88 60       	ori	r24, 0x08	; 8
 3ea:	80 83       	st	Z, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
 3f2:	08 95       	ret

000003f4 <init_stepper>:
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	81 b9       	out	0x01, r24	; 1
 3f8:	85 e3       	ldi	r24, 0x35	; 53
 3fa:	82 b9       	out	0x02, r24	; 2
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <motor_position+0x1>
 404:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <motor_position>
 408:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <stepper_on+0x1>
 40c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <stepper_on>
 410:	08 95       	ret

00000412 <mTimer>:
 412:	ac 01       	movw	r20, r24
 414:	e1 e8       	ldi	r30, 0x81	; 129
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	90 81       	ld	r25, Z
 41a:	91 60       	ori	r25, 0x01	; 1
 41c:	90 83       	st	Z, r25
 41e:	90 81       	ld	r25, Z
 420:	98 60       	ori	r25, 0x08	; 8
 422:	90 83       	st	Z, r25
 424:	88 ee       	ldi	r24, 0xE8	; 232
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 42c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 430:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 434:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 438:	b1 9a       	sbi	0x16, 1	; 22
 43a:	20 e0       	ldi	r18, 0x00	; 0
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	05 c0       	rjmp	.+10     	; 0x44a <mTimer+0x38>
 440:	b1 9b       	sbis	0x16, 1	; 22
 442:	fe cf       	rjmp	.-4      	; 0x440 <mTimer+0x2e>
 444:	b1 9a       	sbi	0x16, 1	; 22
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	3f 4f       	sbci	r19, 0xFF	; 255
 44a:	24 17       	cp	r18, r20
 44c:	35 07       	cpc	r19, r21
 44e:	1c f4       	brge	.+6      	; 0x456 <mTimer+0x44>
 450:	b1 9b       	sbis	0x16, 1	; 22
 452:	f6 cf       	rjmp	.-20     	; 0x440 <mTimer+0x2e>
 454:	f7 cf       	rjmp	.-18     	; 0x444 <mTimer+0x32>
 456:	08 95       	ret

00000458 <stepper_rotate>:
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	18 16       	cp	r1, r24
 46a:	19 06       	cpc	r1, r25
 46c:	0c f0       	brlt	.+2      	; 0x470 <stepper_rotate+0x18>
 46e:	61 c0       	rjmp	.+194    	; 0x532 <stepper_rotate+0xda>
 470:	6b 01       	movw	r12, r22
 472:	8c 01       	movw	r16, r24
 474:	c0 e0       	ldi	r28, 0x00	; 0
 476:	d0 e0       	ldi	r29, 0x00	; 0
 478:	0f 2e       	mov	r0, r31
 47a:	f2 e1       	ldi	r31, 0x12	; 18
 47c:	ef 2e       	mov	r14, r31
 47e:	f1 2c       	mov	r15, r1
 480:	f0 2d       	mov	r31, r0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	c8 16       	cp	r12, r24
 486:	d1 04       	cpc	r13, r1
 488:	d1 f4       	brne	.+52     	; 0x4be <stepper_rotate+0x66>
 48a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 48e:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 492:	e5 5f       	subi	r30, 0xF5	; 245
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	80 81       	ld	r24, Z
 498:	82 b9       	out	0x02, r24	; 2
 49a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 49e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	83 70       	andi	r24, 0x03	; 3
 4a6:	90 78       	andi	r25, 0x80	; 128
 4a8:	99 23       	and	r25, r25
 4aa:	24 f4       	brge	.+8      	; 0x4b4 <stepper_rotate+0x5c>
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	8c 6f       	ori	r24, 0xFC	; 252
 4b0:	9f 6f       	ori	r25, 0xFF	; 255
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 4b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <stepper_rotate+0xa0>
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	c8 16       	cp	r12, r24
 4c2:	d8 06       	cpc	r13, r24
 4c4:	c9 f4       	brne	.+50     	; 0x4f8 <stepper_rotate+0xa0>
 4c6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 4ca:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 4ce:	e9 5f       	subi	r30, 0xF9	; 249
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	80 81       	ld	r24, Z
 4d4:	82 b9       	out	0x02, r24	; 2
 4d6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4da:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	83 70       	andi	r24, 0x03	; 3
 4e2:	90 78       	andi	r25, 0x80	; 128
 4e4:	99 23       	and	r25, r25
 4e6:	24 f4       	brge	.+8      	; 0x4f0 <stepper_rotate+0x98>
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	8c 6f       	ori	r24, 0xFC	; 252
 4ec:	9f 6f       	ori	r25, 0xFF	; 255
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 4f4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 4f8:	c7 01       	movw	r24, r14
 4fa:	8b df       	rcall	.-234    	; 0x412 <mTimer>
 4fc:	c5 30       	cpi	r28, 0x05	; 5
 4fe:	d1 05       	cpc	r29, r1
 500:	3c f4       	brge	.+14     	; 0x510 <stepper_rotate+0xb8>
 502:	88 e0       	ldi	r24, 0x08	; 8
 504:	e8 16       	cp	r14, r24
 506:	f1 04       	cpc	r15, r1
 508:	1c f0       	brlt	.+6      	; 0x510 <stepper_rotate+0xb8>
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	e8 1a       	sub	r14, r24
 50e:	f1 08       	sbc	r15, r1
 510:	c8 01       	movw	r24, r16
 512:	8c 1b       	sub	r24, r28
 514:	9d 0b       	sbc	r25, r29
 516:	06 97       	sbiw	r24, 0x06	; 6
 518:	3c f4       	brge	.+14     	; 0x528 <stepper_rotate+0xd0>
 51a:	83 e1       	ldi	r24, 0x13	; 19
 51c:	e8 16       	cp	r14, r24
 51e:	f1 04       	cpc	r15, r1
 520:	1c f4       	brge	.+6      	; 0x528 <stepper_rotate+0xd0>
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	e8 0e       	add	r14, r24
 526:	f1 1c       	adc	r15, r1
 528:	21 96       	adiw	r28, 0x01	; 1
 52a:	0c 17       	cp	r16, r28
 52c:	1d 07       	cpc	r17, r29
 52e:	09 f0       	breq	.+2      	; 0x532 <stepper_rotate+0xda>
 530:	a8 cf       	rjmp	.-176    	; 0x482 <stepper_rotate+0x2a>
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	df 90       	pop	r13
 540:	cf 90       	pop	r12
 542:	08 95       	ret

00000544 <stepper_position>:
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <stepper_on+0x1>
 550:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <stepper_on>
 554:	c8 2f       	mov	r28, r24
 556:	d0 e0       	ldi	r29, 0x00	; 0
 558:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <motor_position>
 55c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <motor_position+0x1>
 560:	9e 01       	movw	r18, r28
 562:	28 1b       	sub	r18, r24
 564:	39 0b       	sbc	r19, r25
 566:	c9 01       	movw	r24, r18
 568:	21 30       	cpi	r18, 0x01	; 1
 56a:	31 05       	cpc	r19, r1
 56c:	21 f0       	breq	.+8      	; 0x576 <stepper_position+0x32>
 56e:	8d 3f       	cpi	r24, 0xFD	; 253
 570:	3f ef       	ldi	r19, 0xFF	; 255
 572:	93 07       	cpc	r25, r19
 574:	31 f4       	brne	.+12     	; 0x582 <stepper_position+0x3e>
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	82 e3       	ldi	r24, 0x32	; 50
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	6c df       	rcall	.-296    	; 0x458 <stepper_rotate>
 580:	17 c0       	rjmp	.+46     	; 0x5b0 <stepper_position+0x6c>
 582:	8f 3f       	cpi	r24, 0xFF	; 255
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	92 07       	cpc	r25, r18
 588:	19 f0       	breq	.+6      	; 0x590 <stepper_position+0x4c>
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	91 05       	cpc	r25, r1
 58e:	31 f4       	brne	.+12     	; 0x59c <stepper_position+0x58>
 590:	6f ef       	ldi	r22, 0xFF	; 255
 592:	7f ef       	ldi	r23, 0xFF	; 255
 594:	82 e3       	ldi	r24, 0x32	; 50
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	5f df       	rcall	.-322    	; 0x458 <stepper_rotate>
 59a:	0a c0       	rjmp	.+20     	; 0x5b0 <stepper_position+0x6c>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	91 05       	cpc	r25, r1
 5a0:	11 f0       	breq	.+4      	; 0x5a6 <stepper_position+0x62>
 5a2:	02 96       	adiw	r24, 0x02	; 2
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <stepper_position+0x6c>
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	84 e6       	ldi	r24, 0x64	; 100
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	54 df       	rcall	.-344    	; 0x458 <stepper_rotate>
 5b0:	d0 93 1a 01 	sts	0x011A, r29	; 0x80011a <motor_position+0x1>
 5b4:	c0 93 19 01 	sts	0x0119, r28	; 0x800119 <motor_position>
 5b8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <stepper_on+0x1>
 5bc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <stepper_on>
 5c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <item_waiting>
 5c4:	88 23       	and	r24, r24
 5c6:	21 f0       	breq	.+8      	; 0x5d0 <stepper_position+0x8c>
 5c8:	80 e3       	ldi	r24, 0x30	; 48
 5ca:	87 bd       	out	0x27, r24	; 39
 5cc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <item_waiting>
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <__vector_4>:
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	0b b6       	in	r0, 0x3b	; 59
 5e2:	0f 92       	push	r0
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
 5fc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <classifiedList>
 600:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <classifiedList+0x1>
 604:	8e dd       	rcall	.-1252   	; 0x122 <dequeue>
 606:	bc 01       	movw	r22, r24
 608:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <sortedList>
 60c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <sortedList+0x1>
 610:	77 dd       	rcall	.-1298   	; 0x100 <enqueue>
 612:	15 b8       	out	0x05, r1	; 5
 614:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <sortedList>
 618:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <sortedList+0x1>
 61c:	02 80       	ldd	r0, Z+2	; 0x02
 61e:	f3 81       	ldd	r31, Z+3	; 0x03
 620:	e0 2d       	mov	r30, r0
 622:	83 81       	ldd	r24, Z+3	; 0x03
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	8e df       	rcall	.-228    	; 0x544 <stepper_position>
 628:	be de       	rcall	.-644    	; 0x3a6 <init_motor>
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	0b be       	out	0x3b, r0	; 59
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <display_reflective_reading>:
	
}//classify_item

void display_reflective_reading(uint16_t value) {
	// Clear upper bits in PD2 and PD5
	PORTD &= 0x0F;	// Clear PORTD LEDs and preserve sensor inputs
 650:	2b b1       	in	r18, 0x0b	; 11
 652:	2f 70       	andi	r18, 0x0F	; 15
 654:	2b b9       	out	0x0b, r18	; 11
	
	// Get 10 bits from reading
	value &= SENSOR_READING_MASK;
	
	// Send lower 8 bits to LEDs (PORTC)
	PORTC = value;
 656:	9c 01       	movw	r18, r24
 658:	33 70       	andi	r19, 0x03	; 3
 65a:	28 b9       	out	0x08, r18	; 8
	uint8_t temp = 0;
	temp = ((value & 0x100) >> 4) + ((value & 0x200) >> 2);
	
	// testing 1 - test temp
	//PORTC = temp;
	PORTD |= temp;
 65c:	2b b1       	in	r18, 0x0b	; 11
 65e:	ac 01       	movw	r20, r24
 660:	44 27       	eor	r20, r20
 662:	51 70       	andi	r21, 0x01	; 1
 664:	52 95       	swap	r21
 666:	42 95       	swap	r20
 668:	4f 70       	andi	r20, 0x0F	; 15
 66a:	45 27       	eor	r20, r21
 66c:	5f 70       	andi	r21, 0x0F	; 15
 66e:	45 27       	eor	r20, r21
 670:	88 27       	eor	r24, r24
 672:	92 70       	andi	r25, 0x02	; 2
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	84 0f       	add	r24, r20
 67e:	82 2b       	or	r24, r18
 680:	8b b9       	out	0x0b, r24	; 11
 682:	08 95       	ret

00000684 <adc_calibrate>:
}

//Calibrate the ADC by running each part through the sensor 10 times, in the order: white, black, aluminum, steel
void adc_calibrate(){
 684:	2f 92       	push	r2
 686:	3f 92       	push	r3
 688:	4f 92       	push	r4
 68a:	5f 92       	push	r5
 68c:	6f 92       	push	r6
 68e:	7f 92       	push	r7
 690:	8f 92       	push	r8
 692:	9f 92       	push	r9
 694:	af 92       	push	r10
 696:	bf 92       	push	r11
 698:	cf 92       	push	r12
 69a:	df 92       	push	r13
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	64 97       	sbiw	r28, 0x14	; 20
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
	
	int i,j,k;
	uint16_t cal_vals[10];
	uint16_t min, max, med, avg;
	
	for(j=0;j<4;j++)
 6b8:	81 2c       	mov	r8, r1
 6ba:	91 2c       	mov	r9, r1
			PORTC = (char)(i+1);
			//PORTC = ADC_lowest_val;
			//display_reflective_reading(ADC_lowest_val);
			
			cal_vals[i] = ADC_lowest_val;
			ADC_lowest_val = 0x3FF;
 6bc:	0f 2e       	mov	r0, r31
 6be:	cc 24       	eor	r12, r12
 6c0:	ca 94       	dec	r12
 6c2:	f3 e0       	ldi	r31, 0x03	; 3
 6c4:	df 2e       	mov	r13, r31
 6c6:	f0 2d       	mov	r31, r0
			item_ready = 0;
		}
		PORTC = 0xFF; //signal that all 10 values have been read
 6c8:	22 24       	eor	r2, r2
 6ca:	2a 94       	dec	r2
 6cc:	5e 01       	movw	r10, r28
 6ce:	45 e1       	ldi	r20, 0x15	; 21
 6d0:	a4 0e       	add	r10, r20
 6d2:	b1 1c       	adc	r11, r1
		mTimer(1000);
		//PORTC = med;
		display_reflective_reading(med);
		mTimer(7000);

		PORTC = 0x04;
 6d4:	68 94       	set
 6d6:	33 24       	eor	r3, r3
 6d8:	32 f8       	bld	r3, 2
 6da:	81 c0       	rjmp	.+258    	; 0x7de <adc_calibrate+0x15a>
	for(j=0;j<4;j++)
	{
		// run part through 10 times, store the lowest value of each pass in an array
		for(i=0;i<10;i++)
		{
			while(!item_ready) {}
 6dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <item_ready>
 6e0:	88 23       	and	r24, r24
 6e2:	e1 f3       	breq	.-8      	; 0x6dc <adc_calibrate+0x58>
			
			// testing
			PORTC = (char)(i+1);
 6e4:	98 b9       	out	0x08, r25	; 8
			//PORTC = ADC_lowest_val;
			//display_reflective_reading(ADC_lowest_val);
			
			cal_vals[i] = ADC_lowest_val;
 6e6:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <ADC_lowest_val>
 6ea:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <ADC_lowest_val+0x1>
 6ee:	21 93       	st	Z+, r18
 6f0:	31 93       	st	Z+, r19
			ADC_lowest_val = 0x3FF;
 6f2:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <ADC_lowest_val+0x1>
 6f6:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <ADC_lowest_val>
			item_ready = 0;
 6fa:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <item_ready>
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
	uint16_t min, max, med, avg;
	
	for(j=0;j<4;j++)
	{
		// run part through 10 times, store the lowest value of each pass in an array
		for(i=0;i<10;i++)
 700:	9b 30       	cpi	r25, 0x0B	; 11
 702:	61 f7       	brne	.-40     	; 0x6dc <adc_calibrate+0x58>
			
			cal_vals[i] = ADC_lowest_val;
			ADC_lowest_val = 0x3FF;
			item_ready = 0;
		}
		PORTC = 0xFF; //signal that all 10 values have been read
 704:	28 b8       	out	0x08, r2	; 8
		
		PORTB = 0x00;
 706:	15 b8       	out	0x05, r1	; 5
		
		mTimer(100);
 708:	84 e6       	ldi	r24, 0x64	; 100
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	82 de       	rcall	.-764    	; 0x412 <mTimer>
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
 70e:	09 81       	ldd	r16, Y+1	; 0x01
 710:	1a 81       	ldd	r17, Y+2	; 0x02
 712:	fe 01       	movw	r30, r28
 714:	33 96       	adiw	r30, 0x03	; 3
		max = cal_vals[0];
		avg = cal_vals[0];
 716:	98 01       	movw	r18, r16
		PORTB = 0x00;
		
		mTimer(100);
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
		max = cal_vals[0];
 718:	78 01       	movw	r14, r16
		avg = cal_vals[0];
		for(k=1;k<10;k++)
		{
			if((cal_vals[k] > max) && (cal_vals[k] != 0x3FF)) max = cal_vals[k];
 71a:	81 91       	ld	r24, Z+
 71c:	91 91       	ld	r25, Z+
 71e:	e8 16       	cp	r14, r24
 720:	f9 06       	cpc	r15, r25
 722:	28 f4       	brcc	.+10     	; 0x72e <adc_calibrate+0xaa>
 724:	8f 3f       	cpi	r24, 0xFF	; 255
 726:	43 e0       	ldi	r20, 0x03	; 3
 728:	94 07       	cpc	r25, r20
 72a:	09 f0       	breq	.+2      	; 0x72e <adc_calibrate+0xaa>
 72c:	7c 01       	movw	r14, r24
 72e:	80 17       	cp	r24, r16
 730:	91 07       	cpc	r25, r17
 732:	08 f4       	brcc	.+2      	; 0x736 <adc_calibrate+0xb2>
 734:	8c 01       	movw	r16, r24
			if(cal_vals[k] < min) min = cal_vals[k];
			avg += cal_vals[k];
 736:	28 0f       	add	r18, r24
 738:	39 1f       	adc	r19, r25
		mTimer(100);
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
		max = cal_vals[0];
		avg = cal_vals[0];
		for(k=1;k<10;k++)
 73a:	ea 15       	cp	r30, r10
 73c:	fb 05       	cpc	r31, r11
 73e:	69 f7       	brne	.-38     	; 0x71a <adc_calibrate+0x96>
		{
			if((cal_vals[k] > max) && (cal_vals[k] != 0x3FF)) max = cal_vals[k];
			if(cal_vals[k] < min) min = cal_vals[k];
			avg += cal_vals[k];
		}
		med = (min+max)/2;
 740:	27 01       	movw	r4, r14
 742:	40 0e       	add	r4, r16
 744:	51 1e       	adc	r5, r17
 746:	56 94       	lsr	r5
 748:	47 94       	ror	r4
		avg = avg/10;
 74a:	ad ec       	ldi	r26, 0xCD	; 205
 74c:	bc ec       	ldi	r27, 0xCC	; 204
 74e:	a1 d0       	rcall	.+322    	; 0x892 <__umulhisi3>
 750:	3c 01       	movw	r6, r24
 752:	76 94       	lsr	r7
 754:	67 94       	ror	r6
 756:	76 94       	lsr	r7
 758:	67 94       	ror	r6
 75a:	76 94       	lsr	r7
 75c:	67 94       	ror	r6
		// white    [0,0][0,1][0,2][0,3]
		// black    [1,0][1,1][1,2][1,3]
		// aluminum [2,0][2,1][2,2][2,3]
		// steel    [3,0][3,1][3,2][3,3]
		
		cal_vals_final[j][0] = min;
 75e:	f4 01       	movw	r30, r8
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	e0 5e       	subi	r30, 0xE0	; 224
 76e:	fe 4f       	sbci	r31, 0xFE	; 254
 770:	11 83       	std	Z+1, r17	; 0x01
 772:	00 83       	st	Z, r16
		cal_vals_final[j][1] = max;
 774:	f3 82       	std	Z+3, r15	; 0x03
 776:	e2 82       	std	Z+2, r14	; 0x02
		cal_vals_final[j][2] = med;
 778:	55 82       	std	Z+5, r5	; 0x05
 77a:	44 82       	std	Z+4, r4	; 0x04
		cal_vals_final[j][3] = avg;
 77c:	77 82       	std	Z+7, r7	; 0x07
 77e:	66 82       	std	Z+6, r6	; 0x06
		
		// display the results for the part
		// 1: min, 2: max, 3: med, 4: avg
		// TODO: cycle display until button pressed and then move on to next part?
		PORTC = 0x01;
 780:	81 e0       	ldi	r24, 0x01	; 1
		mTimer(1000);
 782:	88 b9       	out	0x08, r24	; 8
 784:	88 ee       	ldi	r24, 0xE8	; 232
		//PORTC = min;
		display_reflective_reading(min);
 786:	93 e0       	ldi	r25, 0x03	; 3
 788:	44 de       	rcall	.-888    	; 0x412 <mTimer>
		mTimer(7000);
 78a:	c8 01       	movw	r24, r16
 78c:	61 df       	rcall	.-318    	; 0x650 <display_reflective_reading>
 78e:	88 e5       	ldi	r24, 0x58	; 88

		PORTC = 0x02;
 790:	9b e1       	ldi	r25, 0x1B	; 27
		mTimer(1000);
 792:	3f de       	rcall	.-898    	; 0x412 <mTimer>
 794:	42 e0       	ldi	r20, 0x02	; 2
 796:	48 b9       	out	0x08, r20	; 8
		//PORTC = max;
		display_reflective_reading(max);
 798:	88 ee       	ldi	r24, 0xE8	; 232
 79a:	93 e0       	ldi	r25, 0x03	; 3
		mTimer(7000);
 79c:	3a de       	rcall	.-908    	; 0x412 <mTimer>
 79e:	c7 01       	movw	r24, r14

		PORTC = 0x03;
 7a0:	57 df       	rcall	.-338    	; 0x650 <display_reflective_reading>
		mTimer(1000);
 7a2:	88 e5       	ldi	r24, 0x58	; 88
 7a4:	9b e1       	ldi	r25, 0x1B	; 27
 7a6:	35 de       	rcall	.-918    	; 0x412 <mTimer>
		//PORTC = med;
		display_reflective_reading(med);
 7a8:	83 e0       	ldi	r24, 0x03	; 3
 7aa:	88 b9       	out	0x08, r24	; 8
		mTimer(7000);
 7ac:	88 ee       	ldi	r24, 0xE8	; 232
 7ae:	93 e0       	ldi	r25, 0x03	; 3
 7b0:	30 de       	rcall	.-928    	; 0x412 <mTimer>

		PORTC = 0x04;
 7b2:	c2 01       	movw	r24, r4
		mTimer(1000);
 7b4:	4d df       	rcall	.-358    	; 0x650 <display_reflective_reading>
 7b6:	88 e5       	ldi	r24, 0x58	; 88
 7b8:	9b e1       	ldi	r25, 0x1B	; 27
 7ba:	2b de       	rcall	.-938    	; 0x412 <mTimer>
		//PORTC = avg;
		display_reflective_reading(avg);
 7bc:	38 b8       	out	0x08, r3	; 8
 7be:	88 ee       	ldi	r24, 0xE8	; 232
 7c0:	93 e0       	ldi	r25, 0x03	; 3
		mTimer(7000);
 7c2:	27 de       	rcall	.-946    	; 0x412 <mTimer>
 7c4:	c3 01       	movw	r24, r6
 7c6:	44 df       	rcall	.-376    	; 0x650 <display_reflective_reading>
 7c8:	88 e5       	ldi	r24, 0x58	; 88
		
		PORTB = CW;
 7ca:	9b e1       	ldi	r25, 0x1B	; 27
	
	int i,j,k;
	uint16_t cal_vals[10];
	uint16_t min, max, med, avg;
	
	for(j=0;j<4;j++)
 7cc:	22 de       	rcall	.-956    	; 0x412 <mTimer>
 7ce:	35 b8       	out	0x05, r3	; 5
 7d0:	4f ef       	ldi	r20, 0xFF	; 255
 7d2:	84 1a       	sub	r8, r20
 7d4:	94 0a       	sbc	r9, r20
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	88 16       	cp	r8, r24
 7da:	91 04       	cpc	r9, r1
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <adc_calibrate+0x162>
	//PORTC = temp;
	PORTD |= temp;
}

//Calibrate the ADC by running each part through the sensor 10 times, in the order: white, black, aluminum, steel
void adc_calibrate(){
 7de:	fe 01       	movw	r30, r28
 7e0:	31 96       	adiw	r30, 0x01	; 1
		display_reflective_reading(avg);
		mTimer(7000);
		
		PORTB = CW;
	}
}//ADC_calibrate
 7e2:	91 e0       	ldi	r25, 0x01	; 1
 7e4:	7b cf       	rjmp	.-266    	; 0x6dc <adc_calibrate+0x58>
 7e6:	64 96       	adiw	r28, 0x14	; 20
 7e8:	0f b6       	in	r0, 0x3f	; 63
 7ea:	f8 94       	cli
 7ec:	de bf       	out	0x3e, r29	; 62
 7ee:	0f be       	out	0x3f, r0	; 63
 7f0:	cd bf       	out	0x3d, r28	; 61
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	ff 90       	pop	r15
 7fc:	ef 90       	pop	r14
 7fe:	df 90       	pop	r13
 800:	cf 90       	pop	r12
 802:	bf 90       	pop	r11
 804:	af 90       	pop	r10
 806:	9f 90       	pop	r9
 808:	8f 90       	pop	r8
 80a:	7f 90       	pop	r7
 80c:	6f 90       	pop	r6
 80e:	5f 90       	pop	r5
 810:	4f 90       	pop	r4
 812:	3f 90       	pop	r3
 814:	2f 90       	pop	r2
 816:	08 95       	ret

00000818 <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 818:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal
 81a:	8f e8       	ldi	r24, 0x8F	; 143
 81c:	84 b9       	out	0x04, r24	; 4
						// PB3:0 = output for motor
	DDRC = 0xFF;		// Port C all output (LEDs)
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 822:	80 ef       	ldi	r24, 0xF0	; 240
 824:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 826:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 828:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 82a:	18 b8       	out	0x08, r1	; 8
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
	init_motor();
	init_interrupts();
 82c:	f8 94       	cli
 82e:	c0 dd       	rcall	.-1152   	; 0x3b0 <init_ADC>
	init_stepper();
 830:	b1 dd       	rcall	.-1182   	; 0x394 <init_timer0_pwm>
	entryList = initQueue();
 832:	b9 dd       	rcall	.-1166   	; 0x3a6 <init_motor>
 834:	a8 dd       	rcall	.-1200   	; 0x386 <init_interrupts>
 836:	de dd       	rcall	.-1092   	; 0x3f4 <init_stepper>
 838:	5a dc       	rcall	.-1868   	; 0xee <initQueue>
	reflectiveList = initQueue();
 83a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <entryList+0x1>
 83e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <entryList>
 842:	55 dc       	rcall	.-1878   	; 0xee <initQueue>
	classifiedList = initQueue();
 844:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <reflectiveList+0x1>
 848:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <reflectiveList>
 84c:	50 dc       	rcall	.-1888   	; 0xee <initQueue>
	sortedList = initQueue();
 84e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <classifiedList+0x1>
 852:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <classifiedList>
 856:	4b dc       	rcall	.-1898   	; 0xee <initQueue>
	sei();
 858:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <sortedList+0x1>
			//stepper_position((classifiedList->head->type)+1);	
		}
		
	}//while
	*/
	clearQueue(entryList);
 85c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <sortedList>
 860:	78 94       	sei
 862:	10 df       	rcall	.-480    	; 0x684 <adc_calibrate>
 864:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <entryList>
	clearQueue(reflectiveList);
 868:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <entryList+0x1>
 86c:	74 dc       	rcall	.-1816   	; 0x156 <clearQueue>
 86e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <reflectiveList>
	clearQueue(classifiedList);
 872:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <reflectiveList+0x1>
 876:	6f dc       	rcall	.-1826   	; 0x156 <clearQueue>
 878:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <classifiedList>
	clearQueue(sortedList);
 87c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <classifiedList+0x1>
 880:	6a dc       	rcall	.-1836   	; 0x156 <clearQueue>
 882:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <sortedList>
 886:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <sortedList+0x1>
	return 0;
}//main
 88a:	65 dc       	rcall	.-1846   	; 0x156 <clearQueue>
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	08 95       	ret

00000892 <__umulhisi3>:
 892:	a2 9f       	mul	r26, r18
 894:	b0 01       	movw	r22, r0
 896:	b3 9f       	mul	r27, r19
 898:	c0 01       	movw	r24, r0
 89a:	a3 9f       	mul	r26, r19
 89c:	70 0d       	add	r23, r0
 89e:	81 1d       	adc	r24, r1
 8a0:	11 24       	eor	r1, r1
 8a2:	91 1d       	adc	r25, r1
 8a4:	b2 9f       	mul	r27, r18
 8a6:	70 0d       	add	r23, r0
 8a8:	81 1d       	adc	r24, r1
 8aa:	11 24       	eor	r1, r1
 8ac:	91 1d       	adc	r25, r1
 8ae:	08 95       	ret

000008b0 <malloc>:
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	82 30       	cpi	r24, 0x02	; 2
 8ba:	91 05       	cpc	r25, r1
 8bc:	10 f4       	brcc	.+4      	; 0x8c2 <malloc+0x12>
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <__flp>
 8c6:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <__flp+0x1>
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	a0 e0       	ldi	r26, 0x00	; 0
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	30 97       	sbiw	r30, 0x00	; 0
 8d4:	19 f1       	breq	.+70     	; 0x91c <malloc+0x6c>
 8d6:	40 81       	ld	r20, Z
 8d8:	51 81       	ldd	r21, Z+1	; 0x01
 8da:	02 81       	ldd	r16, Z+2	; 0x02
 8dc:	13 81       	ldd	r17, Z+3	; 0x03
 8de:	48 17       	cp	r20, r24
 8e0:	59 07       	cpc	r21, r25
 8e2:	c8 f0       	brcs	.+50     	; 0x916 <malloc+0x66>
 8e4:	84 17       	cp	r24, r20
 8e6:	95 07       	cpc	r25, r21
 8e8:	69 f4       	brne	.+26     	; 0x904 <malloc+0x54>
 8ea:	10 97       	sbiw	r26, 0x00	; 0
 8ec:	31 f0       	breq	.+12     	; 0x8fa <malloc+0x4a>
 8ee:	12 96       	adiw	r26, 0x02	; 2
 8f0:	0c 93       	st	X, r16
 8f2:	12 97       	sbiw	r26, 0x02	; 2
 8f4:	13 96       	adiw	r26, 0x03	; 3
 8f6:	1c 93       	st	X, r17
 8f8:	27 c0       	rjmp	.+78     	; 0x948 <malloc+0x98>
 8fa:	00 93 4a 01 	sts	0x014A, r16	; 0x80014a <__flp>
 8fe:	10 93 4b 01 	sts	0x014B, r17	; 0x80014b <__flp+0x1>
 902:	22 c0       	rjmp	.+68     	; 0x948 <malloc+0x98>
 904:	21 15       	cp	r18, r1
 906:	31 05       	cpc	r19, r1
 908:	19 f0       	breq	.+6      	; 0x910 <malloc+0x60>
 90a:	42 17       	cp	r20, r18
 90c:	53 07       	cpc	r21, r19
 90e:	18 f4       	brcc	.+6      	; 0x916 <malloc+0x66>
 910:	9a 01       	movw	r18, r20
 912:	bd 01       	movw	r22, r26
 914:	ef 01       	movw	r28, r30
 916:	df 01       	movw	r26, r30
 918:	f8 01       	movw	r30, r16
 91a:	db cf       	rjmp	.-74     	; 0x8d2 <malloc+0x22>
 91c:	21 15       	cp	r18, r1
 91e:	31 05       	cpc	r19, r1
 920:	f9 f0       	breq	.+62     	; 0x960 <malloc+0xb0>
 922:	28 1b       	sub	r18, r24
 924:	39 0b       	sbc	r19, r25
 926:	24 30       	cpi	r18, 0x04	; 4
 928:	31 05       	cpc	r19, r1
 92a:	80 f4       	brcc	.+32     	; 0x94c <malloc+0x9c>
 92c:	8a 81       	ldd	r24, Y+2	; 0x02
 92e:	9b 81       	ldd	r25, Y+3	; 0x03
 930:	61 15       	cp	r22, r1
 932:	71 05       	cpc	r23, r1
 934:	21 f0       	breq	.+8      	; 0x93e <malloc+0x8e>
 936:	fb 01       	movw	r30, r22
 938:	93 83       	std	Z+3, r25	; 0x03
 93a:	82 83       	std	Z+2, r24	; 0x02
 93c:	04 c0       	rjmp	.+8      	; 0x946 <malloc+0x96>
 93e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__flp+0x1>
 942:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__flp>
 946:	fe 01       	movw	r30, r28
 948:	32 96       	adiw	r30, 0x02	; 2
 94a:	44 c0       	rjmp	.+136    	; 0x9d4 <malloc+0x124>
 94c:	fe 01       	movw	r30, r28
 94e:	e2 0f       	add	r30, r18
 950:	f3 1f       	adc	r31, r19
 952:	81 93       	st	Z+, r24
 954:	91 93       	st	Z+, r25
 956:	22 50       	subi	r18, 0x02	; 2
 958:	31 09       	sbc	r19, r1
 95a:	39 83       	std	Y+1, r19	; 0x01
 95c:	28 83       	st	Y, r18
 95e:	3a c0       	rjmp	.+116    	; 0x9d4 <malloc+0x124>
 960:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__brkval>
 964:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__brkval+0x1>
 968:	23 2b       	or	r18, r19
 96a:	41 f4       	brne	.+16     	; 0x97c <malloc+0xcc>
 96c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 970:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 974:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <__brkval+0x1>
 978:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__brkval>
 97c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 980:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 984:	21 15       	cp	r18, r1
 986:	31 05       	cpc	r19, r1
 988:	41 f4       	brne	.+16     	; 0x99a <malloc+0xea>
 98a:	2d b7       	in	r18, 0x3d	; 61
 98c:	3e b7       	in	r19, 0x3e	; 62
 98e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 992:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 996:	24 1b       	sub	r18, r20
 998:	35 0b       	sbc	r19, r21
 99a:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <__brkval>
 99e:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <__brkval+0x1>
 9a2:	e2 17       	cp	r30, r18
 9a4:	f3 07       	cpc	r31, r19
 9a6:	a0 f4       	brcc	.+40     	; 0x9d0 <malloc+0x120>
 9a8:	2e 1b       	sub	r18, r30
 9aa:	3f 0b       	sbc	r19, r31
 9ac:	28 17       	cp	r18, r24
 9ae:	39 07       	cpc	r19, r25
 9b0:	78 f0       	brcs	.+30     	; 0x9d0 <malloc+0x120>
 9b2:	ac 01       	movw	r20, r24
 9b4:	4e 5f       	subi	r20, 0xFE	; 254
 9b6:	5f 4f       	sbci	r21, 0xFF	; 255
 9b8:	24 17       	cp	r18, r20
 9ba:	35 07       	cpc	r19, r21
 9bc:	48 f0       	brcs	.+18     	; 0x9d0 <malloc+0x120>
 9be:	4e 0f       	add	r20, r30
 9c0:	5f 1f       	adc	r21, r31
 9c2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <__brkval+0x1>
 9c6:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <__brkval>
 9ca:	81 93       	st	Z+, r24
 9cc:	91 93       	st	Z+, r25
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <malloc+0x124>
 9d0:	e0 e0       	ldi	r30, 0x00	; 0
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	cf 01       	movw	r24, r30
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	08 95       	ret

000009e0 <free>:
 9e0:	cf 93       	push	r28
 9e2:	df 93       	push	r29
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	09 f4       	brne	.+2      	; 0x9ea <free+0xa>
 9e8:	81 c0       	rjmp	.+258    	; 0xaec <free+0x10c>
 9ea:	fc 01       	movw	r30, r24
 9ec:	32 97       	sbiw	r30, 0x02	; 2
 9ee:	13 82       	std	Z+3, r1	; 0x03
 9f0:	12 82       	std	Z+2, r1	; 0x02
 9f2:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <__flp>
 9f6:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <__flp+0x1>
 9fa:	10 97       	sbiw	r26, 0x00	; 0
 9fc:	81 f4       	brne	.+32     	; 0xa1e <free+0x3e>
 9fe:	20 81       	ld	r18, Z
 a00:	31 81       	ldd	r19, Z+1	; 0x01
 a02:	82 0f       	add	r24, r18
 a04:	93 1f       	adc	r25, r19
 a06:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__brkval>
 a0a:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__brkval+0x1>
 a0e:	28 17       	cp	r18, r24
 a10:	39 07       	cpc	r19, r25
 a12:	51 f5       	brne	.+84     	; 0xa68 <free+0x88>
 a14:	f0 93 49 01 	sts	0x0149, r31	; 0x800149 <__brkval+0x1>
 a18:	e0 93 48 01 	sts	0x0148, r30	; 0x800148 <__brkval>
 a1c:	67 c0       	rjmp	.+206    	; 0xaec <free+0x10c>
 a1e:	ed 01       	movw	r28, r26
 a20:	20 e0       	ldi	r18, 0x00	; 0
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	ce 17       	cp	r28, r30
 a26:	df 07       	cpc	r29, r31
 a28:	40 f4       	brcc	.+16     	; 0xa3a <free+0x5a>
 a2a:	4a 81       	ldd	r20, Y+2	; 0x02
 a2c:	5b 81       	ldd	r21, Y+3	; 0x03
 a2e:	9e 01       	movw	r18, r28
 a30:	41 15       	cp	r20, r1
 a32:	51 05       	cpc	r21, r1
 a34:	f1 f0       	breq	.+60     	; 0xa72 <free+0x92>
 a36:	ea 01       	movw	r28, r20
 a38:	f5 cf       	rjmp	.-22     	; 0xa24 <free+0x44>
 a3a:	d3 83       	std	Z+3, r29	; 0x03
 a3c:	c2 83       	std	Z+2, r28	; 0x02
 a3e:	40 81       	ld	r20, Z
 a40:	51 81       	ldd	r21, Z+1	; 0x01
 a42:	84 0f       	add	r24, r20
 a44:	95 1f       	adc	r25, r21
 a46:	c8 17       	cp	r28, r24
 a48:	d9 07       	cpc	r29, r25
 a4a:	59 f4       	brne	.+22     	; 0xa62 <free+0x82>
 a4c:	88 81       	ld	r24, Y
 a4e:	99 81       	ldd	r25, Y+1	; 0x01
 a50:	84 0f       	add	r24, r20
 a52:	95 1f       	adc	r25, r21
 a54:	02 96       	adiw	r24, 0x02	; 2
 a56:	91 83       	std	Z+1, r25	; 0x01
 a58:	80 83       	st	Z, r24
 a5a:	8a 81       	ldd	r24, Y+2	; 0x02
 a5c:	9b 81       	ldd	r25, Y+3	; 0x03
 a5e:	93 83       	std	Z+3, r25	; 0x03
 a60:	82 83       	std	Z+2, r24	; 0x02
 a62:	21 15       	cp	r18, r1
 a64:	31 05       	cpc	r19, r1
 a66:	29 f4       	brne	.+10     	; 0xa72 <free+0x92>
 a68:	f0 93 4b 01 	sts	0x014B, r31	; 0x80014b <__flp+0x1>
 a6c:	e0 93 4a 01 	sts	0x014A, r30	; 0x80014a <__flp>
 a70:	3d c0       	rjmp	.+122    	; 0xaec <free+0x10c>
 a72:	e9 01       	movw	r28, r18
 a74:	fb 83       	std	Y+3, r31	; 0x03
 a76:	ea 83       	std	Y+2, r30	; 0x02
 a78:	49 91       	ld	r20, Y+
 a7a:	59 91       	ld	r21, Y+
 a7c:	c4 0f       	add	r28, r20
 a7e:	d5 1f       	adc	r29, r21
 a80:	ec 17       	cp	r30, r28
 a82:	fd 07       	cpc	r31, r29
 a84:	61 f4       	brne	.+24     	; 0xa9e <free+0xbe>
 a86:	80 81       	ld	r24, Z
 a88:	91 81       	ldd	r25, Z+1	; 0x01
 a8a:	84 0f       	add	r24, r20
 a8c:	95 1f       	adc	r25, r21
 a8e:	02 96       	adiw	r24, 0x02	; 2
 a90:	e9 01       	movw	r28, r18
 a92:	99 83       	std	Y+1, r25	; 0x01
 a94:	88 83       	st	Y, r24
 a96:	82 81       	ldd	r24, Z+2	; 0x02
 a98:	93 81       	ldd	r25, Z+3	; 0x03
 a9a:	9b 83       	std	Y+3, r25	; 0x03
 a9c:	8a 83       	std	Y+2, r24	; 0x02
 a9e:	e0 e0       	ldi	r30, 0x00	; 0
 aa0:	f0 e0       	ldi	r31, 0x00	; 0
 aa2:	12 96       	adiw	r26, 0x02	; 2
 aa4:	8d 91       	ld	r24, X+
 aa6:	9c 91       	ld	r25, X
 aa8:	13 97       	sbiw	r26, 0x03	; 3
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	19 f0       	breq	.+6      	; 0xab4 <free+0xd4>
 aae:	fd 01       	movw	r30, r26
 ab0:	dc 01       	movw	r26, r24
 ab2:	f7 cf       	rjmp	.-18     	; 0xaa2 <free+0xc2>
 ab4:	8d 91       	ld	r24, X+
 ab6:	9c 91       	ld	r25, X
 ab8:	11 97       	sbiw	r26, 0x01	; 1
 aba:	9d 01       	movw	r18, r26
 abc:	2e 5f       	subi	r18, 0xFE	; 254
 abe:	3f 4f       	sbci	r19, 0xFF	; 255
 ac0:	82 0f       	add	r24, r18
 ac2:	93 1f       	adc	r25, r19
 ac4:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <__brkval>
 ac8:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <__brkval+0x1>
 acc:	28 17       	cp	r18, r24
 ace:	39 07       	cpc	r19, r25
 ad0:	69 f4       	brne	.+26     	; 0xaec <free+0x10c>
 ad2:	30 97       	sbiw	r30, 0x00	; 0
 ad4:	29 f4       	brne	.+10     	; 0xae0 <free+0x100>
 ad6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__flp+0x1>
 ada:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__flp>
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <free+0x104>
 ae0:	13 82       	std	Z+3, r1	; 0x03
 ae2:	12 82       	std	Z+2, r1	; 0x02
 ae4:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <__brkval+0x1>
 ae8:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <__brkval>
 aec:	df 91       	pop	r29
 aee:	cf 91       	pop	r28
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
