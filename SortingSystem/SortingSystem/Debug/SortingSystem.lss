
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800116  00800116  00000a2c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001adb  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9c  00000000  00000000  000026df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cda  00000000  00000000  0000357b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000976  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfc  00000000  00000000  00004fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005bc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__vector_1>
   6:	00 00       	nop
   8:	c2 c0       	rjmp	.+388    	; 0x18e <__vector_2>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__vector_3>
   e:	00 00       	nop
  10:	e6 c0       	rjmp	.+460    	; 0x1de <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	c3 c0       	rjmp	.+390    	; 0x1fc <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e8       	ldi	r30, 0x82	; 130
  ac:	f9 e0       	ldi	r31, 0x09	; 9
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 31       	cpi	r26, 0x16	; 22
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a6 e1       	ldi	r26, 0x16	; 22
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a2 36       	cpi	r26, 0x62	; 98
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	f4 d2       	rcall	.+1512   	; 0x6b8 <main>
  d0:	56 c4       	rjmp	.+2220   	; 0x97e <_exit>

000000d2 <__bad_interrupt>:
  d2:	de c0       	rjmp	.+444    	; 0x290 <__vector_default>

000000d4 <initItem>:
/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
item* initItem(){
	item* newItem = malloc(sizeof(item));
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	31 d3       	rcall	.+1634   	; 0x73c <malloc>
  da:	fc 01       	movw	r30, r24
	newItem->next = NULL;
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
	newItem->metal = 0;
  e0:	10 82       	st	Z, r1
	newItem->reflective = 0;
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
	newItem->type = 0;
  e6:	13 82       	std	Z+3, r1	; 0x03
	newItem->stage = 0;
  e8:	14 82       	std	Z+4, r1	; 0x04
	newItem->number = 0;
  ea:	15 82       	std	Z+5, r1	; 0x05
	return newItem;
}//initLink
  ec:	08 95       	ret

000000ee <initQueue>:

queue* initQueue(){
	queue* q = malloc(sizeof(queue));
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	24 d3       	rcall	.+1608   	; 0x73c <malloc>
	q->head = NULL;	
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
	q->tail = NULL;	
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
	return q;
}//initQueue
  fe:	08 95       	ret

00000100 <enqueue>:

/****************************************************************************************
*  DESC: Accepts as input a new link by reference, and assigns the head and tail		
*  of the queue accordingly (Will put an item at the tail of the queue)		
*/
void enqueue(queue* q, item* newItem){
 100:	fc 01       	movw	r30, r24
	if (q->tail != NULL){
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
		/* Not an empty queue */
		q->tail->next = newItem;
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
		q->tail = newItem;
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		q->head = newItem;
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
		q->tail = newItem;
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:

/**************************************************************************************
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* RETURNS: Pointer to the dequeued link
*/
item* dequeue(queue* q){
 122:	dc 01       	movw	r26, r24
	item* deQueuedItem = q->head;	// Will set to NULL if Head points to NULL
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
	/* Ensure it is not an empty queue */
	if (q->head != NULL){
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	39 f0       	breq	.+14     	; 0x13c <dequeue+0x1a>
		q->head = q->head->next;
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
	}/*if*/
	if(q->head == NULL) q->tail = NULL; // if that was the last element in the queue, set tail to NULL as well
 138:	89 2b       	or	r24, r25
 13a:	21 f4       	brne	.+8      	; 0x144 <dequeue+0x22>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
	return deQueuedItem;
}/*dequeue*/
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <__vector_21>:
		mTimer(7000);
		
		//update_motor_speed(MOTOR_SPEED);
		init_motor();
	}
}//ADC_calibrate
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_17>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_1>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <OS1_flag>
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_2>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <FER_flag>
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_3>:
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <OS2_flag>
 1be:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 1c2:	88 23       	and	r24, r24
 1c4:	19 f0       	breq	.+6      	; 0x1cc <__vector_3+0x20>
 1c6:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <reflective_present>
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <__vector_3+0x26>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <reflective_present>
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_4>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <OS3_flag>
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_29>:
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 21a:	88 23       	and	r24, r24
 21c:	61 f1       	breq	.+88     	; 0x276 <__vector_29+0x7a>
 21e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 228:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 22c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_result>
 230:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_result+0x1>
 234:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 238:	98 2f       	mov	r25, r24
 23a:	88 27       	eor	r24, r24
 23c:	82 2b       	or	r24, r18
 23e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 242:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 246:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ADC_result>
 24a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ADC_result+0x1>
 24e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ADC_lowest_val>
 252:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <ADC_lowest_val+0x1>
 256:	28 17       	cp	r18, r24
 258:	39 07       	cpc	r19, r25
 25a:	40 f4       	brcc	.+16     	; 0x26c <__vector_29+0x70>
 25c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_result>
 260:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_result+0x1>
 264:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 268:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
 26c:	ea e7       	ldi	r30, 0x7A	; 122
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_default>:
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <init_interrupts>:
 2a4:	8a e9       	ldi	r24, 0x9A	; 154
 2a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2aa:	8d b3       	in	r24, 0x1d	; 29
 2ac:	8f 60       	ori	r24, 0x0F	; 15
 2ae:	8d bb       	out	0x1d, r24	; 29
 2b0:	08 95       	ret

000002b2 <init_timer0_pwm>:
 2b2:	84 b5       	in	r24, 0x24	; 36
 2b4:	83 68       	ori	r24, 0x83	; 131
 2b6:	84 bd       	out	0x24, r24	; 36
 2b8:	85 b5       	in	r24, 0x25	; 37
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	85 bd       	out	0x25, r24	; 37
 2be:	80 e8       	ldi	r24, 0x80	; 128
 2c0:	87 bd       	out	0x27, r24	; 39
 2c2:	08 95       	ret

000002c4 <init_motor>:
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	85 b9       	out	0x05, r24	; 5
 2c8:	80 e7       	ldi	r24, 0x70	; 112
 2ca:	87 bd       	out	0x27, r24	; 39
 2cc:	08 95       	ret

000002ce <init_ADC>:
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	93 e0       	ldi	r25, 0x03	; 3
 2d2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 2d6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 2da:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 2de:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
 2e2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <reflective_present>
 2e6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <item_ready>
 2ea:	ec e7       	ldi	r30, 0x7C	; 124
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	80 83       	st	Z, r24
 2f4:	ea e7       	ldi	r30, 0x7A	; 122
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	80 83       	st	Z, r24
 2fe:	80 81       	ld	r24, Z
 300:	81 60       	ori	r24, 0x01	; 1
 302:	80 83       	st	Z, r24
 304:	80 81       	ld	r24, Z
 306:	88 60       	ori	r24, 0x08	; 8
 308:	80 83       	st	Z, r24
 30a:	80 81       	ld	r24, Z
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 83       	st	Z, r24
 310:	08 95       	ret

00000312 <init_stepper>:
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	81 b9       	out	0x01, r24	; 1
 316:	85 e3       	ldi	r24, 0x35	; 53
 318:	82 b9       	out	0x02, r24	; 2
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <motor_position+0x1>
 322:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <motor_position>
 326:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <stepper_on+0x1>
 32a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <stepper_on>
 32e:	08 95       	ret

00000330 <mTimer>:
 330:	ac 01       	movw	r20, r24
 332:	e1 e8       	ldi	r30, 0x81	; 129
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	90 81       	ld	r25, Z
 338:	91 60       	ori	r25, 0x01	; 1
 33a:	90 83       	st	Z, r25
 33c:	90 81       	ld	r25, Z
 33e:	98 60       	ori	r25, 0x08	; 8
 340:	90 83       	st	Z, r25
 342:	88 ee       	ldi	r24, 0xE8	; 232
 344:	93 e0       	ldi	r25, 0x03	; 3
 346:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 34a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 34e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 352:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 356:	b1 9a       	sbi	0x16, 1	; 22
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	05 c0       	rjmp	.+10     	; 0x368 <mTimer+0x38>
 35e:	b1 9b       	sbis	0x16, 1	; 22
 360:	fe cf       	rjmp	.-4      	; 0x35e <mTimer+0x2e>
 362:	b1 9a       	sbi	0x16, 1	; 22
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	24 17       	cp	r18, r20
 36a:	35 07       	cpc	r19, r21
 36c:	1c f4       	brge	.+6      	; 0x374 <mTimer+0x44>
 36e:	b1 9b       	sbis	0x16, 1	; 22
 370:	f6 cf       	rjmp	.-20     	; 0x35e <mTimer+0x2e>
 372:	f7 cf       	rjmp	.-18     	; 0x362 <mTimer+0x32>
 374:	08 95       	ret

00000376 <stepper_rotate>:
 376:	cf 92       	push	r12
 378:	df 92       	push	r13
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	18 16       	cp	r1, r24
 388:	19 06       	cpc	r1, r25
 38a:	0c f0       	brlt	.+2      	; 0x38e <stepper_rotate+0x18>
 38c:	61 c0       	rjmp	.+194    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 38e:	6b 01       	movw	r12, r22
 390:	8c 01       	movw	r16, r24
 392:	c0 e0       	ldi	r28, 0x00	; 0
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	0f 2e       	mov	r0, r31
 398:	fa e0       	ldi	r31, 0x0A	; 10
 39a:	ef 2e       	mov	r14, r31
 39c:	f1 2c       	mov	r15, r1
 39e:	f0 2d       	mov	r31, r0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	c8 16       	cp	r12, r24
 3a4:	d1 04       	cpc	r13, r1
 3a6:	d1 f4       	brne	.+52     	; 0x3dc <stepper_rotate+0x66>
 3a8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 3ac:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 3b0:	e6 5f       	subi	r30, 0xF6	; 246
 3b2:	fe 4f       	sbci	r31, 0xFE	; 254
 3b4:	80 81       	ld	r24, Z
 3b6:	82 b9       	out	0x02, r24	; 2
 3b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3bc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	83 70       	andi	r24, 0x03	; 3
 3c4:	90 78       	andi	r25, 0x80	; 128
 3c6:	99 23       	and	r25, r25
 3c8:	24 f4       	brge	.+8      	; 0x3d2 <stepper_rotate+0x5c>
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	8c 6f       	ori	r24, 0xFC	; 252
 3ce:	9f 6f       	ori	r25, 0xFF	; 255
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 3d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 3da:	1d c0       	rjmp	.+58     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	c8 16       	cp	r12, r24
 3e0:	d8 06       	cpc	r13, r24
 3e2:	c9 f4       	brne	.+50     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3e4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 3e8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 3ec:	ea 5f       	subi	r30, 0xFA	; 250
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	80 81       	ld	r24, Z
 3f2:	82 b9       	out	0x02, r24	; 2
 3f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3f8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	83 70       	andi	r24, 0x03	; 3
 400:	90 78       	andi	r25, 0x80	; 128
 402:	99 23       	and	r25, r25
 404:	24 f4       	brge	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	8c 6f       	ori	r24, 0xFC	; 252
 40a:	9f 6f       	ori	r25, 0xFF	; 255
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 412:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 416:	c7 01       	movw	r24, r14
 418:	8b df       	rcall	.-234    	; 0x330 <mTimer>
 41a:	c4 30       	cpi	r28, 0x04	; 4
 41c:	d1 05       	cpc	r29, r1
 41e:	3c f4       	brge	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	86 e0       	ldi	r24, 0x06	; 6
 422:	e8 16       	cp	r14, r24
 424:	f1 04       	cpc	r15, r1
 426:	1c f0       	brlt	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	e8 1a       	sub	r14, r24
 42c:	f1 08       	sbc	r15, r1
 42e:	c8 01       	movw	r24, r16
 430:	8c 1b       	sub	r24, r28
 432:	9d 0b       	sbc	r25, r29
 434:	05 97       	sbiw	r24, 0x05	; 5
 436:	3c f4       	brge	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 438:	8b e0       	ldi	r24, 0x0B	; 11
 43a:	e8 16       	cp	r14, r24
 43c:	f1 04       	cpc	r15, r1
 43e:	1c f4       	brge	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	e8 1a       	sub	r14, r24
 444:	f8 0a       	sbc	r15, r24
 446:	21 96       	adiw	r28, 0x01	; 1
 448:	0c 17       	cp	r16, r28
 44a:	1d 07       	cpc	r17, r29
 44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	a8 cf       	rjmp	.-176    	; 0x3a0 <stepper_rotate+0x2a>
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	08 95       	ret

00000462 <stepper_position>:
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	c8 2f       	mov	r28, r24
 468:	d0 e0       	ldi	r29, 0x00	; 0
 46a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <motor_position>
 46e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <motor_position+0x1>
 472:	9e 01       	movw	r18, r28
 474:	28 1b       	sub	r18, r24
 476:	39 0b       	sbc	r19, r25
 478:	21 30       	cpi	r18, 0x01	; 1
 47a:	31 05       	cpc	r19, r1
 47c:	21 f0       	breq	.+8      	; 0x486 <stepper_position+0x24>
 47e:	2d 3f       	cpi	r18, 0xFD	; 253
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	38 07       	cpc	r19, r24
 484:	31 f4       	brne	.+12     	; 0x492 <stepper_position+0x30>
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	82 e3       	ldi	r24, 0x32	; 50
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	73 df       	rcall	.-282    	; 0x376 <stepper_rotate>
 490:	18 c0       	rjmp	.+48     	; 0x4c2 <stepper_position+0x60>
 492:	2f 3f       	cpi	r18, 0xFF	; 255
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	38 07       	cpc	r19, r24
 498:	19 f0       	breq	.+6      	; 0x4a0 <stepper_position+0x3e>
 49a:	23 30       	cpi	r18, 0x03	; 3
 49c:	31 05       	cpc	r19, r1
 49e:	31 f4       	brne	.+12     	; 0x4ac <stepper_position+0x4a>
 4a0:	6f ef       	ldi	r22, 0xFF	; 255
 4a2:	7f ef       	ldi	r23, 0xFF	; 255
 4a4:	82 e3       	ldi	r24, 0x32	; 50
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	66 df       	rcall	.-308    	; 0x376 <stepper_rotate>
 4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <stepper_position+0x60>
 4ac:	22 30       	cpi	r18, 0x02	; 2
 4ae:	31 05       	cpc	r19, r1
 4b0:	19 f0       	breq	.+6      	; 0x4b8 <stepper_position+0x56>
 4b2:	2e 3f       	cpi	r18, 0xFE	; 254
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	29 f4       	brne	.+10     	; 0x4c2 <stepper_position+0x60>
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	84 e6       	ldi	r24, 0x64	; 100
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	5a df       	rcall	.-332    	; 0x376 <stepper_rotate>
 4c2:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <motor_position+0x1>
 4c6:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <motor_position>
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <entry_sensor>:

void entry_sensor()
{
	PORTC = 0x10;
 4d0:	80 e1       	ldi	r24, 0x10	; 16
 4d2:	88 b9       	out	0x08, r24	; 8
	OS1_flag = 0;
 4d4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <OS1_flag>
	// To keep track of how many items have been added
	item_number++;
 4d8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <item_number>
 4dc:	8f 5f       	subi	r24, 0xFF	; 255
 4de:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <item_number>
	//Add a new item to the queue
	item* newItem = initItem();
	newItem->number = item_number;
 4e2:	f8 dd       	rcall	.-1040   	; 0xd4 <initItem>
 4e4:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <item_number>
 4e8:	fc 01       	movw	r30, r24
	newItem->stage = 1;
 4ea:	25 83       	std	Z+5, r18	; 0x05
 4ec:	21 e0       	ldi	r18, 0x01	; 1
	enqueue(entryList, newItem);
 4ee:	24 83       	std	Z+4, r18	; 0x04
 4f0:	bc 01       	movw	r22, r24
 4f2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <entryList>
 4f6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <entryList+0x1>
 4fa:	02 ce       	rjmp	.-1020   	; 0x100 <enqueue>
 4fc:	08 95       	ret

000004fe <metal_sensor>:
	//PORTC = entryList->tail->number;
}

void metal_sensor(){
	//If this interrupt fires, then the object is metal
	FER_flag = 0;
 4fe:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <FER_flag>
	entryList->tail->metal = 1;
 502:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <entryList>
 506:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <entryList+0x1>
 50a:	02 80       	ldd	r0, Z+2	; 0x02
 50c:	f3 81       	ldd	r31, Z+3	; 0x03
 50e:	e0 2d       	mov	r30, r0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 83       	st	Z, r24
	PORTC |= 0x20;
 514:	45 9a       	sbi	0x08, 5	; 8
 516:	08 95       	ret

00000518 <reflective_sensor>:
}

void reflective_sensor(){
	OS2_flag = 0;
 518:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <OS2_flag>
	PORTC |= 0x40;
 51c:	46 9a       	sbi	0x08, 6	; 8
	//object entering reflective sensor zone, start ADC conversion
	if(reflective_present)
 51e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 522:	88 23       	and	r24, r24
 524:	31 f0       	breq	.+12     	; 0x532 <reflective_sensor+0x1a>
	{
		ADCSRA |= _BV(ADSC);
 526:	ea e7       	ldi	r30, 0x7A	; 122
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	80 64       	ori	r24, 0x40	; 64
 52e:	80 83       	st	Z, r24
 530:	08 95       	ret
	}
	// object exiting the reflective sensor zone, item ready to be classified
	else
	{
		if(STATE == OPERATIONAL)
 532:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <STATE>
 536:	82 30       	cpi	r24, 0x02	; 2
 538:	a1 f4       	brne	.+40     	; 0x562 <reflective_sensor+0x4a>
		{
			item* reflective_sensor_item = dequeue(entryList);
 53a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <entryList>
 53e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <entryList+0x1>
 542:	ef dd       	rcall	.-1058   	; 0x122 <dequeue>
				mTimer(2000);
				PORTC = entryList->head->number;
				mTimer(2000);
			}
			*/
			reflective_sensor_item->reflective = ADC_lowest_val;
 544:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <ADC_lowest_val>
 548:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <ADC_lowest_val+0x1>
 54c:	fc 01       	movw	r30, r24
 54e:	32 83       	std	Z+2, r19	; 0x02
 550:	21 83       	std	Z+1, r18	; 0x01
			reflective_sensor_item->stage = 2;	
 552:	22 e0       	ldi	r18, 0x02	; 2
 554:	24 83       	std	Z+4, r18	; 0x04
			enqueue(reflectiveList, reflective_sensor_item);
 556:	bc 01       	movw	r22, r24
 558:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <reflectiveList>
 55c:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <reflectiveList+0x1>
 560:	cf dd       	rcall	.-1122   	; 0x100 <enqueue>
		}
		ADC_lowest_val = 0x3FF;
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	93 e0       	ldi	r25, 0x03	; 3
 566:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 56a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
		item_ready = 1;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <item_ready>
 574:	08 95       	ret

00000576 <classify_item>:
	}
}

void classify_item(){
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
	item_ready = 0;
 57a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <item_ready>
	item* item_to_classify = dequeue(reflectiveList);
 57e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <reflectiveList>
 582:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <reflectiveList+0x1>
 586:	cd dd       	rcall	.-1126   	; 0x122 <dequeue>
 588:	ec 01       	movw	r28, r24
	uint16_t r = item_to_classify->reflective;
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
	uint8_t m = item_to_classify->metal;
 58e:	28 81       	ld	r18, Y
	uint16_t diff_white;
	uint16_t diff_black;
	uint16_t diff_steel;
	uint16_t diff_aluminum;

	if(m == 0)
 590:	21 11       	cpse	r18, r1
 592:	2c c0       	rjmp	.+88     	; 0x5ec <classify_item+0x76>
	{
		diff_white = abs(calibration_vals[0] - r);
 594:	ee e0       	ldi	r30, 0x0E	; 14
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	40 81       	ld	r20, Z
 59a:	51 81       	ldd	r21, Z+1	; 0x01
		diff_black = abs(calibration_vals[1] - r);
 59c:	22 81       	ldd	r18, Z+2	; 0x02
 59e:	33 81       	ldd	r19, Z+3	; 0x03
		if(diff_white < diff_black) 
 5a0:	48 1b       	sub	r20, r24
 5a2:	59 0b       	sbc	r21, r25
 5a4:	ba 01       	movw	r22, r20
 5a6:	22 f4       	brpl	.+8      	; 0x5b0 <classify_item+0x3a>
 5a8:	66 27       	eor	r22, r22
 5aa:	77 27       	eor	r23, r23
 5ac:	64 1b       	sub	r22, r20
 5ae:	75 0b       	sbc	r23, r21
 5b0:	a9 01       	movw	r20, r18
 5b2:	48 1b       	sub	r20, r24
 5b4:	59 0b       	sbc	r21, r25
 5b6:	9a 01       	movw	r18, r20
 5b8:	22 f4       	brpl	.+8      	; 0x5c2 <classify_item+0x4c>
 5ba:	22 27       	eor	r18, r18
 5bc:	33 27       	eor	r19, r19
 5be:	24 1b       	sub	r18, r20
 5c0:	35 0b       	sbc	r19, r21
 5c2:	62 17       	cp	r22, r18
 5c4:	73 07       	cpc	r23, r19
 5c6:	48 f4       	brcc	.+18     	; 0x5da <classify_item+0x64>
		{
			type = WHITE;
			sorted_items_array[WHITE]++;
 5c8:	e8 e1       	ldi	r30, 0x18	; 24
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	80 81       	ld	r24, Z
 5ce:	91 81       	ldd	r25, Z+1	; 0x01
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	91 83       	std	Z+1, r25	; 0x01
 5d4:	80 83       	st	Z, r24
	{
		diff_white = abs(calibration_vals[0] - r);
		diff_black = abs(calibration_vals[1] - r);
		if(diff_white < diff_black) 
		{
			type = WHITE;
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	38 c0       	rjmp	.+112    	; 0x64a <classify_item+0xd4>
			sorted_items_array[WHITE]++;
		}
		else 
		{
			type = BLACK;
			sorted_items_array[BLACK]++;
 5da:	e8 e1       	ldi	r30, 0x18	; 24
 5dc:	f1 e0       	ldi	r31, 0x01	; 1
 5de:	84 81       	ldd	r24, Z+4	; 0x04
 5e0:	95 81       	ldd	r25, Z+5	; 0x05
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	95 83       	std	Z+5, r25	; 0x05
 5e6:	84 83       	std	Z+4, r24	; 0x04
			type = WHITE;
			sorted_items_array[WHITE]++;
		}
		else 
		{
			type = BLACK;
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	2f c0       	rjmp	.+94     	; 0x64a <classify_item+0xd4>
			sorted_items_array[BLACK]++;
		}
	}
	
	if(m == 1)
 5ec:	21 30       	cpi	r18, 0x01	; 1
 5ee:	61 f5       	brne	.+88     	; 0x648 <classify_item+0xd2>
	{
		diff_aluminum = abs(calibration_vals[2] - r);
 5f0:	ee e0       	ldi	r30, 0x0E	; 14
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	44 81       	ldd	r20, Z+4	; 0x04
 5f6:	55 81       	ldd	r21, Z+5	; 0x05
		diff_steel = abs(calibration_vals[3] - r);
 5f8:	26 81       	ldd	r18, Z+6	; 0x06
 5fa:	37 81       	ldd	r19, Z+7	; 0x07
		if(diff_aluminum < diff_steel) 
 5fc:	48 1b       	sub	r20, r24
 5fe:	59 0b       	sbc	r21, r25
 600:	ba 01       	movw	r22, r20
 602:	22 f4       	brpl	.+8      	; 0x60c <classify_item+0x96>
 604:	66 27       	eor	r22, r22
 606:	77 27       	eor	r23, r23
 608:	64 1b       	sub	r22, r20
 60a:	75 0b       	sbc	r23, r21
 60c:	a9 01       	movw	r20, r18
 60e:	48 1b       	sub	r20, r24
 610:	59 0b       	sbc	r21, r25
 612:	9a 01       	movw	r18, r20
 614:	22 f4       	brpl	.+8      	; 0x61e <classify_item+0xa8>
 616:	22 27       	eor	r18, r18
 618:	33 27       	eor	r19, r19
 61a:	24 1b       	sub	r18, r20
 61c:	35 0b       	sbc	r19, r21
 61e:	62 17       	cp	r22, r18
 620:	73 07       	cpc	r23, r19
 622:	48 f4       	brcc	.+18     	; 0x636 <classify_item+0xc0>
		{
			type = ALUMINUM;
			sorted_items_array[ALUMINUM]++;
 624:	e8 e1       	ldi	r30, 0x18	; 24
 626:	f1 e0       	ldi	r31, 0x01	; 1
 628:	86 81       	ldd	r24, Z+6	; 0x06
 62a:	97 81       	ldd	r25, Z+7	; 0x07
 62c:	01 96       	adiw	r24, 0x01	; 1
 62e:	97 83       	std	Z+7, r25	; 0x07
 630:	86 83       	std	Z+6, r24	; 0x06
	{
		diff_aluminum = abs(calibration_vals[2] - r);
		diff_steel = abs(calibration_vals[3] - r);
		if(diff_aluminum < diff_steel) 
		{
			type = ALUMINUM;
 632:	83 e0       	ldi	r24, 0x03	; 3
 634:	0a c0       	rjmp	.+20     	; 0x64a <classify_item+0xd4>
			sorted_items_array[ALUMINUM]++;
		}
		else 
		{
			type = STEEL;
			sorted_items_array[STEEL]++;
 636:	e8 e1       	ldi	r30, 0x18	; 24
 638:	f1 e0       	ldi	r31, 0x01	; 1
 63a:	82 81       	ldd	r24, Z+2	; 0x02
 63c:	93 81       	ldd	r25, Z+3	; 0x03
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	93 83       	std	Z+3, r25	; 0x03
 642:	82 83       	std	Z+2, r24	; 0x02
			type = ALUMINUM;
			sorted_items_array[ALUMINUM]++;
		}
		else 
		{
			type = STEEL;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	01 c0       	rjmp	.+2      	; 0x64a <classify_item+0xd4>
void classify_item(){
	item_ready = 0;
	item* item_to_classify = dequeue(reflectiveList);
	uint16_t r = item_to_classify->reflective;
	uint8_t m = item_to_classify->metal;
	uint8_t type = 0;
 648:	80 e0       	ldi	r24, 0x00	; 0
		{
			type = STEEL;
			sorted_items_array[STEEL]++;
		}
	}
	item_to_classify->type = type;
 64a:	8b 83       	std	Y+3, r24	; 0x03
	item_to_classify->stage = 3;
 64c:	83 e0       	ldi	r24, 0x03	; 3
 64e:	8c 83       	std	Y+4, r24	; 0x04
	
	sorted_items_array[TOTAL]++;
 650:	e8 e1       	ldi	r30, 0x18	; 24
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	80 85       	ldd	r24, Z+8	; 0x08
 656:	91 85       	ldd	r25, Z+9	; 0x09
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	91 87       	std	Z+9, r25	; 0x09
 65c:	80 87       	std	Z+8, r24	; 0x08
	enqueue(classifiedList, item_to_classify);
 65e:	be 01       	movw	r22, r28
 660:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <classifiedList>
 664:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <classifiedList+0x1>
 668:	4b dd       	rcall	.-1386   	; 0x100 <enqueue>
	
	//TESTING
	PORTC |= item_to_classify->type;
 66a:	98 b1       	in	r25, 0x08	; 8
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	89 2b       	or	r24, r25
 670:	88 b9       	out	0x08, r24	; 8
	if(item_to_classify->type > 3) PORTC = 0xFF;
 672:	8b 81       	ldd	r24, Y+3	; 0x03
 674:	84 30       	cpi	r24, 0x04	; 4
 676:	10 f0       	brcs	.+4      	; 0x67c <classify_item+0x106>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	88 b9       	out	0x08, r24	; 8
	
}//classify_item
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <exit_sensor>:

void exit_sensor(){
	OS3_flag = 0;
 682:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <OS3_flag>
	// Show sensor triggered
	PORTC |= 0x80;
 686:	47 9a       	sbi	0x08, 7	; 8
	// Brake motor
	PORTB = 0x00;
 688:	15 b8       	out	0x05, r1	; 5
	// Move item to sorted queue
	enqueue(sortedList, dequeue(classifiedList));
 68a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <classifiedList>
 68e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <classifiedList+0x1>
 692:	47 dd       	rcall	.-1394   	; 0x122 <dequeue>
 694:	bc 01       	movw	r22, r24
 696:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sortedList>
 69a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sortedList+0x1>
 69e:	30 dd       	rcall	.-1440   	; 0x100 <enqueue>
	//move stepper to correct position
	stepper_position((sortedList->tail->type)+1);
 6a0:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <sortedList>
 6a4:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <sortedList+0x1>
 6a8:	02 80       	ldd	r0, Z+2	; 0x02
 6aa:	f3 81       	ldd	r31, Z+3	; 0x03
 6ac:	e0 2d       	mov	r30, r0
 6ae:	83 81       	ldd	r24, Z+3	; 0x03
 6b0:	8f 5f       	subi	r24, 0xFF	; 255
	// start motor again
	init_motor();
 6b2:	d7 de       	rcall	.-594    	; 0x462 <stepper_position>
 6b4:	07 ce       	rjmp	.-1010   	; 0x2c4 <init_motor>
 6b6:	08 95       	ret

000006b8 <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 6b8:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 6ba:	8f e8       	ldi	r24, 0x8F	; 143
 6bc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 6c2:	80 ef       	ldi	r24, 0xF0	; 240
 6c4:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 6c6:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 6c8:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 6ca:	18 b8       	out	0x08, r1	; 8
	
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
 6cc:	f8 94       	cli
 6ce:	ff dd       	rcall	.-1026   	; 0x2ce <init_ADC>
 6d0:	f0 dd       	rcall	.-1056   	; 0x2b2 <init_timer0_pwm>
 6d2:	f8 dd       	rcall	.-1040   	; 0x2c4 <init_motor>
 6d4:	e7 dd       	rcall	.-1074   	; 0x2a4 <init_interrupts>
 6d6:	1d de       	rcall	.-966    	; 0x312 <init_stepper>
 6d8:	78 94       	sei
 6da:	09 dd       	rcall	.-1518   	; 0xee <initQueue>
 6dc:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <entryList+0x1>
 6e0:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <entryList>
 6e4:	04 dd       	rcall	.-1528   	; 0xee <initQueue>
 6e6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <reflectiveList+0x1>
 6ea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <reflectiveList>
 6ee:	ff dc       	rcall	.-1538   	; 0xee <initQueue>
 6f0:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <classifiedList+0x1>
 6f4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <classifiedList>
 6f8:	fa dc       	rcall	.-1548   	; 0xee <initQueue>
 6fa:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sortedList+0x1>
 6fe:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sortedList>
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <STATE>
 708:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <item_waiting>
 70c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <item_number>
 710:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <OS1_flag>
 714:	81 11       	cpse	r24, r1
 716:	dc de       	rcall	.-584    	; 0x4d0 <entry_sensor>
 718:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <FER_flag>
 71c:	81 11       	cpse	r24, r1
 71e:	ef de       	rcall	.-546    	; 0x4fe <metal_sensor>
 720:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <OS2_flag>
 724:	81 11       	cpse	r24, r1
 726:	f8 de       	rcall	.-528    	; 0x518 <reflective_sensor>
 728:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <item_ready>
 72c:	81 11       	cpse	r24, r1
 72e:	23 df       	rcall	.-442    	; 0x576 <classify_item>
 730:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <OS3_flag>
 734:	88 23       	and	r24, r24
 736:	61 f3       	breq	.-40     	; 0x710 <main+0x58>
 738:	a4 df       	rcall	.-184    	; 0x682 <exit_sensor>
 73a:	ea cf       	rjmp	.-44     	; 0x710 <main+0x58>

0000073c <malloc>:
 73c:	0f 93       	push	r16
 73e:	1f 93       	push	r17
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	82 30       	cpi	r24, 0x02	; 2
 746:	91 05       	cpc	r25, r1
 748:	10 f4       	brcc	.+4      	; 0x74e <malloc+0x12>
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <__flp>
 752:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <__flp+0x1>
 756:	20 e0       	ldi	r18, 0x00	; 0
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	a0 e0       	ldi	r26, 0x00	; 0
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	19 f1       	breq	.+70     	; 0x7a8 <malloc+0x6c>
 762:	40 81       	ld	r20, Z
 764:	51 81       	ldd	r21, Z+1	; 0x01
 766:	02 81       	ldd	r16, Z+2	; 0x02
 768:	13 81       	ldd	r17, Z+3	; 0x03
 76a:	48 17       	cp	r20, r24
 76c:	59 07       	cpc	r21, r25
 76e:	c8 f0       	brcs	.+50     	; 0x7a2 <malloc+0x66>
 770:	84 17       	cp	r24, r20
 772:	95 07       	cpc	r25, r21
 774:	69 f4       	brne	.+26     	; 0x790 <malloc+0x54>
 776:	10 97       	sbiw	r26, 0x00	; 0
 778:	31 f0       	breq	.+12     	; 0x786 <malloc+0x4a>
 77a:	12 96       	adiw	r26, 0x02	; 2
 77c:	0c 93       	st	X, r16
 77e:	12 97       	sbiw	r26, 0x02	; 2
 780:	13 96       	adiw	r26, 0x03	; 3
 782:	1c 93       	st	X, r17
 784:	27 c0       	rjmp	.+78     	; 0x7d4 <malloc+0x98>
 786:	00 93 60 01 	sts	0x0160, r16	; 0x800160 <__flp>
 78a:	10 93 61 01 	sts	0x0161, r17	; 0x800161 <__flp+0x1>
 78e:	22 c0       	rjmp	.+68     	; 0x7d4 <malloc+0x98>
 790:	21 15       	cp	r18, r1
 792:	31 05       	cpc	r19, r1
 794:	19 f0       	breq	.+6      	; 0x79c <malloc+0x60>
 796:	42 17       	cp	r20, r18
 798:	53 07       	cpc	r21, r19
 79a:	18 f4       	brcc	.+6      	; 0x7a2 <malloc+0x66>
 79c:	9a 01       	movw	r18, r20
 79e:	bd 01       	movw	r22, r26
 7a0:	ef 01       	movw	r28, r30
 7a2:	df 01       	movw	r26, r30
 7a4:	f8 01       	movw	r30, r16
 7a6:	db cf       	rjmp	.-74     	; 0x75e <malloc+0x22>
 7a8:	21 15       	cp	r18, r1
 7aa:	31 05       	cpc	r19, r1
 7ac:	f9 f0       	breq	.+62     	; 0x7ec <malloc+0xb0>
 7ae:	28 1b       	sub	r18, r24
 7b0:	39 0b       	sbc	r19, r25
 7b2:	24 30       	cpi	r18, 0x04	; 4
 7b4:	31 05       	cpc	r19, r1
 7b6:	80 f4       	brcc	.+32     	; 0x7d8 <malloc+0x9c>
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	9b 81       	ldd	r25, Y+3	; 0x03
 7bc:	61 15       	cp	r22, r1
 7be:	71 05       	cpc	r23, r1
 7c0:	21 f0       	breq	.+8      	; 0x7ca <malloc+0x8e>
 7c2:	fb 01       	movw	r30, r22
 7c4:	93 83       	std	Z+3, r25	; 0x03
 7c6:	82 83       	std	Z+2, r24	; 0x02
 7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <malloc+0x96>
 7ca:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__flp+0x1>
 7ce:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__flp>
 7d2:	fe 01       	movw	r30, r28
 7d4:	32 96       	adiw	r30, 0x02	; 2
 7d6:	44 c0       	rjmp	.+136    	; 0x860 <malloc+0x124>
 7d8:	fe 01       	movw	r30, r28
 7da:	e2 0f       	add	r30, r18
 7dc:	f3 1f       	adc	r31, r19
 7de:	81 93       	st	Z+, r24
 7e0:	91 93       	st	Z+, r25
 7e2:	22 50       	subi	r18, 0x02	; 2
 7e4:	31 09       	sbc	r19, r1
 7e6:	39 83       	std	Y+1, r19	; 0x01
 7e8:	28 83       	st	Y, r18
 7ea:	3a c0       	rjmp	.+116    	; 0x860 <malloc+0x124>
 7ec:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 7f0:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 7f4:	23 2b       	or	r18, r19
 7f6:	41 f4       	brne	.+16     	; 0x808 <malloc+0xcc>
 7f8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7fc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 800:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <__brkval+0x1>
 804:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <__brkval>
 808:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 80c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 810:	21 15       	cp	r18, r1
 812:	31 05       	cpc	r19, r1
 814:	41 f4       	brne	.+16     	; 0x826 <malloc+0xea>
 816:	2d b7       	in	r18, 0x3d	; 61
 818:	3e b7       	in	r19, 0x3e	; 62
 81a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 81e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 822:	24 1b       	sub	r18, r20
 824:	35 0b       	sbc	r19, r21
 826:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <__brkval>
 82a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <__brkval+0x1>
 82e:	e2 17       	cp	r30, r18
 830:	f3 07       	cpc	r31, r19
 832:	a0 f4       	brcc	.+40     	; 0x85c <malloc+0x120>
 834:	2e 1b       	sub	r18, r30
 836:	3f 0b       	sbc	r19, r31
 838:	28 17       	cp	r18, r24
 83a:	39 07       	cpc	r19, r25
 83c:	78 f0       	brcs	.+30     	; 0x85c <malloc+0x120>
 83e:	ac 01       	movw	r20, r24
 840:	4e 5f       	subi	r20, 0xFE	; 254
 842:	5f 4f       	sbci	r21, 0xFF	; 255
 844:	24 17       	cp	r18, r20
 846:	35 07       	cpc	r19, r21
 848:	48 f0       	brcs	.+18     	; 0x85c <malloc+0x120>
 84a:	4e 0f       	add	r20, r30
 84c:	5f 1f       	adc	r21, r31
 84e:	50 93 5f 01 	sts	0x015F, r21	; 0x80015f <__brkval+0x1>
 852:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <__brkval>
 856:	81 93       	st	Z+, r24
 858:	91 93       	st	Z+, r25
 85a:	02 c0       	rjmp	.+4      	; 0x860 <malloc+0x124>
 85c:	e0 e0       	ldi	r30, 0x00	; 0
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	cf 01       	movw	r24, r30
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	08 95       	ret

0000086c <free>:
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	09 f4       	brne	.+2      	; 0x876 <free+0xa>
 874:	81 c0       	rjmp	.+258    	; 0x978 <free+0x10c>
 876:	fc 01       	movw	r30, r24
 878:	32 97       	sbiw	r30, 0x02	; 2
 87a:	13 82       	std	Z+3, r1	; 0x03
 87c:	12 82       	std	Z+2, r1	; 0x02
 87e:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <__flp>
 882:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <__flp+0x1>
 886:	10 97       	sbiw	r26, 0x00	; 0
 888:	81 f4       	brne	.+32     	; 0x8aa <free+0x3e>
 88a:	20 81       	ld	r18, Z
 88c:	31 81       	ldd	r19, Z+1	; 0x01
 88e:	82 0f       	add	r24, r18
 890:	93 1f       	adc	r25, r19
 892:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 896:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 89a:	28 17       	cp	r18, r24
 89c:	39 07       	cpc	r19, r25
 89e:	51 f5       	brne	.+84     	; 0x8f4 <free+0x88>
 8a0:	f0 93 5f 01 	sts	0x015F, r31	; 0x80015f <__brkval+0x1>
 8a4:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <__brkval>
 8a8:	67 c0       	rjmp	.+206    	; 0x978 <free+0x10c>
 8aa:	ed 01       	movw	r28, r26
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	ce 17       	cp	r28, r30
 8b2:	df 07       	cpc	r29, r31
 8b4:	40 f4       	brcc	.+16     	; 0x8c6 <free+0x5a>
 8b6:	4a 81       	ldd	r20, Y+2	; 0x02
 8b8:	5b 81       	ldd	r21, Y+3	; 0x03
 8ba:	9e 01       	movw	r18, r28
 8bc:	41 15       	cp	r20, r1
 8be:	51 05       	cpc	r21, r1
 8c0:	f1 f0       	breq	.+60     	; 0x8fe <free+0x92>
 8c2:	ea 01       	movw	r28, r20
 8c4:	f5 cf       	rjmp	.-22     	; 0x8b0 <free+0x44>
 8c6:	d3 83       	std	Z+3, r29	; 0x03
 8c8:	c2 83       	std	Z+2, r28	; 0x02
 8ca:	40 81       	ld	r20, Z
 8cc:	51 81       	ldd	r21, Z+1	; 0x01
 8ce:	84 0f       	add	r24, r20
 8d0:	95 1f       	adc	r25, r21
 8d2:	c8 17       	cp	r28, r24
 8d4:	d9 07       	cpc	r29, r25
 8d6:	59 f4       	brne	.+22     	; 0x8ee <free+0x82>
 8d8:	88 81       	ld	r24, Y
 8da:	99 81       	ldd	r25, Y+1	; 0x01
 8dc:	84 0f       	add	r24, r20
 8de:	95 1f       	adc	r25, r21
 8e0:	02 96       	adiw	r24, 0x02	; 2
 8e2:	91 83       	std	Z+1, r25	; 0x01
 8e4:	80 83       	st	Z, r24
 8e6:	8a 81       	ldd	r24, Y+2	; 0x02
 8e8:	9b 81       	ldd	r25, Y+3	; 0x03
 8ea:	93 83       	std	Z+3, r25	; 0x03
 8ec:	82 83       	std	Z+2, r24	; 0x02
 8ee:	21 15       	cp	r18, r1
 8f0:	31 05       	cpc	r19, r1
 8f2:	29 f4       	brne	.+10     	; 0x8fe <free+0x92>
 8f4:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <__flp+0x1>
 8f8:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <__flp>
 8fc:	3d c0       	rjmp	.+122    	; 0x978 <free+0x10c>
 8fe:	e9 01       	movw	r28, r18
 900:	fb 83       	std	Y+3, r31	; 0x03
 902:	ea 83       	std	Y+2, r30	; 0x02
 904:	49 91       	ld	r20, Y+
 906:	59 91       	ld	r21, Y+
 908:	c4 0f       	add	r28, r20
 90a:	d5 1f       	adc	r29, r21
 90c:	ec 17       	cp	r30, r28
 90e:	fd 07       	cpc	r31, r29
 910:	61 f4       	brne	.+24     	; 0x92a <free+0xbe>
 912:	80 81       	ld	r24, Z
 914:	91 81       	ldd	r25, Z+1	; 0x01
 916:	84 0f       	add	r24, r20
 918:	95 1f       	adc	r25, r21
 91a:	02 96       	adiw	r24, 0x02	; 2
 91c:	e9 01       	movw	r28, r18
 91e:	99 83       	std	Y+1, r25	; 0x01
 920:	88 83       	st	Y, r24
 922:	82 81       	ldd	r24, Z+2	; 0x02
 924:	93 81       	ldd	r25, Z+3	; 0x03
 926:	9b 83       	std	Y+3, r25	; 0x03
 928:	8a 83       	std	Y+2, r24	; 0x02
 92a:	e0 e0       	ldi	r30, 0x00	; 0
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	12 96       	adiw	r26, 0x02	; 2
 930:	8d 91       	ld	r24, X+
 932:	9c 91       	ld	r25, X
 934:	13 97       	sbiw	r26, 0x03	; 3
 936:	00 97       	sbiw	r24, 0x00	; 0
 938:	19 f0       	breq	.+6      	; 0x940 <free+0xd4>
 93a:	fd 01       	movw	r30, r26
 93c:	dc 01       	movw	r26, r24
 93e:	f7 cf       	rjmp	.-18     	; 0x92e <free+0xc2>
 940:	8d 91       	ld	r24, X+
 942:	9c 91       	ld	r25, X
 944:	11 97       	sbiw	r26, 0x01	; 1
 946:	9d 01       	movw	r18, r26
 948:	2e 5f       	subi	r18, 0xFE	; 254
 94a:	3f 4f       	sbci	r19, 0xFF	; 255
 94c:	82 0f       	add	r24, r18
 94e:	93 1f       	adc	r25, r19
 950:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <__brkval>
 954:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <__brkval+0x1>
 958:	28 17       	cp	r18, r24
 95a:	39 07       	cpc	r19, r25
 95c:	69 f4       	brne	.+26     	; 0x978 <free+0x10c>
 95e:	30 97       	sbiw	r30, 0x00	; 0
 960:	29 f4       	brne	.+10     	; 0x96c <free+0x100>
 962:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__flp+0x1>
 966:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__flp>
 96a:	02 c0       	rjmp	.+4      	; 0x970 <free+0x104>
 96c:	13 82       	std	Z+3, r1	; 0x03
 96e:	12 82       	std	Z+2, r1	; 0x02
 970:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <__brkval+0x1>
 974:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <__brkval>
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	08 95       	ret

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
