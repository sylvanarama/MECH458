
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000008d4  00000968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800116  00800116  0000097e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5b  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e86  00000000  00000000  000025a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c44  00000000  00000000  00003429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00004070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092e  00000000  00000000  00004438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aad  00000000  00000000  00004d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005813  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__vector_3>
   e:	00 00       	nop
  10:	da c0       	rjmp	.+436    	; 0x1c6 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	b8 c0       	rjmp	.+368    	; 0x1e6 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e4 ed       	ldi	r30, 0xD4	; 212
  ac:	f8 e0       	ldi	r31, 0x08	; 8
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 31       	cpi	r26, 0x16	; 22
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a6 e1       	ldi	r26, 0x16	; 22
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 36       	cpi	r26, 0x61	; 97
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	97 d2       	rcall	.+1326   	; 0x5fe <main>
  d0:	ff c3       	rjmp	.+2046   	; 0x8d0 <_exit>

000000d2 <__bad_interrupt>:
  d2:	d3 c0       	rjmp	.+422    	; 0x27a <__vector_default>

000000d4 <initItem>:
/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
item* initItem(){
	item* newItem = malloc(sizeof(item));
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	da d2       	rcall	.+1460   	; 0x68e <malloc>
  da:	fc 01       	movw	r30, r24
	newItem->next = NULL;
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
	newItem->metal = 0;
  e0:	10 82       	st	Z, r1
	newItem->reflective = 0;
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
	newItem->type = 0;
  e6:	13 82       	std	Z+3, r1	; 0x03
	newItem->stage = 0;
  e8:	14 82       	std	Z+4, r1	; 0x04
	newItem->number = 0;
  ea:	15 82       	std	Z+5, r1	; 0x05
	return newItem;
}//initLink
  ec:	08 95       	ret

000000ee <initQueue>:

queue* initQueue(){
	queue* q = malloc(sizeof(queue));
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	cd d2       	rcall	.+1434   	; 0x68e <malloc>
	q->head = NULL;	
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
	q->tail = NULL;	
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
	return q;
}//initQueue
  fe:	08 95       	ret

00000100 <enqueue>:

/****************************************************************************************
*  DESC: Accepts as input a new link by reference, and assigns the head and tail		
*  of the queue accordingly (Will put an item at the tail of the queue)		
*/
void enqueue(queue* q, item* newItem){
 100:	fc 01       	movw	r30, r24
	if (q->tail != NULL){
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
		/* Not an empty queue */
		q->tail->next = newItem;
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
		q->tail = newItem;
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		q->head = newItem;
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
		q->tail = newItem;
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:

/**************************************************************************************
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* RETURNS: Pointer to the dequeued link
*/
item* dequeue(queue* q){
 122:	dc 01       	movw	r26, r24
	item* deQueuedItem = q->head;	// Will set to NULL if Head points to NULL
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
	/* Ensure it is not an empty queue */
	if (q->head != NULL){
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	39 f0       	breq	.+14     	; 0x13c <dequeue+0x1a>
		q->head = q->head->next;
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
	}/*if*/
	if(q->head == NULL) q->tail = NULL; // if that was the last element in the queue, set tail to NULL as well
 138:	89 2b       	or	r24, r25
 13a:	21 f4       	brne	.+8      	; 0x144 <dequeue+0x22>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
	return deQueuedItem;
}/*dequeue*/
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <__vector_21>:
		display_reflective_reading(avg);
		mTimer(7000);
	
		PORTB = CW;
	}
}//ADC_calibrate
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_17>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_1>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	88 b9       	out	0x08, r24	; 8
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <OS1_flag>
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_3>:
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	46 9a       	sbi	0x08, 6	; 8
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <OS2_flag>
 1a6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <__vector_3+0x22>
 1ae:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <reflective_present>
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <__vector_3+0x28>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <reflective_present>
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_4>:
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	47 9a       	sbi	0x08, 7	; 8
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <OS3_flag>
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_29>:
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
 200:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 204:	88 23       	and	r24, r24
 206:	61 f1       	breq	.+88     	; 0x260 <__vector_29+0x7a>
 208:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 212:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 216:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_result>
 21a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_result+0x1>
 21e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 222:	98 2f       	mov	r25, r24
 224:	88 27       	eor	r24, r24
 226:	82 2b       	or	r24, r18
 228:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 22c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 230:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ADC_result>
 234:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ADC_result+0x1>
 238:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <ADC_lowest_val>
 23c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <ADC_lowest_val+0x1>
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	40 f4       	brcc	.+16     	; 0x256 <__vector_29+0x70>
 246:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ADC_result>
 24a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ADC_result+0x1>
 24e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 252:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	80 83       	st	Z, r24
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_default>:
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <init_interrupts>:
 28e:	8a e9       	ldi	r24, 0x9A	; 154
 290:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 294:	8d b3       	in	r24, 0x1d	; 29
 296:	8f 60       	ori	r24, 0x0F	; 15
 298:	8d bb       	out	0x1d, r24	; 29
 29a:	08 95       	ret

0000029c <init_timer0_pwm>:
 29c:	84 b5       	in	r24, 0x24	; 36
 29e:	83 68       	ori	r24, 0x83	; 131
 2a0:	84 bd       	out	0x24, r24	; 36
 2a2:	85 b5       	in	r24, 0x25	; 37
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	85 bd       	out	0x25, r24	; 37
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	87 bd       	out	0x27, r24	; 39
 2ac:	08 95       	ret

000002ae <init_motor>:
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	80 e3       	ldi	r24, 0x30	; 48
 2b4:	87 bd       	out	0x27, r24	; 39
 2b6:	08 95       	ret

000002b8 <init_ADC>:
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_result+0x1>
 2c0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_result>
 2c4:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 2c8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
 2cc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <reflective_present>
 2d0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <item_ready>
 2d4:	ec e7       	ldi	r30, 0x7C	; 124
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 83       	st	Z, r24
 2de:	ea e7       	ldi	r30, 0x7A	; 122
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	80 83       	st	Z, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	80 83       	st	Z, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	88 60       	ori	r24, 0x08	; 8
 2f2:	80 83       	st	Z, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <init_stepper>:
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	81 b9       	out	0x01, r24	; 1
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	82 b9       	out	0x02, r24	; 2
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <motor_position+0x1>
 30c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <motor_position>
 310:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <stepper_on+0x1>
 314:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <stepper_on>
 318:	08 95       	ret

0000031a <mTimer>:
 31a:	ac 01       	movw	r20, r24
 31c:	e1 e8       	ldi	r30, 0x81	; 129
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	90 81       	ld	r25, Z
 322:	91 60       	ori	r25, 0x01	; 1
 324:	90 83       	st	Z, r25
 326:	90 81       	ld	r25, Z
 328:	98 60       	ori	r25, 0x08	; 8
 32a:	90 83       	st	Z, r25
 32c:	88 ee       	ldi	r24, 0xE8	; 232
 32e:	93 e0       	ldi	r25, 0x03	; 3
 330:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 334:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 338:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 33c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 340:	b1 9a       	sbi	0x16, 1	; 22
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	05 c0       	rjmp	.+10     	; 0x352 <mTimer+0x38>
 348:	b1 9b       	sbis	0x16, 1	; 22
 34a:	fe cf       	rjmp	.-4      	; 0x348 <mTimer+0x2e>
 34c:	b1 9a       	sbi	0x16, 1	; 22
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	24 17       	cp	r18, r20
 354:	35 07       	cpc	r19, r21
 356:	1c f4       	brge	.+6      	; 0x35e <mTimer+0x44>
 358:	b1 9b       	sbis	0x16, 1	; 22
 35a:	f6 cf       	rjmp	.-20     	; 0x348 <mTimer+0x2e>
 35c:	f7 cf       	rjmp	.-18     	; 0x34c <mTimer+0x32>
 35e:	08 95       	ret

00000360 <stepper_rotate>:
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	18 16       	cp	r1, r24
 372:	19 06       	cpc	r1, r25
 374:	0c f0       	brlt	.+2      	; 0x378 <stepper_rotate+0x18>
 376:	61 c0       	rjmp	.+194    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 378:	6b 01       	movw	r12, r22
 37a:	8c 01       	movw	r16, r24
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	0f 2e       	mov	r0, r31
 382:	fa e0       	ldi	r31, 0x0A	; 10
 384:	ef 2e       	mov	r14, r31
 386:	f1 2c       	mov	r15, r1
 388:	f0 2d       	mov	r31, r0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	c8 16       	cp	r12, r24
 38e:	d1 04       	cpc	r13, r1
 390:	d1 f4       	brne	.+52     	; 0x3c6 <stepper_rotate+0x66>
 392:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 396:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 39a:	e6 5f       	subi	r30, 0xF6	; 246
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 81       	ld	r24, Z
 3a0:	82 b9       	out	0x02, r24	; 2
 3a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3a6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	83 70       	andi	r24, 0x03	; 3
 3ae:	90 78       	andi	r25, 0x80	; 128
 3b0:	99 23       	and	r25, r25
 3b2:	24 f4       	brge	.+8      	; 0x3bc <stepper_rotate+0x5c>
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	8c 6f       	ori	r24, 0xFC	; 252
 3b8:	9f 6f       	ori	r25, 0xFF	; 255
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 3c0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 3c4:	1d c0       	rjmp	.+58     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	c8 16       	cp	r12, r24
 3ca:	d8 06       	cpc	r13, r24
 3cc:	c9 f4       	brne	.+50     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ce:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 3d2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 3d6:	ea 5f       	subi	r30, 0xFA	; 250
 3d8:	fe 4f       	sbci	r31, 0xFE	; 254
 3da:	80 81       	ld	r24, Z
 3dc:	82 b9       	out	0x02, r24	; 2
 3de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 3e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	83 70       	andi	r24, 0x03	; 3
 3ea:	90 78       	andi	r25, 0x80	; 128
 3ec:	99 23       	and	r25, r25
 3ee:	24 f4       	brge	.+8      	; 0x3f8 <stepper_rotate+0x98>
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	8c 6f       	ori	r24, 0xFC	; 252
 3f4:	9f 6f       	ori	r25, 0xFF	; 255
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 3fc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 400:	c7 01       	movw	r24, r14
 402:	8b df       	rcall	.-234    	; 0x31a <mTimer>
 404:	c4 30       	cpi	r28, 0x04	; 4
 406:	d1 05       	cpc	r29, r1
 408:	3c f4       	brge	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	e8 16       	cp	r14, r24
 40e:	f1 04       	cpc	r15, r1
 410:	1c f0       	brlt	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	e8 1a       	sub	r14, r24
 416:	f1 08       	sbc	r15, r1
 418:	c8 01       	movw	r24, r16
 41a:	8c 1b       	sub	r24, r28
 41c:	9d 0b       	sbc	r25, r29
 41e:	05 97       	sbiw	r24, 0x05	; 5
 420:	3c f4       	brge	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	8b e0       	ldi	r24, 0x0B	; 11
 424:	e8 16       	cp	r14, r24
 426:	f1 04       	cpc	r15, r1
 428:	1c f4       	brge	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	e8 1a       	sub	r14, r24
 42e:	f8 0a       	sbc	r15, r24
 430:	21 96       	adiw	r28, 0x01	; 1
 432:	0c 17       	cp	r16, r28
 434:	1d 07       	cpc	r17, r29
 436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	a8 cf       	rjmp	.-176    	; 0x38a <stepper_rotate+0x2a>
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	cf 90       	pop	r12
 44a:	08 95       	ret

0000044c <stepper_position>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	15 b8       	out	0x05, r1	; 5
 452:	c8 2f       	mov	r28, r24
 454:	d0 e0       	ldi	r29, 0x00	; 0
 456:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <motor_position>
 45a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <motor_position+0x1>
 45e:	9e 01       	movw	r18, r28
 460:	28 1b       	sub	r18, r24
 462:	39 0b       	sbc	r19, r25
 464:	21 30       	cpi	r18, 0x01	; 1
 466:	31 05       	cpc	r19, r1
 468:	21 f0       	breq	.+8      	; 0x472 <stepper_position+0x26>
 46a:	2d 3f       	cpi	r18, 0xFD	; 253
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	38 07       	cpc	r19, r24
 470:	31 f4       	brne	.+12     	; 0x47e <stepper_position+0x32>
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	82 e3       	ldi	r24, 0x32	; 50
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	72 df       	rcall	.-284    	; 0x360 <stepper_rotate>
 47c:	18 c0       	rjmp	.+48     	; 0x4ae <stepper_position+0x62>
 47e:	2f 3f       	cpi	r18, 0xFF	; 255
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	38 07       	cpc	r19, r24
 484:	19 f0       	breq	.+6      	; 0x48c <stepper_position+0x40>
 486:	23 30       	cpi	r18, 0x03	; 3
 488:	31 05       	cpc	r19, r1
 48a:	31 f4       	brne	.+12     	; 0x498 <stepper_position+0x4c>
 48c:	6f ef       	ldi	r22, 0xFF	; 255
 48e:	7f ef       	ldi	r23, 0xFF	; 255
 490:	82 e3       	ldi	r24, 0x32	; 50
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	65 df       	rcall	.-310    	; 0x360 <stepper_rotate>
 496:	0b c0       	rjmp	.+22     	; 0x4ae <stepper_position+0x62>
 498:	22 30       	cpi	r18, 0x02	; 2
 49a:	31 05       	cpc	r19, r1
 49c:	19 f0       	breq	.+6      	; 0x4a4 <stepper_position+0x58>
 49e:	2e 3f       	cpi	r18, 0xFE	; 254
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	29 f4       	brne	.+10     	; 0x4ae <stepper_position+0x62>
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	84 e6       	ldi	r24, 0x64	; 100
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	59 df       	rcall	.-334    	; 0x360 <stepper_rotate>
 4ae:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <motor_position+0x1>
 4b2:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <motor_position>
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	85 b9       	out	0x05, r24	; 5
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <entry_sensor>:

void entry_sensor()
{
	PORTC = 0x10;
 4c0:	80 e1       	ldi	r24, 0x10	; 16
 4c2:	88 b9       	out	0x08, r24	; 8
	OS1_flag = 0;
 4c4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <OS1_flag>
	// To keep track of how many items have been added
	item_number++;
 4c8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <item_number>
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <item_number>
	//Add a new item to the queue
	item* newItem = initItem();
	newItem->number = item_number;
 4d2:	00 de       	rcall	.-1024   	; 0xd4 <initItem>
 4d4:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <item_number>
 4d8:	fc 01       	movw	r30, r24
	newItem->stage = 1;
 4da:	25 83       	std	Z+5, r18	; 0x05
 4dc:	21 e0       	ldi	r18, 0x01	; 1
	enqueue(entryList, newItem);
 4de:	24 83       	std	Z+4, r18	; 0x04
 4e0:	bc 01       	movw	r22, r24
 4e2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <entryList>
 4e6:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <entryList+0x1>
 4ea:	0a ce       	rjmp	.-1004   	; 0x100 <enqueue>
 4ec:	08 95       	ret

000004ee <reflective_sensor>:
	entryList->tail->metal = 1;
	//PORTC |= 0x20;
}
*/
void reflective_sensor(){
	OS2_flag = 0;
 4ee:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <OS2_flag>
	//PORTC |= 0x40;
	//object entering reflective sensor zone, start ADC conversion
	if(reflective_present)
 4f2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <reflective_present>
 4f6:	88 23       	and	r24, r24
 4f8:	31 f0       	breq	.+12     	; 0x506 <reflective_sensor+0x18>
	{
		ADCSRA |= _BV(ADSC);
 4fa:	ea e7       	ldi	r30, 0x7A	; 122
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 64       	ori	r24, 0x40	; 64
 502:	80 83       	st	Z, r24
 504:	08 95       	ret
	}
	// object exiting the reflective sensor zone, item ready to be classified
	else
	{
		if(STATE == OPERATIONAL)
 506:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <STATE>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	d1 f4       	brne	.+52     	; 0x542 <reflective_sensor+0x54>
		{
			item* reflective_sensor_item = dequeue(entryList);
 50e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <entryList>
 512:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <entryList+0x1>
 516:	05 de       	rcall	.-1014   	; 0x122 <dequeue>
				mTimer(2000);
				PORTC = entryList->head->number;
				mTimer(2000);
			}
			*/
			reflective_sensor_item->reflective = ADC_lowest_val;
 518:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <ADC_lowest_val>
 51c:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <ADC_lowest_val+0x1>
 520:	fc 01       	movw	r30, r24
 522:	32 83       	std	Z+2, r19	; 0x02
 524:	21 83       	std	Z+1, r18	; 0x01
			reflective_sensor_item->stage = 2;	
 526:	22 e0       	ldi	r18, 0x02	; 2
 528:	24 83       	std	Z+4, r18	; 0x04
			enqueue(reflectiveList, reflective_sensor_item);
 52a:	bc 01       	movw	r22, r24
 52c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <reflectiveList>
 530:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <reflectiveList+0x1>
 534:	e5 dd       	rcall	.-1078   	; 0x100 <enqueue>
			ADC_lowest_val = 0x3FF;
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	93 e0       	ldi	r25, 0x03	; 3
 53a:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <ADC_lowest_val+0x1>
 53e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <ADC_lowest_val>
		}
		item_ready = 1;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <item_ready>
 548:	08 95       	ret

0000054a <classify_item>:
	}
}

void classify_item(){
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
	item_ready = 0;
 54e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <item_ready>
	item* item_to_classify = dequeue(reflectiveList);
 552:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <reflectiveList>
 556:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <reflectiveList+0x1>
 55a:	e3 dd       	rcall	.-1082   	; 0x122 <dequeue>
 55c:	ec 01       	movw	r28, r24
	uint16_t r = item_to_classify->reflective;
 55e:	a9 81       	ldd	r26, Y+1	; 0x01
 560:	ba 81       	ldd	r27, Y+2	; 0x02
	uint8_t type = 0;
	uint16_t diff = 0xFF;
	uint16_t sm_diff = 0xFF;
	int i=0;
	for(i=0;i<4;i++)
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0

void classify_item(){
	item_ready = 0;
	item* item_to_classify = dequeue(reflectiveList);
	uint16_t r = item_to_classify->reflective;
	uint8_t type = 0;
 566:	60 e0       	ldi	r22, 0x00	; 0
	uint16_t diff = 0xFF;
	uint16_t sm_diff = 0xFF;
	int i=0;
	for(i=0;i<4;i++)
	{
		diff = abs(calibration_vals[i] - r);
 568:	fc 01       	movw	r30, r24
 56a:	ee 0f       	add	r30, r30
 56c:	ff 1f       	adc	r31, r31
 56e:	e2 5f       	subi	r30, 0xF2	; 242
 570:	fe 4f       	sbci	r31, 0xFE	; 254
 572:	20 81       	ld	r18, Z
 574:	31 81       	ldd	r19, Z+1	; 0x01
		if (diff < sm_diff ) type = i;
 576:	2a 1b       	sub	r18, r26
 578:	3b 0b       	sbc	r19, r27
 57a:	a9 01       	movw	r20, r18
 57c:	22 f4       	brpl	.+8      	; 0x586 <classify_item+0x3c>
 57e:	44 27       	eor	r20, r20
 580:	55 27       	eor	r21, r21
 582:	42 1b       	sub	r20, r18
 584:	53 0b       	sbc	r21, r19
 586:	4f 3f       	cpi	r20, 0xFF	; 255
 588:	51 05       	cpc	r21, r1
 58a:	08 f4       	brcc	.+2      	; 0x58e <classify_item+0x44>
 58c:	68 2f       	mov	r22, r24
	uint16_t r = item_to_classify->reflective;
	uint8_t type = 0;
	uint16_t diff = 0xFF;
	uint16_t sm_diff = 0xFF;
	int i=0;
	for(i=0;i<4;i++)
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	84 30       	cpi	r24, 0x04	; 4
 592:	91 05       	cpc	r25, r1
 594:	49 f7       	brne	.-46     	; 0x568 <classify_item+0x1e>
	{
		diff = abs(calibration_vals[i] - r);
		if (diff < sm_diff ) type = i;
	}
	
	sorted_items_array[type]++;
 596:	e6 2f       	mov	r30, r22
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	a8 e1       	ldi	r26, 0x18	; 24
 59c:	b1 e0       	ldi	r27, 0x01	; 1
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	e8 5e       	subi	r30, 0xE8	; 232
 5a4:	fe 4f       	sbci	r31, 0xFE	; 254
 5a6:	80 81       	ld	r24, Z
 5a8:	91 81       	ldd	r25, Z+1	; 0x01
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	80 83       	st	Z, r24
	sorted_items_array[TOTAL]++;
 5b0:	18 96       	adiw	r26, 0x08	; 8
 5b2:	8d 91       	ld	r24, X+
 5b4:	9c 91       	ld	r25, X
 5b6:	19 97       	sbiw	r26, 0x09	; 9
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	19 96       	adiw	r26, 0x09	; 9
 5bc:	9c 93       	st	X, r25
 5be:	8e 93       	st	-X, r24
 5c0:	18 97       	sbiw	r26, 0x08	; 8
	item_to_classify->type = type;
 5c2:	6b 83       	std	Y+3, r22	; 0x03
	item_to_classify->stage = 3;
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	8c 83       	std	Y+4, r24	; 0x04
	
	enqueue(classifiedList, item_to_classify);
 5c8:	be 01       	movw	r22, r28
 5ca:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <classifiedList>
 5ce:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <classifiedList+0x1>
 5d2:	96 dd       	rcall	.-1236   	; 0x100 <enqueue>
	
	//TESTING
	PORTC |= item_to_classify->type;
 5d4:	98 b1       	in	r25, 0x08	; 8
 5d6:	8b 81       	ldd	r24, Y+3	; 0x03
 5d8:	89 2b       	or	r24, r25
 5da:	88 b9       	out	0x08, r24	; 8
	
}//classify_item
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <exit_sensor>:

void exit_sensor(){
	OS3_flag = 0;
 5e2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <OS3_flag>
	// Show sensor triggered
	//PORTC |= 0x80;
	// Move item to sorted queue
	enqueue(sortedList, dequeue(classifiedList));
 5e6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <classifiedList>
 5ea:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <classifiedList+0x1>
 5ee:	99 dd       	rcall	.-1230   	; 0x122 <dequeue>
 5f0:	bc 01       	movw	r22, r24
 5f2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sortedList>
 5f6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sortedList+0x1>
 5fa:	82 cd       	rjmp	.-1276   	; 0x100 <enqueue>
 5fc:	08 95       	ret

000005fe <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 5fe:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 600:	8f e8       	ldi	r24, 0x8F	; 143
 602:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 608:	80 ef       	ldi	r24, 0xF0	; 240
 60a:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 60c:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 60e:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 610:	18 b8       	out	0x08, r1	; 8
	
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
 612:	f8 94       	cli
 614:	51 de       	rcall	.-862    	; 0x2b8 <init_ADC>
 616:	42 de       	rcall	.-892    	; 0x29c <init_timer0_pwm>
 618:	4a de       	rcall	.-876    	; 0x2ae <init_motor>
 61a:	39 de       	rcall	.-910    	; 0x28e <init_interrupts>
 61c:	6f de       	rcall	.-802    	; 0x2fc <init_stepper>
 61e:	78 94       	sei
 620:	66 dd       	rcall	.-1332   	; 0xee <initQueue>
 622:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <entryList+0x1>
 626:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <entryList>
 62a:	61 dd       	rcall	.-1342   	; 0xee <initQueue>
 62c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <reflectiveList+0x1>
 630:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <reflectiveList>
 634:	5c dd       	rcall	.-1352   	; 0xee <initQueue>
 636:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <classifiedList+0x1>
 63a:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <classifiedList>
 63e:	57 dd       	rcall	.-1362   	; 0xee <initQueue>
 640:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sortedList+0x1>
 644:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sortedList>
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <STATE>
 64e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <item_waiting>
 652:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <item_number>
 656:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <OS1_flag>
 65a:	81 11       	cpse	r24, r1
 65c:	31 df       	rcall	.-414    	; 0x4c0 <entry_sensor>
 65e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <OS2_flag>
 662:	81 11       	cpse	r24, r1
 664:	44 df       	rcall	.-376    	; 0x4ee <reflective_sensor>
 666:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <item_ready>
 66a:	81 11       	cpse	r24, r1
 66c:	6e df       	rcall	.-292    	; 0x54a <classify_item>
 66e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <OS3_flag>
 672:	88 23       	and	r24, r24
 674:	81 f3       	breq	.-32     	; 0x656 <main+0x58>
 676:	b5 df       	rcall	.-150    	; 0x5e2 <exit_sensor>
 678:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <sortedList>
 67c:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <sortedList+0x1>
 680:	02 80       	ldd	r0, Z+2	; 0x02
 682:	f3 81       	ldd	r31, Z+3	; 0x03
 684:	e0 2d       	mov	r30, r0
 686:	83 81       	ldd	r24, Z+3	; 0x03
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	e0 de       	rcall	.-576    	; 0x44c <stepper_position>
 68c:	e4 cf       	rjmp	.-56     	; 0x656 <main+0x58>

0000068e <malloc>:
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	91 05       	cpc	r25, r1
 69a:	10 f4       	brcc	.+4      	; 0x6a0 <malloc+0x12>
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <__flp>
 6a4:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <__flp+0x1>
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	a0 e0       	ldi	r26, 0x00	; 0
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	30 97       	sbiw	r30, 0x00	; 0
 6b2:	19 f1       	breq	.+70     	; 0x6fa <malloc+0x6c>
 6b4:	40 81       	ld	r20, Z
 6b6:	51 81       	ldd	r21, Z+1	; 0x01
 6b8:	02 81       	ldd	r16, Z+2	; 0x02
 6ba:	13 81       	ldd	r17, Z+3	; 0x03
 6bc:	48 17       	cp	r20, r24
 6be:	59 07       	cpc	r21, r25
 6c0:	c8 f0       	brcs	.+50     	; 0x6f4 <malloc+0x66>
 6c2:	84 17       	cp	r24, r20
 6c4:	95 07       	cpc	r25, r21
 6c6:	69 f4       	brne	.+26     	; 0x6e2 <malloc+0x54>
 6c8:	10 97       	sbiw	r26, 0x00	; 0
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <malloc+0x4a>
 6cc:	12 96       	adiw	r26, 0x02	; 2
 6ce:	0c 93       	st	X, r16
 6d0:	12 97       	sbiw	r26, 0x02	; 2
 6d2:	13 96       	adiw	r26, 0x03	; 3
 6d4:	1c 93       	st	X, r17
 6d6:	27 c0       	rjmp	.+78     	; 0x726 <malloc+0x98>
 6d8:	00 93 5f 01 	sts	0x015F, r16	; 0x80015f <__flp>
 6dc:	10 93 60 01 	sts	0x0160, r17	; 0x800160 <__flp+0x1>
 6e0:	22 c0       	rjmp	.+68     	; 0x726 <malloc+0x98>
 6e2:	21 15       	cp	r18, r1
 6e4:	31 05       	cpc	r19, r1
 6e6:	19 f0       	breq	.+6      	; 0x6ee <malloc+0x60>
 6e8:	42 17       	cp	r20, r18
 6ea:	53 07       	cpc	r21, r19
 6ec:	18 f4       	brcc	.+6      	; 0x6f4 <malloc+0x66>
 6ee:	9a 01       	movw	r18, r20
 6f0:	bd 01       	movw	r22, r26
 6f2:	ef 01       	movw	r28, r30
 6f4:	df 01       	movw	r26, r30
 6f6:	f8 01       	movw	r30, r16
 6f8:	db cf       	rjmp	.-74     	; 0x6b0 <malloc+0x22>
 6fa:	21 15       	cp	r18, r1
 6fc:	31 05       	cpc	r19, r1
 6fe:	f9 f0       	breq	.+62     	; 0x73e <malloc+0xb0>
 700:	28 1b       	sub	r18, r24
 702:	39 0b       	sbc	r19, r25
 704:	24 30       	cpi	r18, 0x04	; 4
 706:	31 05       	cpc	r19, r1
 708:	80 f4       	brcc	.+32     	; 0x72a <malloc+0x9c>
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	9b 81       	ldd	r25, Y+3	; 0x03
 70e:	61 15       	cp	r22, r1
 710:	71 05       	cpc	r23, r1
 712:	21 f0       	breq	.+8      	; 0x71c <malloc+0x8e>
 714:	fb 01       	movw	r30, r22
 716:	93 83       	std	Z+3, r25	; 0x03
 718:	82 83       	std	Z+2, r24	; 0x02
 71a:	04 c0       	rjmp	.+8      	; 0x724 <malloc+0x96>
 71c:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__flp+0x1>
 720:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <__flp>
 724:	fe 01       	movw	r30, r28
 726:	32 96       	adiw	r30, 0x02	; 2
 728:	44 c0       	rjmp	.+136    	; 0x7b2 <malloc+0x124>
 72a:	fe 01       	movw	r30, r28
 72c:	e2 0f       	add	r30, r18
 72e:	f3 1f       	adc	r31, r19
 730:	81 93       	st	Z+, r24
 732:	91 93       	st	Z+, r25
 734:	22 50       	subi	r18, 0x02	; 2
 736:	31 09       	sbc	r19, r1
 738:	39 83       	std	Y+1, r19	; 0x01
 73a:	28 83       	st	Y, r18
 73c:	3a c0       	rjmp	.+116    	; 0x7b2 <malloc+0x124>
 73e:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__brkval>
 742:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__brkval+0x1>
 746:	23 2b       	or	r18, r19
 748:	41 f4       	brne	.+16     	; 0x75a <malloc+0xcc>
 74a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 74e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 752:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <__brkval+0x1>
 756:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <__brkval>
 75a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 75e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 762:	21 15       	cp	r18, r1
 764:	31 05       	cpc	r19, r1
 766:	41 f4       	brne	.+16     	; 0x778 <malloc+0xea>
 768:	2d b7       	in	r18, 0x3d	; 61
 76a:	3e b7       	in	r19, 0x3e	; 62
 76c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 770:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 774:	24 1b       	sub	r18, r20
 776:	35 0b       	sbc	r19, r21
 778:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <__brkval>
 77c:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <__brkval+0x1>
 780:	e2 17       	cp	r30, r18
 782:	f3 07       	cpc	r31, r19
 784:	a0 f4       	brcc	.+40     	; 0x7ae <malloc+0x120>
 786:	2e 1b       	sub	r18, r30
 788:	3f 0b       	sbc	r19, r31
 78a:	28 17       	cp	r18, r24
 78c:	39 07       	cpc	r19, r25
 78e:	78 f0       	brcs	.+30     	; 0x7ae <malloc+0x120>
 790:	ac 01       	movw	r20, r24
 792:	4e 5f       	subi	r20, 0xFE	; 254
 794:	5f 4f       	sbci	r21, 0xFF	; 255
 796:	24 17       	cp	r18, r20
 798:	35 07       	cpc	r19, r21
 79a:	48 f0       	brcs	.+18     	; 0x7ae <malloc+0x120>
 79c:	4e 0f       	add	r20, r30
 79e:	5f 1f       	adc	r21, r31
 7a0:	50 93 5e 01 	sts	0x015E, r21	; 0x80015e <__brkval+0x1>
 7a4:	40 93 5d 01 	sts	0x015D, r20	; 0x80015d <__brkval>
 7a8:	81 93       	st	Z+, r24
 7aa:	91 93       	st	Z+, r25
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <malloc+0x124>
 7ae:	e0 e0       	ldi	r30, 0x00	; 0
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	cf 01       	movw	r24, r30
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <free>:
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <free+0xa>
 7c6:	81 c0       	rjmp	.+258    	; 0x8ca <free+0x10c>
 7c8:	fc 01       	movw	r30, r24
 7ca:	32 97       	sbiw	r30, 0x02	; 2
 7cc:	13 82       	std	Z+3, r1	; 0x03
 7ce:	12 82       	std	Z+2, r1	; 0x02
 7d0:	a0 91 5f 01 	lds	r26, 0x015F	; 0x80015f <__flp>
 7d4:	b0 91 60 01 	lds	r27, 0x0160	; 0x800160 <__flp+0x1>
 7d8:	10 97       	sbiw	r26, 0x00	; 0
 7da:	81 f4       	brne	.+32     	; 0x7fc <free+0x3e>
 7dc:	20 81       	ld	r18, Z
 7de:	31 81       	ldd	r19, Z+1	; 0x01
 7e0:	82 0f       	add	r24, r18
 7e2:	93 1f       	adc	r25, r19
 7e4:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__brkval>
 7e8:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__brkval+0x1>
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	51 f5       	brne	.+84     	; 0x846 <free+0x88>
 7f2:	f0 93 5e 01 	sts	0x015E, r31	; 0x80015e <__brkval+0x1>
 7f6:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <__brkval>
 7fa:	67 c0       	rjmp	.+206    	; 0x8ca <free+0x10c>
 7fc:	ed 01       	movw	r28, r26
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	ce 17       	cp	r28, r30
 804:	df 07       	cpc	r29, r31
 806:	40 f4       	brcc	.+16     	; 0x818 <free+0x5a>
 808:	4a 81       	ldd	r20, Y+2	; 0x02
 80a:	5b 81       	ldd	r21, Y+3	; 0x03
 80c:	9e 01       	movw	r18, r28
 80e:	41 15       	cp	r20, r1
 810:	51 05       	cpc	r21, r1
 812:	f1 f0       	breq	.+60     	; 0x850 <free+0x92>
 814:	ea 01       	movw	r28, r20
 816:	f5 cf       	rjmp	.-22     	; 0x802 <free+0x44>
 818:	d3 83       	std	Z+3, r29	; 0x03
 81a:	c2 83       	std	Z+2, r28	; 0x02
 81c:	40 81       	ld	r20, Z
 81e:	51 81       	ldd	r21, Z+1	; 0x01
 820:	84 0f       	add	r24, r20
 822:	95 1f       	adc	r25, r21
 824:	c8 17       	cp	r28, r24
 826:	d9 07       	cpc	r29, r25
 828:	59 f4       	brne	.+22     	; 0x840 <free+0x82>
 82a:	88 81       	ld	r24, Y
 82c:	99 81       	ldd	r25, Y+1	; 0x01
 82e:	84 0f       	add	r24, r20
 830:	95 1f       	adc	r25, r21
 832:	02 96       	adiw	r24, 0x02	; 2
 834:	91 83       	std	Z+1, r25	; 0x01
 836:	80 83       	st	Z, r24
 838:	8a 81       	ldd	r24, Y+2	; 0x02
 83a:	9b 81       	ldd	r25, Y+3	; 0x03
 83c:	93 83       	std	Z+3, r25	; 0x03
 83e:	82 83       	std	Z+2, r24	; 0x02
 840:	21 15       	cp	r18, r1
 842:	31 05       	cpc	r19, r1
 844:	29 f4       	brne	.+10     	; 0x850 <free+0x92>
 846:	f0 93 60 01 	sts	0x0160, r31	; 0x800160 <__flp+0x1>
 84a:	e0 93 5f 01 	sts	0x015F, r30	; 0x80015f <__flp>
 84e:	3d c0       	rjmp	.+122    	; 0x8ca <free+0x10c>
 850:	e9 01       	movw	r28, r18
 852:	fb 83       	std	Y+3, r31	; 0x03
 854:	ea 83       	std	Y+2, r30	; 0x02
 856:	49 91       	ld	r20, Y+
 858:	59 91       	ld	r21, Y+
 85a:	c4 0f       	add	r28, r20
 85c:	d5 1f       	adc	r29, r21
 85e:	ec 17       	cp	r30, r28
 860:	fd 07       	cpc	r31, r29
 862:	61 f4       	brne	.+24     	; 0x87c <free+0xbe>
 864:	80 81       	ld	r24, Z
 866:	91 81       	ldd	r25, Z+1	; 0x01
 868:	84 0f       	add	r24, r20
 86a:	95 1f       	adc	r25, r21
 86c:	02 96       	adiw	r24, 0x02	; 2
 86e:	e9 01       	movw	r28, r18
 870:	99 83       	std	Y+1, r25	; 0x01
 872:	88 83       	st	Y, r24
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	93 81       	ldd	r25, Z+3	; 0x03
 878:	9b 83       	std	Y+3, r25	; 0x03
 87a:	8a 83       	std	Y+2, r24	; 0x02
 87c:	e0 e0       	ldi	r30, 0x00	; 0
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	12 96       	adiw	r26, 0x02	; 2
 882:	8d 91       	ld	r24, X+
 884:	9c 91       	ld	r25, X
 886:	13 97       	sbiw	r26, 0x03	; 3
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	19 f0       	breq	.+6      	; 0x892 <free+0xd4>
 88c:	fd 01       	movw	r30, r26
 88e:	dc 01       	movw	r26, r24
 890:	f7 cf       	rjmp	.-18     	; 0x880 <free+0xc2>
 892:	8d 91       	ld	r24, X+
 894:	9c 91       	ld	r25, X
 896:	11 97       	sbiw	r26, 0x01	; 1
 898:	9d 01       	movw	r18, r26
 89a:	2e 5f       	subi	r18, 0xFE	; 254
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	82 0f       	add	r24, r18
 8a0:	93 1f       	adc	r25, r19
 8a2:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <__brkval>
 8a6:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <__brkval+0x1>
 8aa:	28 17       	cp	r18, r24
 8ac:	39 07       	cpc	r19, r25
 8ae:	69 f4       	brne	.+26     	; 0x8ca <free+0x10c>
 8b0:	30 97       	sbiw	r30, 0x00	; 0
 8b2:	29 f4       	brne	.+10     	; 0x8be <free+0x100>
 8b4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__flp+0x1>
 8b8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__flp>
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <free+0x104>
 8be:	13 82       	std	Z+3, r1	; 0x03
 8c0:	12 82       	std	Z+2, r1	; 0x02
 8c2:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <__brkval+0x1>
 8c6:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <__brkval>
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <_exit>:
 8d0:	f8 94       	cli

000008d2 <__stop_program>:
 8d2:	ff cf       	rjmp	.-2      	; 0x8d2 <__stop_program>
