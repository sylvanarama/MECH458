
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ff  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0d  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fa  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000790  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008c9  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000042f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	da c0       	rjmp	.+436    	; 0x1ba <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__vector_3>
   e:	00 00       	nop
  10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	5f c0       	rjmp	.+190    	; 0x134 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e1       	ldi	r30, 0x10	; 16
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 30       	cpi	r26, 0x00	; 0
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ae 30       	cpi	r26, 0x0E	; 14
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	7d d1       	rcall	.+762    	; 0x3ca <main>
  d0:	9d c1       	rjmp	.+826    	; 0x40c <_exit>

000000d2 <__bad_interrupt>:
  d2:	91 c0       	rjmp	.+290    	; 0x1f6 <__vector_default>

000000d4 <__vector_21>:
	if((v[1][0] < r)  && (r < v[1][1]) && (m == 0)) q->head->e.type = 2; // black
	if((v[2][0] < r)  && (r < v[2][1]) && (m == 1)) q->head->e.type = 3; // aluminum
	if((v[3][0] < r)  && (r < v[3][1]) && (m == 1)) q->head->e.type = 4; // steel
	else q->head->e.type = 0; //unknown type
	q->head->e.stage = 3;
}//classify_part
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_3>:
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	0b b6       	in	r0, 0x3b	; 59
  f4:	0f 92       	push	r0
  f6:	8f 93       	push	r24
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <reflective_present>
 100:	88 23       	and	r24, r24
 102:	31 f0       	breq	.+12     	; 0x110 <__vector_3+0x28>
 104:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <reflective_present>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <item_ready>
 10e:	08 c0       	rjmp	.+16     	; 0x120 <__vector_3+0x38>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <reflective_present>
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	80 83       	st	Z, r24
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0b be       	out	0x3b, r0	; 59
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_29>:
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	0b b6       	in	r0, 0x3b	; 59
 140:	0f 92       	push	r0
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 152:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	98 2f       	mov	r25, r24
 15a:	88 27       	eor	r24, r24
 15c:	82 0f       	add	r24, r18
 15e:	91 1d       	adc	r25, r1
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 168:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 16c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 170:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_lowest_val>
 174:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ADC_lowest_val+0x1>
 178:	28 17       	cp	r18, r24
 17a:	39 07       	cpc	r19, r25
 17c:	40 f4       	brcc	.+16     	; 0x18e <__vector_29+0x5a>
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 186:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_lowest_val+0x1>
 18a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_lowest_val>
 18e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <reflective_present>
 192:	88 23       	and	r24, r24
 194:	29 f0       	breq	.+10     	; 0x1a0 <__vector_29+0x6c>
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_1>:
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <STATE>
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_4>:
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <STATE>
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_default>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <init_motor>:
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	8b b9       	out	0x0b, r24	; 11
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	87 bd       	out	0x27, r24	; 39
 212:	08 95       	ret

00000214 <init_ADC>:
 214:	f8 94       	cli
 216:	8f e3       	ldi	r24, 0x3F	; 63
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 21e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 222:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_lowest_val+0x1>
 226:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_lowest_val>
 22a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <reflective_present>
 22e:	ea 9a       	sbi	0x1d, 2	; 29
 230:	e9 e6       	ldi	r30, 0x69	; 105
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	8f 6c       	ori	r24, 0xCF	; 207
 238:	80 83       	st	Z, r24
 23a:	ea e7       	ldi	r30, 0x7A	; 122
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 68       	ori	r24, 0x80	; 128
 242:	80 83       	st	Z, r24
 244:	80 81       	ld	r24, Z
 246:	88 60       	ori	r24, 0x08	; 8
 248:	80 83       	st	Z, r24
 24a:	ec e7       	ldi	r30, 0x7C	; 124
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 66       	ori	r24, 0x60	; 96
 252:	80 83       	st	Z, r24
 254:	78 94       	sei
 256:	08 95       	ret

00000258 <mTimer>:
 258:	ac 01       	movw	r20, r24
 25a:	e1 e8       	ldi	r30, 0x81	; 129
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	90 81       	ld	r25, Z
 260:	98 60       	ori	r25, 0x08	; 8
 262:	90 83       	st	Z, r25
 264:	88 ee       	ldi	r24, 0xE8	; 232
 266:	93 e0       	ldi	r25, 0x03	; 3
 268:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 26c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 270:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 274:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 278:	ef e6       	ldi	r30, 0x6F	; 111
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	90 81       	ld	r25, Z
 27e:	92 60       	ori	r25, 0x02	; 2
 280:	90 83       	st	Z, r25
 282:	b1 9a       	sbi	0x16, 1	; 22
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	05 c0       	rjmp	.+10     	; 0x294 <mTimer+0x3c>
 28a:	b1 9b       	sbis	0x16, 1	; 22
 28c:	fe cf       	rjmp	.-4      	; 0x28a <mTimer+0x32>
 28e:	b1 9a       	sbi	0x16, 1	; 22
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	24 17       	cp	r18, r20
 296:	35 07       	cpc	r19, r21
 298:	1c f4       	brge	.+6      	; 0x2a0 <mTimer+0x48>
 29a:	b1 9b       	sbis	0x16, 1	; 22
 29c:	f6 cf       	rjmp	.-20     	; 0x28a <mTimer+0x32>
 29e:	f7 cf       	rjmp	.-18     	; 0x28e <mTimer+0x36>
 2a0:	08 95       	ret

000002a2 <ADC_calibrate>:

//Calibrate the ADC by running each part through the sensor 10 times, in the order: white, black, aluminum, steel
void ADC_calibrate(uint16_t cal_vals_final[4][4]){
 2a2:	af 92       	push	r10
 2a4:	bf 92       	push	r11
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	64 97       	sbiw	r28, 0x14	; 20
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	08 2f       	mov	r16, r24
	init_ADC();
	init_motor();
 2c6:	19 2f       	mov	r17, r25
 2c8:	a5 df       	rcall	.-182    	; 0x214 <init_ADC>
 2ca:	9f df       	rcall	.-194    	; 0x20a <init_motor>
 2cc:	e0 2e       	mov	r14, r16
 2ce:	f1 2e       	mov	r15, r17
 2d0:	d1 2c       	mov	r13, r1
 2d2:	8e 01       	movw	r16, r28
 2d4:	0b 5e       	subi	r16, 0xEB	; 235
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
	for(j=0;j<4;j++)
	{
		// run part through 10 times, store the lowest value of each pass in an array
		for(i=0;i<10;i++)
		{
			while(!item_ready) {}
 2d8:	65 c0       	rjmp	.+202    	; 0x3a4 <ADC_calibrate+0x102>
 2da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <item_ready>
 2de:	88 23       	and	r24, r24
			PORTC = ADC_lowest_val & 0xFF00;
 2e0:	e1 f3       	breq	.-8      	; 0x2da <ADC_calibrate+0x38>
 2e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_lowest_val>
 2e6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ADC_lowest_val+0x1>
			cal_vals[i] = ADC_lowest_val;					
 2ea:	18 b8       	out	0x08, r1	; 8
 2ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_lowest_val>
 2f0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <ADC_lowest_val+0x1>
 2f4:	81 93       	st	Z+, r24
	uint16_t min, max, med, avg;
	
	for(j=0;j<4;j++)
	{
		// run part through 10 times, store the lowest value of each pass in an array
		for(i=0;i<10;i++)
 2f6:	91 93       	st	Z+, r25
 2f8:	0e 17       	cp	r16, r30
 2fa:	1f 07       	cpc	r17, r31
			while(!item_ready) {}
			PORTC = ADC_lowest_val & 0xFF00;
			cal_vals[i] = ADC_lowest_val;					
		}
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
 2fc:	71 f7       	brne	.-36     	; 0x2da <ADC_calibrate+0x38>
 2fe:	a9 80       	ldd	r10, Y+1	; 0x01
		max = cal_vals[0];
		avg = cal_vals[0];
		for(k=1;k<10;k++)
		{
			if(cal_vals[i] > max) max = cal_vals[i];
 300:	ba 80       	ldd	r11, Y+2	; 0x02
 302:	ed 89       	ldd	r30, Y+21	; 0x15
			PORTC = ADC_lowest_val & 0xFF00;
			cal_vals[i] = ADC_lowest_val;					
		}
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
		max = cal_vals[0];
 304:	fe 89       	ldd	r31, Y+22	; 0x16
			while(!item_ready) {}
			PORTC = ADC_lowest_val & 0xFF00;
			cal_vals[i] = ADC_lowest_val;					
		}
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
 306:	b5 01       	movw	r22, r10
		max = cal_vals[0];
		avg = cal_vals[0];
		for(k=1;k<10;k++)
		{
			if(cal_vals[i] > max) max = cal_vals[i];
 308:	c5 01       	movw	r24, r10
 30a:	49 e0       	ldi	r20, 0x09	; 9
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	ae 2f       	mov	r26, r30
 310:	3f 2f       	mov	r19, r31
 312:	6e 17       	cp	r22, r30
 314:	7f 07       	cpc	r23, r31
 316:	10 f4       	brcc	.+4      	; 0x31c <ADC_calibrate+0x7a>
 318:	6a 2f       	mov	r22, r26
 31a:	73 2f       	mov	r23, r19
 31c:	e8 17       	cp	r30, r24
 31e:	f9 07       	cpc	r31, r25
 320:	10 f4       	brcc	.+4      	; 0x326 <ADC_calibrate+0x84>
 322:	8a 2f       	mov	r24, r26
 324:	93 2f       	mov	r25, r19
 326:	41 50       	subi	r20, 0x01	; 1
		}
		// calculate the minimum, maximum, median, and mean of the 10 values
		min = cal_vals[0];
		max = cal_vals[0];
		avg = cal_vals[0];
		for(k=1;k<10;k++)
 328:	51 09       	sbc	r21, r1
 32a:	99 f7       	brne	.-26     	; 0x312 <ADC_calibrate+0x70>
 32c:	ae 0e       	add	r10, r30
 32e:	bf 1e       	adc	r11, r31
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	9f 01       	movw	r18, r30
 33e:	2a 0d       	add	r18, r10
		// white    [0,0][0,1][0,2][0,3]
		// black    [1,0][1,1][1,2][1,3]
		// aluminum [2,0][2,1][2,2][2,3]
		// steel    [3,0][3,1][3,2][3,3]
		
		cal_vals_final[j][0] = min;
 340:	3b 1d       	adc	r19, r11
 342:	f7 01       	movw	r30, r14
 344:	91 83       	std	Z+1, r25	; 0x01
		cal_vals_final[j][1] = max;
 346:	80 83       	st	Z, r24
 348:	73 83       	std	Z+3, r23	; 0x03
		cal_vals_final[j][2] = med;
 34a:	62 83       	std	Z+2, r22	; 0x02
 34c:	86 0f       	add	r24, r22
 34e:	97 1f       	adc	r25, r23
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
		cal_vals_final[j][3] = avg;
 354:	95 83       	std	Z+5, r25	; 0x05
 356:	84 83       	std	Z+4, r24	; 0x04
 358:	ad ec       	ldi	r26, 0xCD	; 205
 35a:	bc ec       	ldi	r27, 0xCC	; 204
 35c:	48 d0       	rcall	.+144    	; 0x3ee <__umulhisi3>
 35e:	96 95       	lsr	r25
 360:	87 95       	ror	r24
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
		
		// display the results for the part
		PORTC = j;
		mTimer(1000);
 368:	87 95       	ror	r24
 36a:	97 83       	std	Z+7, r25	; 0x07
 36c:	86 83       	std	Z+6, r24	; 0x06
		PORTC = min & 0xFF00;
 36e:	d8 b8       	out	0x08, r13	; 8
		mTimer(1000);
 370:	88 ee       	ldi	r24, 0xE8	; 232
 372:	93 e0       	ldi	r25, 0x03	; 3
 374:	71 df       	rcall	.-286    	; 0x258 <mTimer>
		PORTC = max & 0xFF00;
 376:	18 b8       	out	0x08, r1	; 8
		mTimer(1000);
 378:	88 ee       	ldi	r24, 0xE8	; 232
 37a:	93 e0       	ldi	r25, 0x03	; 3
 37c:	6d df       	rcall	.-294    	; 0x258 <mTimer>
		PORTC = med & 0xFF00;
		mTimer(1000);
 37e:	18 b8       	out	0x08, r1	; 8
 380:	88 ee       	ldi	r24, 0xE8	; 232
 382:	93 e0       	ldi	r25, 0x03	; 3
		PORTC = avg & 0xFF00;
 384:	69 df       	rcall	.-302    	; 0x258 <mTimer>
		mTimer(1000);
 386:	18 b8       	out	0x08, r1	; 8
 388:	88 ee       	ldi	r24, 0xE8	; 232
 38a:	93 e0       	ldi	r25, 0x03	; 3
 38c:	65 df       	rcall	.-310    	; 0x258 <mTimer>
 38e:	18 b8       	out	0x08, r1	; 8
 390:	88 ee       	ldi	r24, 0xE8	; 232
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	61 df       	rcall	.-318    	; 0x258 <mTimer>
	init_motor();
	int i,j,k;
	uint16_t cal_vals[10];
	uint16_t min, max, med, avg;
	
	for(j=0;j<4;j++)
 396:	f8 e0       	ldi	r31, 0x08	; 8
 398:	ef 0e       	add	r14, r31
 39a:	f1 1c       	adc	r15, r1
 39c:	d3 94       	inc	r13
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	d8 16       	cp	r13, r24
		PORTC = med & 0xFF00;
		mTimer(1000);
		PORTC = avg & 0xFF00;
		mTimer(1000);
	}	
}//ADC_calibrate
 3a2:	19 f0       	breq	.+6      	; 0x3aa <ADC_calibrate+0x108>
 3a4:	fe 01       	movw	r30, r28
 3a6:	31 96       	adiw	r30, 0x01	; 1
 3a8:	98 cf       	rjmp	.-208    	; 0x2da <ADC_calibrate+0x38>
 3aa:	64 96       	adiw	r28, 0x14	; 20
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	df 90       	pop	r13
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	08 95       	ret

000003ca <main>:

//##############	Main Program	##############//

int main(void)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	a0 97       	sbiw	r28, 0x20	; 32
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 3de:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xFF;		// Port C all output (LEDs)
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;		// Port D 3:0 = output (Motor)
 3e4:	8a b9       	out	0x0a, r24	; 10
	
	// Calibrate ADC before program starts
	uint16_t calibration_values[4][4];
	ADC_calibrate(calibration_values);
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	5b df       	rcall	.-330    	; 0x2a2 <ADC_calibrate>
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <main+0x22>

000003ee <__umulhisi3>:
 3ee:	a2 9f       	mul	r26, r18
 3f0:	b0 01       	movw	r22, r0
 3f2:	b3 9f       	mul	r27, r19
 3f4:	c0 01       	movw	r24, r0
 3f6:	a3 9f       	mul	r26, r19
 3f8:	70 0d       	add	r23, r0
 3fa:	81 1d       	adc	r24, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	91 1d       	adc	r25, r1
 400:	b2 9f       	mul	r27, r18
 402:	70 0d       	add	r23, r0
 404:	81 1d       	adc	r24, r1
 406:	11 24       	eor	r1, r1
 408:	91 1d       	adc	r25, r1
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
