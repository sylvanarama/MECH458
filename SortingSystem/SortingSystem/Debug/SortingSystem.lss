
SortingSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000008b8  0000094c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  0080011e  0080011e  0000096a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a49  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e86  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c2c  00000000  00000000  00003403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00004030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000925  00000000  00000000  000043f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aad  00000000  00000000  00004d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000057ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__vector_3>
   e:	00 00       	nop
  10:	da c0       	rjmp	.+436    	; 0x1c6 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__vector_21>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	b8 c0       	rjmp	.+368    	; 0x1e6 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 eb       	ldi	r30, 0xB8	; 184
  ac:	f8 e0       	ldi	r31, 0x08	; 8
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 31       	cpi	r26, 0x1E	; 30
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ae e1       	ldi	r26, 0x1E	; 30
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	af 35       	cpi	r26, 0x5F	; 95
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	89 d2       	rcall	.+1298   	; 0x5e2 <main>
  d0:	f1 c3       	rjmp	.+2018   	; 0x8b4 <_exit>

000000d2 <__bad_interrupt>:
  d2:	d3 c0       	rjmp	.+422    	; 0x27a <__vector_default>

000000d4 <initItem>:
/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
item* initItem(){
	item* newItem = malloc(sizeof(item));
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	cc d2       	rcall	.+1432   	; 0x672 <malloc>
  da:	fc 01       	movw	r30, r24
	newItem->next = NULL;
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
	newItem->metal = 0;
  e0:	10 82       	st	Z, r1
	newItem->reflective = 0;
  e2:	12 82       	std	Z+2, r1	; 0x02
  e4:	11 82       	std	Z+1, r1	; 0x01
	newItem->type = 0;
  e6:	13 82       	std	Z+3, r1	; 0x03
	newItem->stage = 0;
  e8:	14 82       	std	Z+4, r1	; 0x04
	newItem->number = 0;
  ea:	15 82       	std	Z+5, r1	; 0x05
	return newItem;
}//initLink
  ec:	08 95       	ret

000000ee <initQueue>:

queue* initQueue(){
	queue* q = malloc(sizeof(queue));
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	bf d2       	rcall	.+1406   	; 0x672 <malloc>
	q->head = NULL;	
  f4:	fc 01       	movw	r30, r24
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
	q->tail = NULL;	
  fa:	13 82       	std	Z+3, r1	; 0x03
  fc:	12 82       	std	Z+2, r1	; 0x02
	return q;
}//initQueue
  fe:	08 95       	ret

00000100 <enqueue>:

/****************************************************************************************
*  DESC: Accepts as input a new link by reference, and assigns the head and tail		
*  of the queue accordingly (Will put an item at the tail of the queue)		
*/
void enqueue(queue* q, item* newItem){
 100:	fc 01       	movw	r30, r24
	if (q->tail != NULL){
 102:	a2 81       	ldd	r26, Z+2	; 0x02
 104:	b3 81       	ldd	r27, Z+3	; 0x03
 106:	10 97       	sbiw	r26, 0x00	; 0
 108:	39 f0       	breq	.+14     	; 0x118 <enqueue+0x18>
		/* Not an empty queue */
		q->tail->next = newItem;
 10a:	17 96       	adiw	r26, 0x07	; 7
 10c:	7c 93       	st	X, r23
 10e:	6e 93       	st	-X, r22
 110:	16 97       	sbiw	r26, 0x06	; 6
		q->tail = newItem;
 112:	73 83       	std	Z+3, r23	; 0x03
 114:	62 83       	std	Z+2, r22	; 0x02
 116:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		q->head = newItem;
 118:	71 83       	std	Z+1, r23	; 0x01
 11a:	60 83       	st	Z, r22
		q->tail = newItem;
 11c:	73 83       	std	Z+3, r23	; 0x03
 11e:	62 83       	std	Z+2, r22	; 0x02
 120:	08 95       	ret

00000122 <dequeue>:

/**************************************************************************************
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* RETURNS: Pointer to the dequeued link
*/
item* dequeue(queue* q){
 122:	dc 01       	movw	r26, r24
	item* deQueuedItem = q->head;	// Will set to NULL if Head points to NULL
 124:	ed 91       	ld	r30, X+
 126:	fc 91       	ld	r31, X
 128:	11 97       	sbiw	r26, 0x01	; 1
	/* Ensure it is not an empty queue */
	if (q->head != NULL){
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	39 f0       	breq	.+14     	; 0x13c <dequeue+0x1a>
		q->head = q->head->next;
 12e:	86 81       	ldd	r24, Z+6	; 0x06
 130:	97 81       	ldd	r25, Z+7	; 0x07
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	9c 93       	st	X, r25
 136:	8e 93       	st	-X, r24
	}/*if*/
	if(q->head == NULL) q->tail = NULL; // if that was the last element in the queue, set tail to NULL as well
 138:	89 2b       	or	r24, r25
 13a:	21 f4       	brne	.+8      	; 0x144 <dequeue+0x22>
 13c:	13 96       	adiw	r26, 0x03	; 3
 13e:	1c 92       	st	X, r1
 140:	1e 92       	st	-X, r1
 142:	12 97       	sbiw	r26, 0x02	; 2
	return deQueuedItem;
}/*dequeue*/
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <__vector_21>:
		display_reflective_reading(avg);
		mTimer(7000);
	
		PORTB = CW;
	}
}//ADC_calibrate
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_17>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_1>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	88 b9       	out	0x08, r24	; 8
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <OS1_flag>
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_3>:
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	46 9a       	sbi	0x08, 6	; 8
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <OS2_flag>
 1a6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <reflective_present>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <__vector_3+0x22>
 1ae:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <reflective_present>
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <__vector_3+0x28>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <reflective_present>
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_4>:
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
 1d2:	47 9a       	sbi	0x08, 7	; 8
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <OS3_flag>
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_29>:
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
 200:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <reflective_present>
 204:	88 23       	and	r24, r24
 206:	61 f1       	breq	.+88     	; 0x260 <__vector_29+0x7a>
 208:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ADC_result+0x1>
 212:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ADC_result>
 216:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ADC_result>
 21a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <ADC_result+0x1>
 21e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 222:	98 2f       	mov	r25, r24
 224:	88 27       	eor	r24, r24
 226:	82 2b       	or	r24, r18
 228:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ADC_result+0x1>
 22c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ADC_result>
 230:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <ADC_result>
 234:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <ADC_result+0x1>
 238:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ADC_lowest_val>
 23c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <ADC_lowest_val+0x1>
 240:	28 17       	cp	r18, r24
 242:	39 07       	cpc	r19, r25
 244:	40 f4       	brcc	.+16     	; 0x256 <__vector_29+0x70>
 246:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ADC_result>
 24a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <ADC_result+0x1>
 24e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <ADC_lowest_val+0x1>
 252:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ADC_lowest_val>
 256:	ea e7       	ldi	r30, 0x7A	; 122
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	80 83       	st	Z, r24
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_default>:
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <init_interrupts>:
 28e:	82 e9       	ldi	r24, 0x92	; 146
 290:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 294:	8d b3       	in	r24, 0x1d	; 29
 296:	8d 63       	ori	r24, 0x3D	; 61
 298:	8d bb       	out	0x1d, r24	; 29
 29a:	08 95       	ret

0000029c <init_timer0_pwm>:
 29c:	84 b5       	in	r24, 0x24	; 36
 29e:	83 68       	ori	r24, 0x83	; 131
 2a0:	84 bd       	out	0x24, r24	; 36
 2a2:	85 b5       	in	r24, 0x25	; 37
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	85 bd       	out	0x25, r24	; 37
 2a8:	80 e8       	ldi	r24, 0x80	; 128
 2aa:	87 bd       	out	0x27, r24	; 39
 2ac:	08 95       	ret

000002ae <init_motor>:
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	80 e3       	ldi	r24, 0x30	; 48
 2b4:	87 bd       	out	0x27, r24	; 39
 2b6:	08 95       	ret

000002b8 <init_ADC>:
 2b8:	ec e7       	ldi	r30, 0x7C	; 124
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	80 64       	ori	r24, 0x40	; 64
 2c0:	80 83       	st	Z, r24
 2c2:	ea e7       	ldi	r30, 0x7A	; 122
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	82 60       	ori	r24, 0x02	; 2
 2ca:	80 83       	st	Z, r24
 2cc:	80 81       	ld	r24, Z
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	80 83       	st	Z, r24
 2d2:	80 81       	ld	r24, Z
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	80 83       	st	Z, r24
 2d8:	80 81       	ld	r24, Z
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	80 83       	st	Z, r24
 2de:	08 95       	ret

000002e0 <init_stepper>:
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	81 b9       	out	0x01, r24	; 1
 2e4:	85 e3       	ldi	r24, 0x35	; 53
 2e6:	82 b9       	out	0x02, r24	; 2
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <motor_position+0x1>
 2f0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <motor_position>
 2f4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <stepper_on+0x1>
 2f8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <stepper_on>
 2fc:	08 95       	ret

000002fe <mTimer>:
 2fe:	ac 01       	movw	r20, r24
 300:	e1 e8       	ldi	r30, 0x81	; 129
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	91 60       	ori	r25, 0x01	; 1
 308:	90 83       	st	Z, r25
 30a:	90 81       	ld	r25, Z
 30c:	98 60       	ori	r25, 0x08	; 8
 30e:	90 83       	st	Z, r25
 310:	88 ee       	ldi	r24, 0xE8	; 232
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 318:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 31c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 320:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 324:	b1 9a       	sbi	0x16, 1	; 22
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	05 c0       	rjmp	.+10     	; 0x336 <mTimer+0x38>
 32c:	b1 9b       	sbis	0x16, 1	; 22
 32e:	fe cf       	rjmp	.-4      	; 0x32c <mTimer+0x2e>
 330:	b1 9a       	sbi	0x16, 1	; 22
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	24 17       	cp	r18, r20
 338:	35 07       	cpc	r19, r21
 33a:	1c f4       	brge	.+6      	; 0x342 <mTimer+0x44>
 33c:	b1 9b       	sbis	0x16, 1	; 22
 33e:	f6 cf       	rjmp	.-20     	; 0x32c <mTimer+0x2e>
 340:	f7 cf       	rjmp	.-18     	; 0x330 <mTimer+0x32>
 342:	08 95       	ret

00000344 <stepper_rotate>:
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	18 16       	cp	r1, r24
 356:	19 06       	cpc	r1, r25
 358:	0c f0       	brlt	.+2      	; 0x35c <stepper_rotate+0x18>
 35a:	61 c0       	rjmp	.+194    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 35c:	6b 01       	movw	r12, r22
 35e:	8c 01       	movw	r16, r24
 360:	c0 e0       	ldi	r28, 0x00	; 0
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	0f 2e       	mov	r0, r31
 366:	fa e0       	ldi	r31, 0x0A	; 10
 368:	ef 2e       	mov	r14, r31
 36a:	f1 2c       	mov	r15, r1
 36c:	f0 2d       	mov	r31, r0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	c8 16       	cp	r12, r24
 372:	d1 04       	cpc	r13, r1
 374:	d1 f4       	brne	.+52     	; 0x3aa <stepper_rotate+0x66>
 376:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end>
 37a:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0x1>
 37e:	e5 5f       	subi	r30, 0xF5	; 245
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	80 81       	ld	r24, Z
 384:	82 b9       	out	0x02, r24	; 2
 386:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 38a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	83 70       	andi	r24, 0x03	; 3
 392:	90 78       	andi	r25, 0x80	; 128
 394:	99 23       	and	r25, r25
 396:	24 f4       	brge	.+8      	; 0x3a0 <stepper_rotate+0x5c>
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	8c 6f       	ori	r24, 0xFC	; 252
 39c:	9f 6f       	ori	r25, 0xFF	; 255
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 3a4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 3a8:	1d c0       	rjmp	.+58     	; 0x3e4 <stepper_rotate+0xa0>
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	c8 16       	cp	r12, r24
 3ae:	d8 06       	cpc	r13, r24
 3b0:	c9 f4       	brne	.+50     	; 0x3e4 <stepper_rotate+0xa0>
 3b2:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end>
 3b6:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0x1>
 3ba:	e9 5f       	subi	r30, 0xF9	; 249
 3bc:	fe 4f       	sbci	r31, 0xFE	; 254
 3be:	80 81       	ld	r24, Z
 3c0:	82 b9       	out	0x02, r24	; 2
 3c2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 3c6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x1>
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	83 70       	andi	r24, 0x03	; 3
 3ce:	90 78       	andi	r25, 0x80	; 128
 3d0:	99 23       	and	r25, r25
 3d2:	24 f4       	brge	.+8      	; 0x3dc <stepper_rotate+0x98>
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	8c 6f       	ori	r24, 0xFC	; 252
 3d8:	9f 6f       	ori	r25, 0xFF	; 255
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 3e0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 3e4:	c7 01       	movw	r24, r14
 3e6:	8b df       	rcall	.-234    	; 0x2fe <mTimer>
 3e8:	c4 30       	cpi	r28, 0x04	; 4
 3ea:	d1 05       	cpc	r29, r1
 3ec:	3c f4       	brge	.+14     	; 0x3fc <stepper_rotate+0xb8>
 3ee:	86 e0       	ldi	r24, 0x06	; 6
 3f0:	e8 16       	cp	r14, r24
 3f2:	f1 04       	cpc	r15, r1
 3f4:	1c f0       	brlt	.+6      	; 0x3fc <stepper_rotate+0xb8>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	e8 1a       	sub	r14, r24
 3fa:	f1 08       	sbc	r15, r1
 3fc:	c8 01       	movw	r24, r16
 3fe:	8c 1b       	sub	r24, r28
 400:	9d 0b       	sbc	r25, r29
 402:	05 97       	sbiw	r24, 0x05	; 5
 404:	3c f4       	brge	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 406:	8b e0       	ldi	r24, 0x0B	; 11
 408:	e8 16       	cp	r14, r24
 40a:	f1 04       	cpc	r15, r1
 40c:	1c f4       	brge	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40e:	8f ef       	ldi	r24, 0xFF	; 255
 410:	e8 1a       	sub	r14, r24
 412:	f8 0a       	sbc	r15, r24
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	0c 17       	cp	r16, r28
 418:	1d 07       	cpc	r17, r29
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	a8 cf       	rjmp	.-176    	; 0x36e <stepper_rotate+0x2a>
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	08 95       	ret

00000430 <stepper_position>:
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	15 b8       	out	0x05, r1	; 5
 436:	c8 2f       	mov	r28, r24
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <motor_position>
 43e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <motor_position+0x1>
 442:	9e 01       	movw	r18, r28
 444:	28 1b       	sub	r18, r24
 446:	39 0b       	sbc	r19, r25
 448:	21 30       	cpi	r18, 0x01	; 1
 44a:	31 05       	cpc	r19, r1
 44c:	21 f0       	breq	.+8      	; 0x456 <stepper_position+0x26>
 44e:	2d 3f       	cpi	r18, 0xFD	; 253
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	38 07       	cpc	r19, r24
 454:	31 f4       	brne	.+12     	; 0x462 <stepper_position+0x32>
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	82 e3       	ldi	r24, 0x32	; 50
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	72 df       	rcall	.-284    	; 0x344 <stepper_rotate>
 460:	18 c0       	rjmp	.+48     	; 0x492 <stepper_position+0x62>
 462:	2f 3f       	cpi	r18, 0xFF	; 255
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	38 07       	cpc	r19, r24
 468:	19 f0       	breq	.+6      	; 0x470 <stepper_position+0x40>
 46a:	23 30       	cpi	r18, 0x03	; 3
 46c:	31 05       	cpc	r19, r1
 46e:	31 f4       	brne	.+12     	; 0x47c <stepper_position+0x4c>
 470:	6f ef       	ldi	r22, 0xFF	; 255
 472:	7f ef       	ldi	r23, 0xFF	; 255
 474:	82 e3       	ldi	r24, 0x32	; 50
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	65 df       	rcall	.-310    	; 0x344 <stepper_rotate>
 47a:	0b c0       	rjmp	.+22     	; 0x492 <stepper_position+0x62>
 47c:	22 30       	cpi	r18, 0x02	; 2
 47e:	31 05       	cpc	r19, r1
 480:	19 f0       	breq	.+6      	; 0x488 <stepper_position+0x58>
 482:	2e 3f       	cpi	r18, 0xFE	; 254
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	29 f4       	brne	.+10     	; 0x492 <stepper_position+0x62>
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	84 e6       	ldi	r24, 0x64	; 100
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	59 df       	rcall	.-334    	; 0x344 <stepper_rotate>
 492:	d0 93 10 01 	sts	0x0110, r29	; 0x800110 <motor_position+0x1>
 496:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <motor_position>
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	85 b9       	out	0x05, r24	; 5
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <entry_sensor>:

void entry_sensor()
{
	PORTC = 0x10;
 4a4:	80 e1       	ldi	r24, 0x10	; 16
 4a6:	88 b9       	out	0x08, r24	; 8
	OS1_flag = 0;
 4a8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <OS1_flag>
	// To keep track of how many items have been added
	item_number++;
 4ac:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <item_number>
 4b0:	8f 5f       	subi	r24, 0xFF	; 255
 4b2:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <item_number>
	//Add a new item to the queue
	item* newItem = initItem();
	newItem->number = item_number;
 4b6:	0e de       	rcall	.-996    	; 0xd4 <initItem>
 4b8:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <item_number>
 4bc:	fc 01       	movw	r30, r24
	newItem->stage = 1;
 4be:	25 83       	std	Z+5, r18	; 0x05
 4c0:	21 e0       	ldi	r18, 0x01	; 1
	enqueue(entryList, newItem);
 4c2:	24 83       	std	Z+4, r18	; 0x04
 4c4:	bc 01       	movw	r22, r24
 4c6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <entryList>
 4ca:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <entryList+0x1>
 4ce:	18 ce       	rjmp	.-976    	; 0x100 <enqueue>
 4d0:	08 95       	ret

000004d2 <reflective_sensor>:
	entryList->tail->metal = 1;
	//PORTC |= 0x20;
}
*/
void reflective_sensor(){
	OS2_flag = 0;
 4d2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <OS2_flag>
	//PORTC |= 0x40;
	//object entering reflective sensor zone, start ADC conversion
	if(reflective_present)
 4d6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <reflective_present>
 4da:	88 23       	and	r24, r24
 4dc:	31 f0       	breq	.+12     	; 0x4ea <reflective_sensor+0x18>
	{
		ADCSRA |= _BV(ADSC);
 4de:	ea e7       	ldi	r30, 0x7A	; 122
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	80 83       	st	Z, r24
 4e8:	08 95       	ret
	}
	// object exiting the reflective sensor zone, item ready to be classified
	else
	{
		if(STATE == OPERATIONAL)
 4ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <STATE>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	d1 f4       	brne	.+52     	; 0x526 <reflective_sensor+0x54>
		{
			item* reflective_sensor_item = dequeue(entryList);
 4f2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <entryList>
 4f6:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <entryList+0x1>
 4fa:	13 de       	rcall	.-986    	; 0x122 <dequeue>
				mTimer(2000);
				PORTC = entryList->head->number;
				mTimer(2000);
			}
			*/
			reflective_sensor_item->reflective = ADC_lowest_val;
 4fc:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <ADC_lowest_val>
 500:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <ADC_lowest_val+0x1>
 504:	fc 01       	movw	r30, r24
 506:	32 83       	std	Z+2, r19	; 0x02
 508:	21 83       	std	Z+1, r18	; 0x01
			reflective_sensor_item->stage = 2;	
 50a:	22 e0       	ldi	r18, 0x02	; 2
 50c:	24 83       	std	Z+4, r18	; 0x04
			enqueue(reflectiveList, reflective_sensor_item);
 50e:	bc 01       	movw	r22, r24
 510:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <reflectiveList>
 514:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <reflectiveList+0x1>
 518:	f3 dd       	rcall	.-1050   	; 0x100 <enqueue>
			ADC_lowest_val = 0x3FF;
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	93 e0       	ldi	r25, 0x03	; 3
 51e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <ADC_lowest_val+0x1>
 522:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ADC_lowest_val>
		}
		item_ready = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <item_ready>
 52c:	08 95       	ret

0000052e <classify_item>:
	}
}

void classify_item(){
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
	item_ready = 0;
 532:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <item_ready>
	item* item_to_classify = dequeue(reflectiveList);
 536:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <reflectiveList>
 53a:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <reflectiveList+0x1>
 53e:	f1 dd       	rcall	.-1054   	; 0x122 <dequeue>
 540:	ec 01       	movw	r28, r24
	uint16_t r = item_to_classify->reflective;
 542:	a9 81       	ldd	r26, Y+1	; 0x01
 544:	ba 81       	ldd	r27, Y+2	; 0x02
	uint8_t type = 0;
	uint16_t diff = 0xFF;
	uint16_t sm_diff = 0xFF;
	int i=0;
	for(i=0;i<4;i++)
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	90 e0       	ldi	r25, 0x00	; 0

void classify_item(){
	item_ready = 0;
	item* item_to_classify = dequeue(reflectiveList);
	uint16_t r = item_to_classify->reflective;
	uint8_t type = 0;
 54a:	60 e0       	ldi	r22, 0x00	; 0
	uint16_t diff = 0xFF;
	uint16_t sm_diff = 0xFF;
	int i=0;
	for(i=0;i<4;i++)
	{
		diff = abs(calibration_vals[i] - r);
 54c:	fc 01       	movw	r30, r24
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	eb 5e       	subi	r30, 0xEB	; 235
 554:	fe 4f       	sbci	r31, 0xFE	; 254
 556:	20 81       	ld	r18, Z
 558:	31 81       	ldd	r19, Z+1	; 0x01
		if (diff < sm_diff ) type = i;
 55a:	2a 1b       	sub	r18, r26
 55c:	3b 0b       	sbc	r19, r27
 55e:	a9 01       	movw	r20, r18
 560:	22 f4       	brpl	.+8      	; 0x56a <classify_item+0x3c>
 562:	44 27       	eor	r20, r20
 564:	55 27       	eor	r21, r21
 566:	42 1b       	sub	r20, r18
 568:	53 0b       	sbc	r21, r19
 56a:	4f 3f       	cpi	r20, 0xFF	; 255
 56c:	51 05       	cpc	r21, r1
 56e:	08 f4       	brcc	.+2      	; 0x572 <classify_item+0x44>
 570:	68 2f       	mov	r22, r24
	uint16_t r = item_to_classify->reflective;
	uint8_t type = 0;
	uint16_t diff = 0xFF;
	uint16_t sm_diff = 0xFF;
	int i=0;
	for(i=0;i<4;i++)
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	84 30       	cpi	r24, 0x04	; 4
 576:	91 05       	cpc	r25, r1
 578:	49 f7       	brne	.-46     	; 0x54c <classify_item+0x1e>
	{
		diff = abs(calibration_vals[i] - r);
		if (diff < sm_diff ) type = i;
	}
	
	sorted_items_array[type]++;
 57a:	e6 2f       	mov	r30, r22
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	a0 e2       	ldi	r26, 0x20	; 32
 580:	b1 e0       	ldi	r27, 0x01	; 1
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e0 5e       	subi	r30, 0xE0	; 224
 588:	fe 4f       	sbci	r31, 0xFE	; 254
 58a:	80 81       	ld	r24, Z
 58c:	91 81       	ldd	r25, Z+1	; 0x01
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	91 83       	std	Z+1, r25	; 0x01
 592:	80 83       	st	Z, r24
	sorted_items_array[TOTAL]++;
 594:	18 96       	adiw	r26, 0x08	; 8
 596:	8d 91       	ld	r24, X+
 598:	9c 91       	ld	r25, X
 59a:	19 97       	sbiw	r26, 0x09	; 9
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	19 96       	adiw	r26, 0x09	; 9
 5a0:	9c 93       	st	X, r25
 5a2:	8e 93       	st	-X, r24
 5a4:	18 97       	sbiw	r26, 0x08	; 8
	item_to_classify->type = type;
 5a6:	6b 83       	std	Y+3, r22	; 0x03
	item_to_classify->stage = 3;
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	8c 83       	std	Y+4, r24	; 0x04
	
	enqueue(classifiedList, item_to_classify);
 5ac:	be 01       	movw	r22, r28
 5ae:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <classifiedList>
 5b2:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <classifiedList+0x1>
 5b6:	a4 dd       	rcall	.-1208   	; 0x100 <enqueue>
	
	//TESTING
	PORTC |= item_to_classify->type;
 5b8:	98 b1       	in	r25, 0x08	; 8
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	89 2b       	or	r24, r25
 5be:	88 b9       	out	0x08, r24	; 8
	
}//classify_item
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <exit_sensor>:

void exit_sensor(){
	OS3_flag = 0;
 5c6:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <OS3_flag>
	// Show sensor triggered
	//PORTC |= 0x80;
	// Move item to sorted queue
	enqueue(sortedList, dequeue(classifiedList));
 5ca:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <classifiedList>
 5ce:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <classifiedList+0x1>
 5d2:	a7 dd       	rcall	.-1202   	; 0x122 <dequeue>
 5d4:	bc 01       	movw	r22, r24
 5d6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <sortedList>
 5da:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <sortedList+0x1>
 5de:	90 cd       	rjmp	.-1248   	; 0x100 <enqueue>
 5e0:	08 95       	ret

000005e2 <main>:
//##############	Main Program	##############//

int main(void)
{
	// Init port directions
	DDRA = 0x00;		// Port A all inputs (button and switch)
 5e2:	11 b8       	out	0x01, r1	; 1
	DDRB = 0x8F;		// PB7 = output for PWM signal, PB3:0 = output for motor
 5e4:	8f e8       	ldi	r24, 0x8F	; 143
 5e6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF;		// Port C all output (LEDs)
 5e8:	8f ef       	ldi	r24, 0xFF	; 255
 5ea:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;		// Port D 3:0 = sensor input (External Interrupts)
 5ec:	80 ef       	ldi	r24, 0xF0	; 240
 5ee:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;		// Port E input (buttons/interrupts)
 5f0:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0x00;		// Port F input (ADC and ?)
 5f2:	10 ba       	out	0x10, r1	; 16
	
	PORTC = 0x00;
 5f4:	18 b8       	out	0x08, r1	; 8
	
	// Initialize Peripherals
	cli();
	init_ADC();
	init_timer0_pwm();
 5f6:	f8 94       	cli
 5f8:	5f de       	rcall	.-834    	; 0x2b8 <init_ADC>
 5fa:	50 de       	rcall	.-864    	; 0x29c <init_timer0_pwm>
 5fc:	58 de       	rcall	.-848    	; 0x2ae <init_motor>
 5fe:	47 de       	rcall	.-882    	; 0x28e <init_interrupts>
 600:	6f de       	rcall	.-802    	; 0x2e0 <init_stepper>
 602:	78 94       	sei
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <STATE>
 60a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <item_waiting>
 60e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <item_number>
 612:	6d dd       	rcall	.-1318   	; 0xee <initQueue>
 614:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <entryList+0x1>
 618:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <entryList>
 61c:	68 dd       	rcall	.-1328   	; 0xee <initQueue>
 61e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <reflectiveList+0x1>
 622:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <reflectiveList>
 626:	63 dd       	rcall	.-1338   	; 0xee <initQueue>
 628:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <classifiedList+0x1>
 62c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <classifiedList>
 630:	5e dd       	rcall	.-1348   	; 0xee <initQueue>
 632:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <sortedList+0x1>
 636:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <sortedList>
 63a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <OS1_flag>
 63e:	81 11       	cpse	r24, r1
 640:	31 df       	rcall	.-414    	; 0x4a4 <entry_sensor>
 642:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <OS2_flag>
 646:	81 11       	cpse	r24, r1
 648:	44 df       	rcall	.-376    	; 0x4d2 <reflective_sensor>
 64a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <item_ready>
 64e:	81 11       	cpse	r24, r1
 650:	6e df       	rcall	.-292    	; 0x52e <classify_item>
 652:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <OS3_flag>
 656:	88 23       	and	r24, r24
 658:	81 f3       	breq	.-32     	; 0x63a <main+0x58>
 65a:	b5 df       	rcall	.-150    	; 0x5c6 <exit_sensor>
 65c:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <sortedList>
 660:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <sortedList+0x1>
 664:	02 80       	ldd	r0, Z+2	; 0x02
 666:	f3 81       	ldd	r31, Z+3	; 0x03
 668:	e0 2d       	mov	r30, r0
 66a:	83 81       	ldd	r24, Z+3	; 0x03
 66c:	8f 5f       	subi	r24, 0xFF	; 255
 66e:	e0 de       	rcall	.-576    	; 0x430 <stepper_position>
 670:	e4 cf       	rjmp	.-56     	; 0x63a <main+0x58>

00000672 <malloc>:
 672:	0f 93       	push	r16
 674:	1f 93       	push	r17
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	91 05       	cpc	r25, r1
 67e:	10 f4       	brcc	.+4      	; 0x684 <malloc+0x12>
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <__flp>
 688:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <__flp+0x1>
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	a0 e0       	ldi	r26, 0x00	; 0
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	30 97       	sbiw	r30, 0x00	; 0
 696:	19 f1       	breq	.+70     	; 0x6de <malloc+0x6c>
 698:	40 81       	ld	r20, Z
 69a:	51 81       	ldd	r21, Z+1	; 0x01
 69c:	02 81       	ldd	r16, Z+2	; 0x02
 69e:	13 81       	ldd	r17, Z+3	; 0x03
 6a0:	48 17       	cp	r20, r24
 6a2:	59 07       	cpc	r21, r25
 6a4:	c8 f0       	brcs	.+50     	; 0x6d8 <malloc+0x66>
 6a6:	84 17       	cp	r24, r20
 6a8:	95 07       	cpc	r25, r21
 6aa:	69 f4       	brne	.+26     	; 0x6c6 <malloc+0x54>
 6ac:	10 97       	sbiw	r26, 0x00	; 0
 6ae:	31 f0       	breq	.+12     	; 0x6bc <malloc+0x4a>
 6b0:	12 96       	adiw	r26, 0x02	; 2
 6b2:	0c 93       	st	X, r16
 6b4:	12 97       	sbiw	r26, 0x02	; 2
 6b6:	13 96       	adiw	r26, 0x03	; 3
 6b8:	1c 93       	st	X, r17
 6ba:	27 c0       	rjmp	.+78     	; 0x70a <malloc+0x98>
 6bc:	00 93 5d 01 	sts	0x015D, r16	; 0x80015d <__flp>
 6c0:	10 93 5e 01 	sts	0x015E, r17	; 0x80015e <__flp+0x1>
 6c4:	22 c0       	rjmp	.+68     	; 0x70a <malloc+0x98>
 6c6:	21 15       	cp	r18, r1
 6c8:	31 05       	cpc	r19, r1
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <malloc+0x60>
 6cc:	42 17       	cp	r20, r18
 6ce:	53 07       	cpc	r21, r19
 6d0:	18 f4       	brcc	.+6      	; 0x6d8 <malloc+0x66>
 6d2:	9a 01       	movw	r18, r20
 6d4:	bd 01       	movw	r22, r26
 6d6:	ef 01       	movw	r28, r30
 6d8:	df 01       	movw	r26, r30
 6da:	f8 01       	movw	r30, r16
 6dc:	db cf       	rjmp	.-74     	; 0x694 <malloc+0x22>
 6de:	21 15       	cp	r18, r1
 6e0:	31 05       	cpc	r19, r1
 6e2:	f9 f0       	breq	.+62     	; 0x722 <malloc+0xb0>
 6e4:	28 1b       	sub	r18, r24
 6e6:	39 0b       	sbc	r19, r25
 6e8:	24 30       	cpi	r18, 0x04	; 4
 6ea:	31 05       	cpc	r19, r1
 6ec:	80 f4       	brcc	.+32     	; 0x70e <malloc+0x9c>
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	9b 81       	ldd	r25, Y+3	; 0x03
 6f2:	61 15       	cp	r22, r1
 6f4:	71 05       	cpc	r23, r1
 6f6:	21 f0       	breq	.+8      	; 0x700 <malloc+0x8e>
 6f8:	fb 01       	movw	r30, r22
 6fa:	93 83       	std	Z+3, r25	; 0x03
 6fc:	82 83       	std	Z+2, r24	; 0x02
 6fe:	04 c0       	rjmp	.+8      	; 0x708 <malloc+0x96>
 700:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <__flp+0x1>
 704:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <__flp>
 708:	fe 01       	movw	r30, r28
 70a:	32 96       	adiw	r30, 0x02	; 2
 70c:	44 c0       	rjmp	.+136    	; 0x796 <malloc+0x124>
 70e:	fe 01       	movw	r30, r28
 710:	e2 0f       	add	r30, r18
 712:	f3 1f       	adc	r31, r19
 714:	81 93       	st	Z+, r24
 716:	91 93       	st	Z+, r25
 718:	22 50       	subi	r18, 0x02	; 2
 71a:	31 09       	sbc	r19, r1
 71c:	39 83       	std	Y+1, r19	; 0x01
 71e:	28 83       	st	Y, r18
 720:	3a c0       	rjmp	.+116    	; 0x796 <malloc+0x124>
 722:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <__brkval>
 726:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__brkval+0x1>
 72a:	23 2b       	or	r18, r19
 72c:	41 f4       	brne	.+16     	; 0x73e <malloc+0xcc>
 72e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 732:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 736:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <__brkval+0x1>
 73a:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <__brkval>
 73e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 742:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 746:	21 15       	cp	r18, r1
 748:	31 05       	cpc	r19, r1
 74a:	41 f4       	brne	.+16     	; 0x75c <malloc+0xea>
 74c:	2d b7       	in	r18, 0x3d	; 61
 74e:	3e b7       	in	r19, 0x3e	; 62
 750:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 754:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 758:	24 1b       	sub	r18, r20
 75a:	35 0b       	sbc	r19, r21
 75c:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <__brkval>
 760:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <__brkval+0x1>
 764:	e2 17       	cp	r30, r18
 766:	f3 07       	cpc	r31, r19
 768:	a0 f4       	brcc	.+40     	; 0x792 <malloc+0x120>
 76a:	2e 1b       	sub	r18, r30
 76c:	3f 0b       	sbc	r19, r31
 76e:	28 17       	cp	r18, r24
 770:	39 07       	cpc	r19, r25
 772:	78 f0       	brcs	.+30     	; 0x792 <malloc+0x120>
 774:	ac 01       	movw	r20, r24
 776:	4e 5f       	subi	r20, 0xFE	; 254
 778:	5f 4f       	sbci	r21, 0xFF	; 255
 77a:	24 17       	cp	r18, r20
 77c:	35 07       	cpc	r19, r21
 77e:	48 f0       	brcs	.+18     	; 0x792 <malloc+0x120>
 780:	4e 0f       	add	r20, r30
 782:	5f 1f       	adc	r21, r31
 784:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <__brkval+0x1>
 788:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <__brkval>
 78c:	81 93       	st	Z+, r24
 78e:	91 93       	st	Z+, r25
 790:	02 c0       	rjmp	.+4      	; 0x796 <malloc+0x124>
 792:	e0 e0       	ldi	r30, 0x00	; 0
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	cf 01       	movw	r24, r30
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	0f 91       	pop	r16
 7a0:	08 95       	ret

000007a2 <free>:
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	00 97       	sbiw	r24, 0x00	; 0
 7a8:	09 f4       	brne	.+2      	; 0x7ac <free+0xa>
 7aa:	81 c0       	rjmp	.+258    	; 0x8ae <free+0x10c>
 7ac:	fc 01       	movw	r30, r24
 7ae:	32 97       	sbiw	r30, 0x02	; 2
 7b0:	13 82       	std	Z+3, r1	; 0x03
 7b2:	12 82       	std	Z+2, r1	; 0x02
 7b4:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <__flp>
 7b8:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <__flp+0x1>
 7bc:	10 97       	sbiw	r26, 0x00	; 0
 7be:	81 f4       	brne	.+32     	; 0x7e0 <free+0x3e>
 7c0:	20 81       	ld	r18, Z
 7c2:	31 81       	ldd	r19, Z+1	; 0x01
 7c4:	82 0f       	add	r24, r18
 7c6:	93 1f       	adc	r25, r19
 7c8:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <__brkval>
 7cc:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__brkval+0x1>
 7d0:	28 17       	cp	r18, r24
 7d2:	39 07       	cpc	r19, r25
 7d4:	51 f5       	brne	.+84     	; 0x82a <free+0x88>
 7d6:	f0 93 5c 01 	sts	0x015C, r31	; 0x80015c <__brkval+0x1>
 7da:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <__brkval>
 7de:	67 c0       	rjmp	.+206    	; 0x8ae <free+0x10c>
 7e0:	ed 01       	movw	r28, r26
 7e2:	20 e0       	ldi	r18, 0x00	; 0
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	ce 17       	cp	r28, r30
 7e8:	df 07       	cpc	r29, r31
 7ea:	40 f4       	brcc	.+16     	; 0x7fc <free+0x5a>
 7ec:	4a 81       	ldd	r20, Y+2	; 0x02
 7ee:	5b 81       	ldd	r21, Y+3	; 0x03
 7f0:	9e 01       	movw	r18, r28
 7f2:	41 15       	cp	r20, r1
 7f4:	51 05       	cpc	r21, r1
 7f6:	f1 f0       	breq	.+60     	; 0x834 <free+0x92>
 7f8:	ea 01       	movw	r28, r20
 7fa:	f5 cf       	rjmp	.-22     	; 0x7e6 <free+0x44>
 7fc:	d3 83       	std	Z+3, r29	; 0x03
 7fe:	c2 83       	std	Z+2, r28	; 0x02
 800:	40 81       	ld	r20, Z
 802:	51 81       	ldd	r21, Z+1	; 0x01
 804:	84 0f       	add	r24, r20
 806:	95 1f       	adc	r25, r21
 808:	c8 17       	cp	r28, r24
 80a:	d9 07       	cpc	r29, r25
 80c:	59 f4       	brne	.+22     	; 0x824 <free+0x82>
 80e:	88 81       	ld	r24, Y
 810:	99 81       	ldd	r25, Y+1	; 0x01
 812:	84 0f       	add	r24, r20
 814:	95 1f       	adc	r25, r21
 816:	02 96       	adiw	r24, 0x02	; 2
 818:	91 83       	std	Z+1, r25	; 0x01
 81a:	80 83       	st	Z, r24
 81c:	8a 81       	ldd	r24, Y+2	; 0x02
 81e:	9b 81       	ldd	r25, Y+3	; 0x03
 820:	93 83       	std	Z+3, r25	; 0x03
 822:	82 83       	std	Z+2, r24	; 0x02
 824:	21 15       	cp	r18, r1
 826:	31 05       	cpc	r19, r1
 828:	29 f4       	brne	.+10     	; 0x834 <free+0x92>
 82a:	f0 93 5e 01 	sts	0x015E, r31	; 0x80015e <__flp+0x1>
 82e:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <__flp>
 832:	3d c0       	rjmp	.+122    	; 0x8ae <free+0x10c>
 834:	e9 01       	movw	r28, r18
 836:	fb 83       	std	Y+3, r31	; 0x03
 838:	ea 83       	std	Y+2, r30	; 0x02
 83a:	49 91       	ld	r20, Y+
 83c:	59 91       	ld	r21, Y+
 83e:	c4 0f       	add	r28, r20
 840:	d5 1f       	adc	r29, r21
 842:	ec 17       	cp	r30, r28
 844:	fd 07       	cpc	r31, r29
 846:	61 f4       	brne	.+24     	; 0x860 <free+0xbe>
 848:	80 81       	ld	r24, Z
 84a:	91 81       	ldd	r25, Z+1	; 0x01
 84c:	84 0f       	add	r24, r20
 84e:	95 1f       	adc	r25, r21
 850:	02 96       	adiw	r24, 0x02	; 2
 852:	e9 01       	movw	r28, r18
 854:	99 83       	std	Y+1, r25	; 0x01
 856:	88 83       	st	Y, r24
 858:	82 81       	ldd	r24, Z+2	; 0x02
 85a:	93 81       	ldd	r25, Z+3	; 0x03
 85c:	9b 83       	std	Y+3, r25	; 0x03
 85e:	8a 83       	std	Y+2, r24	; 0x02
 860:	e0 e0       	ldi	r30, 0x00	; 0
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	12 96       	adiw	r26, 0x02	; 2
 866:	8d 91       	ld	r24, X+
 868:	9c 91       	ld	r25, X
 86a:	13 97       	sbiw	r26, 0x03	; 3
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	19 f0       	breq	.+6      	; 0x876 <free+0xd4>
 870:	fd 01       	movw	r30, r26
 872:	dc 01       	movw	r26, r24
 874:	f7 cf       	rjmp	.-18     	; 0x864 <free+0xc2>
 876:	8d 91       	ld	r24, X+
 878:	9c 91       	ld	r25, X
 87a:	11 97       	sbiw	r26, 0x01	; 1
 87c:	9d 01       	movw	r18, r26
 87e:	2e 5f       	subi	r18, 0xFE	; 254
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	82 0f       	add	r24, r18
 884:	93 1f       	adc	r25, r19
 886:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <__brkval>
 88a:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <__brkval+0x1>
 88e:	28 17       	cp	r18, r24
 890:	39 07       	cpc	r19, r25
 892:	69 f4       	brne	.+26     	; 0x8ae <free+0x10c>
 894:	30 97       	sbiw	r30, 0x00	; 0
 896:	29 f4       	brne	.+10     	; 0x8a2 <free+0x100>
 898:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__flp+0x1>
 89c:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__flp>
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <free+0x104>
 8a2:	13 82       	std	Z+3, r1	; 0x03
 8a4:	12 82       	std	Z+2, r1	; 0x02
 8a6:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <__brkval+0x1>
 8aa:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <__brkval>
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
