
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000580  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000580  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  0000061a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d70  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  0000270e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000432  00000000  00000000  000033d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e8       	ldi	r30, 0x80	; 128
  ac:	f5 e0       	ldi	r31, 0x05	; 5
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 30       	cpi	r26, 0x06	; 6
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a6 e0       	ldi	r26, 0x06	; 6
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	8c d0       	rcall	.+280    	; 0x1e8 <main>
  d0:	55 c2       	rjmp	.+1194   	; 0x57c <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <setup>:
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
	return((*h)->e);
}/*firstValue*/
  d4:	fc 01       	movw	r30, r24
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	10 82       	st	Z, r1
  da:	fb 01       	movw	r30, r22
  dc:	11 82       	std	Z+1, r1	; 0x01
  de:	10 82       	st	Z, r1
  e0:	08 95       	ret

000000e2 <initLink>:
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	26 d1       	rcall	.+588    	; 0x33a <malloc>
  ee:	99 83       	std	Y+1, r25	; 0x01
  f0:	88 83       	st	Y, r24
  f2:	fc 01       	movw	r30, r24
  f4:	13 82       	std	Z+3, r1	; 0x03
  f6:	12 82       	std	Z+2, r1	; 0x02
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <enqueue>:
  fe:	db 01       	movw	r26, r22
 100:	ed 91       	ld	r30, X+
 102:	fc 91       	ld	r31, X
 104:	30 97       	sbiw	r30, 0x00	; 0
 106:	61 f0       	breq	.+24     	; 0x120 <enqueue+0x22>
 108:	da 01       	movw	r26, r20
 10a:	8d 91       	ld	r24, X+
 10c:	9c 91       	ld	r25, X
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	93 83       	std	Z+3, r25	; 0x03
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	8d 91       	ld	r24, X+
 116:	9c 91       	ld	r25, X
 118:	fb 01       	movw	r30, r22
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret
 120:	da 01       	movw	r26, r20
 122:	2d 91       	ld	r18, X+
 124:	3c 91       	ld	r19, X
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	fc 01       	movw	r30, r24
 12a:	31 83       	std	Z+1, r19	; 0x01
 12c:	20 83       	st	Z, r18
 12e:	8d 91       	ld	r24, X+
 130:	9c 91       	ld	r25, X
 132:	db 01       	movw	r26, r22
 134:	8d 93       	st	X+, r24
 136:	9c 93       	st	X, r25
 138:	08 95       	ret

0000013a <dequeue>:
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	da 01       	movw	r26, r20
 142:	8d 93       	st	X+, r24
 144:	9c 93       	st	X, r25
 146:	a0 81       	ld	r26, Z
 148:	b1 81       	ldd	r27, Z+1	; 0x01
 14a:	10 97       	sbiw	r26, 0x00	; 0
 14c:	41 f0       	breq	.+16     	; 0x15e <dequeue+0x24>
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	8d 91       	ld	r24, X+
 152:	9c 91       	ld	r25, X
 154:	13 97       	sbiw	r26, 0x03	; 3
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <dequeue+0x2a>
 15e:	fb 01       	movw	r30, r22
 160:	11 82       	std	Z+1, r1	; 0x01
 162:	10 82       	st	Z, r1
 164:	08 95       	ret

00000166 <clearQueue>:
/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
/* This clears the queue */
void clearQueue(link **h, link **t){
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
 170:	8b 01       	movw	r16, r22

	link *temp;

	while (*h != NULL){
 172:	88 81       	ld	r24, Y
 174:	99 81       	ldd	r25, Y+1	; 0x01
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	51 f0       	breq	.+20     	; 0x18e <clearQueue+0x28>
		temp = *h;
		*h=(*h)->next;
 17a:	fc 01       	movw	r30, r24
 17c:	22 81       	ldd	r18, Z+2	; 0x02
 17e:	33 81       	ldd	r19, Z+3	; 0x03
 180:	39 83       	std	Y+1, r19	; 0x01
		free(temp);
 182:	28 83       	st	Y, r18
/* This clears the queue */
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
 184:	72 d1       	rcall	.+740    	; 0x46a <free>
 186:	88 81       	ld	r24, Y
 188:	99 81       	ldd	r25, Y+1	; 0x01
 18a:	00 97       	sbiw	r24, 0x00	; 0
		*h=(*h)->next;
		free(temp);
	}/*while*/
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		
 18c:	b1 f7       	brne	.-20     	; 0x17a <clearQueue+0x14>
 18e:	f8 01       	movw	r30, r16
 190:	11 82       	std	Z+1, r1	; 0x01

	return;
}/*clearQueue*/
 192:	10 82       	st	Z, r1
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <mTimer>:
	link* newLink = NULL;
	link* rtnLink = NULL;
}queue;
*/
void mTimer(int count)
{
 19e:	ac 01       	movw	r20, r24
	int i=0;
	TCCR1B |= _BV(WGM12);	// Set WGM bits to 0100, see pg 142
 1a0:	e1 e8       	ldi	r30, 0x81	; 129
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	98 60       	ori	r25, 0x08	; 8
 1a8:	90 83       	st	Z, r25
	OCR1A = 0x03E8;			// Set output compare register for 1000 cycles  = 1ms
 1aa:	88 ee       	ldi	r24, 0xE8	; 232
 1ac:	93 e0       	ldi	r25, 0x03	; 3
 1ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCNT1 = 0x0000;			// Set initial value of Timer Counter to 0x000
 1b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= 0b00000010;   // Output compare interrupt enable 
 1be:	ef e6       	ldi	r30, 0x6F	; 111
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	90 81       	ld	r25, Z
 1c4:	92 60       	ori	r25, 0x02	; 2
 1c6:	90 83       	st	Z, r25
	TIFR1 |= _BV(OCF1A);	// Clear timer interrupt flag and begin timer
 1c8:	b1 9a       	sbi	0x16, 1	; 22
	link* rtnLink = NULL;
}queue;
*/
void mTimer(int count)
{
	int i=0;
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000;			// Set initial value of Timer Counter to 0x000
	TIMSK1 |= 0b00000010;   // Output compare interrupt enable 
	TIFR1 |= _BV(OCF1A);	// Clear timer interrupt flag and begin timer
	
	/* Poll the timer to determine when the timer has reached 0x03E8 */
	while(i<count)
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <mTimer+0x3c>
	{
		if((TIFR1 & 0x02) == 0x02)
 1d0:	b1 9b       	sbis	0x16, 1	; 22
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <mTimer+0x32>
		{
			// clear interrupt flag by writing a 1 to the bit
			TIFR1 |= _BV(OCF1A);
 1d4:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 1d6:	2f 5f       	subi	r18, 0xFF	; 255
 1d8:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000;			// Set initial value of Timer Counter to 0x000
	TIMSK1 |= 0b00000010;   // Output compare interrupt enable 
	TIFR1 |= _BV(OCF1A);	// Clear timer interrupt flag and begin timer
	
	/* Poll the timer to determine when the timer has reached 0x03E8 */
	while(i<count)
 1da:	24 17       	cp	r18, r20
 1dc:	35 07       	cpc	r19, r21
 1de:	1c f4       	brge	.+6      	; 0x1e6 <mTimer+0x48>
	{
		if((TIFR1 & 0x02) == 0x02)
 1e0:	b1 9b       	sbis	0x16, 1	; 22
 1e2:	f6 cf       	rjmp	.-20     	; 0x1d0 <mTimer+0x32>
 1e4:	f7 cf       	rjmp	.-18     	; 0x1d4 <mTimer+0x36>
 1e6:	08 95       	ret

000001e8 <main>:
	return; 
}/*mTimer*/

/*################## MAIN ROUTINE ##################*/

int main(int argc, char *argv[]){
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	28 97       	sbiw	r28, 0x08	; 8
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	
	// Set timer 1 to run at CPU clock, disable all function and use as pure timer 
	TCCR1B |=  _BV(CS10);	// _BV sets the bit to logic 1, CS10 selects clock with no prescaling, f=1 MHz
 1fc:	e1 e8       	ldi	r30, 0x81	; 129
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	81 60       	ori	r24, 0x01	; 1
 204:	80 83       	st	Z, r24
	
	// Configure I/O ports 
	DDRC = 0xff;			//Set all pins on Port C to output 
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;			//Set all pins on Port C to LOW
 20a:	18 b8       	out	0x08, r1	; 8
	DDRA = 0x00;			//Set all pins on Port A to input
 20c:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x00;			//Enable pull-up resistors to set unconnected pins to LOW
 20e:	12 b8       	out	0x02, r1	; 2
	link *head;			// The ptr to the head of the queue 
	link *tail;			// The ptr to the tail of the queue 
	link *newLink;		// A ptr to a link aggregate data type (struct) 
	link *rtnLink;		// same as the above 
	
	rtnLink = NULL;
 210:	18 86       	std	Y+8, r1	; 0x08
 212:	1f 82       	std	Y+7, r1	; 0x07
	newLink = NULL;
 214:	1e 82       	std	Y+6, r1	; 0x06
 216:	1d 82       	std	Y+5, r1	; 0x05

	setup(&head, &tail);			
 218:	be 01       	movw	r22, r28
 21a:	6d 5f       	subi	r22, 0xFD	; 253
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	58 df       	rcall	.-336    	; 0xd4 <setup>
	
	// Read data and add to queue, until the list is 4 items long
	uint8_t input = PINA;
 224:	80 b1       	in	r24, 0x00	; 0
	char item;
	char display;
	int num_presses = 0;
 226:	00 e0       	ldi	r16, 0x00	; 0
 228:	10 e0       	ldi	r17, 0x00	; 0
	
	// loop for entire program
	while(1)
	{
		// wait until button pressed a fifth time
		if(((PINA & WAIT) == WAIT) && (num_presses == 4)) continue;
 22a:	02 9b       	sbis	0x00, 2	; 0
 22c:	05 c0       	rjmp	.+10     	; 0x238 <main+0x50>
 22e:	04 30       	cpi	r16, 0x04	; 4
 230:	11 05       	cpc	r17, r1
 232:	09 f0       	breq	.+2      	; 0x236 <main+0x4e>
 234:	80 c0       	rjmp	.+256    	; 0x336 <main+0x14e>
 236:	f9 cf       	rjmp	.-14     	; 0x22a <main+0x42>
		
		// reset when button pressed for fifth time
		if(((PINA & WAIT) != WAIT) && (num_presses == 4))
 238:	02 99       	sbic	0x00, 2	; 0
 23a:	12 c0       	rjmp	.+36     	; 0x260 <main+0x78>
 23c:	04 30       	cpi	r16, 0x04	; 4
 23e:	11 05       	cpc	r17, r1
 240:	79 f4       	brne	.+30     	; 0x260 <main+0x78>
		{
			while((PINA & WAIT) != WAIT) continue; // when button pressed, wait until released
 242:	02 9b       	sbis	0x00, 2	; 0
 244:	fe cf       	rjmp	.-4      	; 0x242 <main+0x5a>
			mTimer(20); // delay to account for contact bounce
 246:	84 e1       	ldi	r24, 0x14	; 20
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	a9 df       	rcall	.-174    	; 0x19e <mTimer>
			PORTC = 0x00;
 24c:	18 b8       	out	0x08, r1	; 8
			num_presses = 0;
			clearQueue(&head, &tail);
 24e:	be 01       	movw	r22, r28
 250:	6d 5f       	subi	r22, 0xFD	; 253
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	86 df       	rcall	.-244    	; 0x166 <clearQueue>
		if(((PINA & WAIT) != WAIT) && (num_presses == 4))
		{
			while((PINA & WAIT) != WAIT) continue; // when button pressed, wait until released
			mTimer(20); // delay to account for contact bounce
			PORTC = 0x00;
			num_presses = 0;
 25a:	00 e0       	ldi	r16, 0x00	; 0
 25c:	10 e0       	ldi	r17, 0x00	; 0
 25e:	03 c0       	rjmp	.+6      	; 0x266 <main+0x7e>
			clearQueue(&head, &tail);
		}
	
		//loop while acquiring data, up to four items
		while(num_presses < 4)
 260:	04 30       	cpi	r16, 0x04	; 4
 262:	11 05       	cpc	r17, r1
 264:	f4 f4       	brge	.+60     	; 0x2a2 <main+0xba>
		{
			if((PINA & WAIT) == WAIT) continue; // continue to next iteration of loop if button not pressed 
 266:	02 99       	sbic	0x00, 2	; 0
 268:	19 c0       	rjmp	.+50     	; 0x29c <main+0xb4>
			while((PINA & WAIT) != WAIT) continue; // button pressed, wait until released
 26a:	02 9b       	sbis	0x00, 2	; 0
			mTimer(20); // delay to account for contact bounce
 26c:	fe cf       	rjmp	.-4      	; 0x26a <main+0x82>
 26e:	84 e1       	ldi	r24, 0x14	; 20
 270:	90 e0       	ldi	r25, 0x00	; 0
			input = PINA; // read data from Port A
 272:	95 df       	rcall	.-214    	; 0x19e <mTimer>
			input &= 0x03; // clear all bits but the last two
			
			// Initialize new link in the queue with data read from PINA
			initLink(&newLink);
 274:	f0 b0       	in	r15, 0x00	; 0
 276:	ce 01       	movw	r24, r28
 278:	05 96       	adiw	r24, 0x05	; 5
 27a:	33 df       	rcall	.-410    	; 0xe2 <initLink>
			newLink->e.stage = input;
 27c:	ed 81       	ldd	r30, Y+5	; 0x05
 27e:	fe 81       	ldd	r31, Y+6	; 0x06
 280:	8f 2d       	mov	r24, r15
 282:	83 70       	andi	r24, 0x03	; 3
 284:	81 83       	std	Z+1, r24	; 0x01
			enqueue(&head, &tail, &newLink);
 286:	ae 01       	movw	r20, r28
 288:	4b 5f       	subi	r20, 0xFB	; 251
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
 28c:	be 01       	movw	r22, r28
 28e:	6d 5f       	subi	r22, 0xFD	; 253
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	33 df       	rcall	.-410    	; 0xfe <enqueue>
			num_presses++;
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
			num_presses = 0;
			clearQueue(&head, &tail);
		}
	
		//loop while acquiring data, up to four items
		while(num_presses < 4)
 29c:	04 30       	cpi	r16, 0x04	; 4
 29e:	11 05       	cpc	r17, r1
 2a0:	14 f3       	brlt	.-60     	; 0x266 <main+0x7e>
		}
		
		// output data in the queue to PORTC 
		
		//discard first item in the queue
		dequeue(&head, &tail, &rtnLink);
 2a2:	ae 01       	movw	r20, r28
 2a4:	49 5f       	subi	r20, 0xF9	; 249
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	be 01       	movw	r22, r28
 2aa:	6d 5f       	subi	r22, 0xFD	; 253
 2ac:	7f 4f       	sbci	r23, 0xFF	; 255
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
		free(rtnLink);
 2b2:	43 df       	rcall	.-378    	; 0x13a <dequeue>
 2b4:	8f 81       	ldd	r24, Y+7	; 0x07
 2b6:	98 85       	ldd	r25, Y+8	; 0x08
	
		//display item 1
		dequeue(&head, &head, &rtnLink);
 2b8:	d8 d0       	rcall	.+432    	; 0x46a <free>
 2ba:	ae 01       	movw	r20, r28
 2bc:	49 5f       	subi	r20, 0xF9	; 249
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
		item = rtnLink->e.stage;
 2c6:	cb 01       	movw	r24, r22
 2c8:	38 df       	rcall	.-400    	; 0x13a <dequeue>
 2ca:	8f 81       	ldd	r24, Y+7	; 0x07
 2cc:	98 85       	ldd	r25, Y+8	; 0x08
		free(rtnLink);
 2ce:	fc 01       	movw	r30, r24
 2d0:	f1 80       	ldd	r15, Z+1	; 0x01
		display = item;
		PORTC = display;
 2d2:	cb d0       	rcall	.+406    	; 0x46a <free>
		mTimer(2000);
 2d4:	f8 b8       	out	0x08, r15	; 8
 2d6:	80 ed       	ldi	r24, 0xD0	; 208
 2d8:	97 e0       	ldi	r25, 0x07	; 7
	
		//display items 1 and 2
		dequeue(&head, &tail, &rtnLink);
 2da:	61 df       	rcall	.-318    	; 0x19e <mTimer>
 2dc:	ae 01       	movw	r20, r28
 2de:	49 5f       	subi	r20, 0xF9	; 249
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	be 01       	movw	r22, r28
 2e4:	6d 5f       	subi	r22, 0xFD	; 253
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	ce 01       	movw	r24, r28
		item = rtnLink->e.stage;
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	26 df       	rcall	.-436    	; 0x13a <dequeue>
 2ee:	8f 81       	ldd	r24, Y+7	; 0x07
 2f0:	98 85       	ldd	r25, Y+8	; 0x08
		free(rtnLink);
 2f2:	fc 01       	movw	r30, r24
 2f4:	e1 80       	ldd	r14, Z+1	; 0x01
		display = ((item << 2) | display);
 2f6:	b9 d0       	rcall	.+370    	; 0x46a <free>
 2f8:	ee 0c       	add	r14, r14
		PORTC = display;
 2fa:	ee 0c       	add	r14, r14
		mTimer(2000);
 2fc:	ef 28       	or	r14, r15
 2fe:	e8 b8       	out	0x08, r14	; 8
 300:	80 ed       	ldi	r24, 0xD0	; 208
	
		//display items 1, 2, and 3
		dequeue(&head, &tail, &rtnLink);
 302:	97 e0       	ldi	r25, 0x07	; 7
 304:	4c df       	rcall	.-360    	; 0x19e <mTimer>
 306:	ae 01       	movw	r20, r28
 308:	49 5f       	subi	r20, 0xF9	; 249
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	be 01       	movw	r22, r28
 30e:	6d 5f       	subi	r22, 0xFD	; 253
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	ce 01       	movw	r24, r28
		item = rtnLink->e.stage;
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	11 df       	rcall	.-478    	; 0x13a <dequeue>
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	98 85       	ldd	r25, Y+8	; 0x08
		free(rtnLink);
 31c:	fc 01       	movw	r30, r24
 31e:	f1 80       	ldd	r15, Z+1	; 0x01
		display = ((item << 4) | display);
 320:	a4 d0       	rcall	.+328    	; 0x46a <free>
 322:	f0 e1       	ldi	r31, 0x10	; 16
 324:	ff 9e       	mul	r15, r31
 326:	c0 01       	movw	r24, r0
 328:	11 24       	eor	r1, r1
		PORTC = display;
 32a:	8e 29       	or	r24, r14
		mTimer(2000);
 32c:	88 b9       	out	0x08, r24	; 8
 32e:	80 ed       	ldi	r24, 0xD0	; 208
 330:	97 e0       	ldi	r25, 0x07	; 7
 332:	35 df       	rcall	.-406    	; 0x19e <mTimer>
 334:	7a cf       	rjmp	.-268    	; 0x22a <main+0x42>
	{
		// wait until button pressed a fifth time
		if(((PINA & WAIT) == WAIT) && (num_presses == 4)) continue;
		
		// reset when button pressed for fifth time
		if(((PINA & WAIT) != WAIT) && (num_presses == 4))
 336:	80 b1       	in	r24, 0x00	; 0
 338:	93 cf       	rjmp	.-218    	; 0x260 <main+0x78>

0000033a <malloc>:
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	91 05       	cpc	r25, r1
 346:	10 f4       	brcc	.+4      	; 0x34c <malloc+0x12>
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 350:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	30 97       	sbiw	r30, 0x00	; 0
 35e:	19 f1       	breq	.+70     	; 0x3a6 <malloc+0x6c>
 360:	40 81       	ld	r20, Z
 362:	51 81       	ldd	r21, Z+1	; 0x01
 364:	02 81       	ldd	r16, Z+2	; 0x02
 366:	13 81       	ldd	r17, Z+3	; 0x03
 368:	48 17       	cp	r20, r24
 36a:	59 07       	cpc	r21, r25
 36c:	c8 f0       	brcs	.+50     	; 0x3a0 <malloc+0x66>
 36e:	84 17       	cp	r24, r20
 370:	95 07       	cpc	r25, r21
 372:	69 f4       	brne	.+26     	; 0x38e <malloc+0x54>
 374:	10 97       	sbiw	r26, 0x00	; 0
 376:	31 f0       	breq	.+12     	; 0x384 <malloc+0x4a>
 378:	12 96       	adiw	r26, 0x02	; 2
 37a:	0c 93       	st	X, r16
 37c:	12 97       	sbiw	r26, 0x02	; 2
 37e:	13 96       	adiw	r26, 0x03	; 3
 380:	1c 93       	st	X, r17
 382:	27 c0       	rjmp	.+78     	; 0x3d2 <malloc+0x98>
 384:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 388:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 38c:	22 c0       	rjmp	.+68     	; 0x3d2 <malloc+0x98>
 38e:	21 15       	cp	r18, r1
 390:	31 05       	cpc	r19, r1
 392:	19 f0       	breq	.+6      	; 0x39a <malloc+0x60>
 394:	42 17       	cp	r20, r18
 396:	53 07       	cpc	r21, r19
 398:	18 f4       	brcc	.+6      	; 0x3a0 <malloc+0x66>
 39a:	9a 01       	movw	r18, r20
 39c:	bd 01       	movw	r22, r26
 39e:	ef 01       	movw	r28, r30
 3a0:	df 01       	movw	r26, r30
 3a2:	f8 01       	movw	r30, r16
 3a4:	db cf       	rjmp	.-74     	; 0x35c <malloc+0x22>
 3a6:	21 15       	cp	r18, r1
 3a8:	31 05       	cpc	r19, r1
 3aa:	f9 f0       	breq	.+62     	; 0x3ea <malloc+0xb0>
 3ac:	28 1b       	sub	r18, r24
 3ae:	39 0b       	sbc	r19, r25
 3b0:	24 30       	cpi	r18, 0x04	; 4
 3b2:	31 05       	cpc	r19, r1
 3b4:	80 f4       	brcc	.+32     	; 0x3d6 <malloc+0x9c>
 3b6:	8a 81       	ldd	r24, Y+2	; 0x02
 3b8:	9b 81       	ldd	r25, Y+3	; 0x03
 3ba:	61 15       	cp	r22, r1
 3bc:	71 05       	cpc	r23, r1
 3be:	21 f0       	breq	.+8      	; 0x3c8 <malloc+0x8e>
 3c0:	fb 01       	movw	r30, r22
 3c2:	93 83       	std	Z+3, r25	; 0x03
 3c4:	82 83       	std	Z+2, r24	; 0x02
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <malloc+0x96>
 3c8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 3cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 3d0:	fe 01       	movw	r30, r28
 3d2:	32 96       	adiw	r30, 0x02	; 2
 3d4:	44 c0       	rjmp	.+136    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3d6:	fe 01       	movw	r30, r28
 3d8:	e2 0f       	add	r30, r18
 3da:	f3 1f       	adc	r31, r19
 3dc:	81 93       	st	Z+, r24
 3de:	91 93       	st	Z+, r25
 3e0:	22 50       	subi	r18, 0x02	; 2
 3e2:	31 09       	sbc	r19, r1
 3e4:	39 83       	std	Y+1, r19	; 0x01
 3e6:	28 83       	st	Y, r18
 3e8:	3a c0       	rjmp	.+116    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3ea:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 3ee:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 3f2:	23 2b       	or	r18, r19
 3f4:	41 f4       	brne	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3fe:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 402:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 406:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 40a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 40e:	21 15       	cp	r18, r1
 410:	31 05       	cpc	r19, r1
 412:	41 f4       	brne	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 414:	2d b7       	in	r18, 0x3d	; 61
 416:	3e b7       	in	r19, 0x3e	; 62
 418:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 41c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 420:	24 1b       	sub	r18, r20
 422:	35 0b       	sbc	r19, r21
 424:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 428:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 42c:	e2 17       	cp	r30, r18
 42e:	f3 07       	cpc	r31, r19
 430:	a0 f4       	brcc	.+40     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 432:	2e 1b       	sub	r18, r30
 434:	3f 0b       	sbc	r19, r31
 436:	28 17       	cp	r18, r24
 438:	39 07       	cpc	r19, r25
 43a:	78 f0       	brcs	.+30     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43c:	ac 01       	movw	r20, r24
 43e:	4e 5f       	subi	r20, 0xFE	; 254
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	24 17       	cp	r18, r20
 444:	35 07       	cpc	r19, r21
 446:	48 f0       	brcs	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 448:	4e 0f       	add	r20, r30
 44a:	5f 1f       	adc	r21, r31
 44c:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 450:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 454:	81 93       	st	Z+, r24
 456:	91 93       	st	Z+, r25
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	e0 e0       	ldi	r30, 0x00	; 0
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	cf 01       	movw	r24, r30
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <free>:
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	09 f4       	brne	.+2      	; 0x474 <free+0xa>
 472:	81 c0       	rjmp	.+258    	; 0x576 <free+0x10c>
 474:	fc 01       	movw	r30, r24
 476:	32 97       	sbiw	r30, 0x02	; 2
 478:	13 82       	std	Z+3, r1	; 0x03
 47a:	12 82       	std	Z+2, r1	; 0x02
 47c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 480:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 484:	10 97       	sbiw	r26, 0x00	; 0
 486:	81 f4       	brne	.+32     	; 0x4a8 <free+0x3e>
 488:	20 81       	ld	r18, Z
 48a:	31 81       	ldd	r19, Z+1	; 0x01
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 494:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 498:	28 17       	cp	r18, r24
 49a:	39 07       	cpc	r19, r25
 49c:	51 f5       	brne	.+84     	; 0x4f2 <free+0x88>
 49e:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 4a2:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 4a6:	67 c0       	rjmp	.+206    	; 0x576 <free+0x10c>
 4a8:	ed 01       	movw	r28, r26
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	ce 17       	cp	r28, r30
 4b0:	df 07       	cpc	r29, r31
 4b2:	40 f4       	brcc	.+16     	; 0x4c4 <free+0x5a>
 4b4:	4a 81       	ldd	r20, Y+2	; 0x02
 4b6:	5b 81       	ldd	r21, Y+3	; 0x03
 4b8:	9e 01       	movw	r18, r28
 4ba:	41 15       	cp	r20, r1
 4bc:	51 05       	cpc	r21, r1
 4be:	f1 f0       	breq	.+60     	; 0x4fc <free+0x92>
 4c0:	ea 01       	movw	r28, r20
 4c2:	f5 cf       	rjmp	.-22     	; 0x4ae <free+0x44>
 4c4:	d3 83       	std	Z+3, r29	; 0x03
 4c6:	c2 83       	std	Z+2, r28	; 0x02
 4c8:	40 81       	ld	r20, Z
 4ca:	51 81       	ldd	r21, Z+1	; 0x01
 4cc:	84 0f       	add	r24, r20
 4ce:	95 1f       	adc	r25, r21
 4d0:	c8 17       	cp	r28, r24
 4d2:	d9 07       	cpc	r29, r25
 4d4:	59 f4       	brne	.+22     	; 0x4ec <free+0x82>
 4d6:	88 81       	ld	r24, Y
 4d8:	99 81       	ldd	r25, Y+1	; 0x01
 4da:	84 0f       	add	r24, r20
 4dc:	95 1f       	adc	r25, r21
 4de:	02 96       	adiw	r24, 0x02	; 2
 4e0:	91 83       	std	Z+1, r25	; 0x01
 4e2:	80 83       	st	Z, r24
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	9b 81       	ldd	r25, Y+3	; 0x03
 4e8:	93 83       	std	Z+3, r25	; 0x03
 4ea:	82 83       	std	Z+2, r24	; 0x02
 4ec:	21 15       	cp	r18, r1
 4ee:	31 05       	cpc	r19, r1
 4f0:	29 f4       	brne	.+10     	; 0x4fc <free+0x92>
 4f2:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 4f6:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 4fa:	3d c0       	rjmp	.+122    	; 0x576 <free+0x10c>
 4fc:	e9 01       	movw	r28, r18
 4fe:	fb 83       	std	Y+3, r31	; 0x03
 500:	ea 83       	std	Y+2, r30	; 0x02
 502:	49 91       	ld	r20, Y+
 504:	59 91       	ld	r21, Y+
 506:	c4 0f       	add	r28, r20
 508:	d5 1f       	adc	r29, r21
 50a:	ec 17       	cp	r30, r28
 50c:	fd 07       	cpc	r31, r29
 50e:	61 f4       	brne	.+24     	; 0x528 <free+0xbe>
 510:	80 81       	ld	r24, Z
 512:	91 81       	ldd	r25, Z+1	; 0x01
 514:	84 0f       	add	r24, r20
 516:	95 1f       	adc	r25, r21
 518:	02 96       	adiw	r24, 0x02	; 2
 51a:	e9 01       	movw	r28, r18
 51c:	99 83       	std	Y+1, r25	; 0x01
 51e:	88 83       	st	Y, r24
 520:	82 81       	ldd	r24, Z+2	; 0x02
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	9b 83       	std	Y+3, r25	; 0x03
 526:	8a 83       	std	Y+2, r24	; 0x02
 528:	e0 e0       	ldi	r30, 0x00	; 0
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	12 96       	adiw	r26, 0x02	; 2
 52e:	8d 91       	ld	r24, X+
 530:	9c 91       	ld	r25, X
 532:	13 97       	sbiw	r26, 0x03	; 3
 534:	00 97       	sbiw	r24, 0x00	; 0
 536:	19 f0       	breq	.+6      	; 0x53e <free+0xd4>
 538:	fd 01       	movw	r30, r26
 53a:	dc 01       	movw	r26, r24
 53c:	f7 cf       	rjmp	.-18     	; 0x52c <free+0xc2>
 53e:	8d 91       	ld	r24, X+
 540:	9c 91       	ld	r25, X
 542:	11 97       	sbiw	r26, 0x01	; 1
 544:	9d 01       	movw	r18, r26
 546:	2e 5f       	subi	r18, 0xFE	; 254
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	82 0f       	add	r24, r18
 54c:	93 1f       	adc	r25, r19
 54e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 552:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 556:	28 17       	cp	r18, r24
 558:	39 07       	cpc	r19, r25
 55a:	69 f4       	brne	.+26     	; 0x576 <free+0x10c>
 55c:	30 97       	sbiw	r30, 0x00	; 0
 55e:	29 f4       	brne	.+10     	; 0x56a <free+0x100>
 560:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 564:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 568:	02 c0       	rjmp	.+4      	; 0x56e <free+0x104>
 56a:	13 82       	std	Z+3, r1	; 0x03
 56c:	12 82       	std	Z+2, r1	; 0x02
 56e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 572:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
